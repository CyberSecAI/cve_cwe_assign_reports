{
  "method": "sparse_with_keyphrases",
  "query": "yajl-ruby is a C binding to the YAJL JSON parsing and generation library. The 1.x branch and the 2.x branch of `yajl` contain an integer overflow which leads to subsequent heap memory corruption when dealing with large (~2GB) inputs. The reallocation logic at `yajl_buf.c#L64` may result in the `need` 32bit integer wrapping to 0 when `need` approaches a value of 0x80000000 (i.e. ~2GB of data), which results in a reallocation of buf->alloc into a small heap chunk. These integers are declared as `size_t` in the 2.x branch of `yajl`, which practically prevents the issue from triggering on 64bit platforms, however this does not preclude this issue triggering on 32bit builds on which `size_t` is a 32bit integer. Subsequent population of this under-allocated heap chunk is based on the original buffer size, leading to heap memory corruption. This vulnerability mostly impacts process availability. Maintainers believe exploitation for arbitrary code execution is unlikely. A patch is available and anticipated to be part of yajl-ruby version 1.4.2. As a workaround, avoid passing large inputs to YAJL.",
  "keyphrases": {
    "rootcause": "integer overflow"
  },
  "timestamp": "2025-03-18T10:56:36.962754",
  "results_count": 20,
  "results_summary": [
    {
      "doc_id": "CWE-190",
      "name": "Integer Overflow or Wraparound",
      "score": 1481.9124913273488
    },
    {
      "doc_id": "CWE-1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 1054.0640938617203
    },
    {
      "doc_id": "CWE-197",
      "name": "Numeric Truncation Error",
      "score": 1048.794300579134
    },
    {
      "doc_id": "CWE-122",
      "name": "Heap-based Buffer Overflow",
      "score": 994.7626518341233
    },
    {
      "doc_id": "CWE-704",
      "name": "Incorrect Type Conversion or Cast",
      "score": 979.0650368851834
    }
  ]
}