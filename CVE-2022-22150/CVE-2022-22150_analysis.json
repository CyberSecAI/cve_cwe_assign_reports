{
  "cve_id": "CVE-2022-22150",
  "description": "A memory corruption vulnerability exists in the JavaScript engine of Foxit Softwares PDF Reader, version 11.1.0.52543. A specially-crafted PDF document can trigger an exception which is improperly handled, leaving the engine in an invalid state, which can lead to memory corruption and arbitrary code execution. An attacker needs to trick the user to open the malicious file to trigger this vulnerability. Exploitation is also possible if a user visits a specially-crafted, malicious site if the browser plugin extension is enabled.",
  "key_phrases": {
    "rootcause": "improperly handled exception",
    "weakness": "A memory corruption vulnerability",
    "impact": "arbitrary code execution",
    "vector": "specially-crafted PDF document",
    "attacker": "",
    "product": "Foxit Softwares PDF Reader",
    "version": "11.1.0.52543",
    "component": "JavaScript engine"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\n- The vulnerability lies in the improper handling of exceptions within the JavaScript engine of Foxit Reader when the `getPageNthWordQuads` method is called with an invalid parameter.\n- A C++ exception is thrown but not properly handled when triggered from nested JavaScript execution (e.g., within an event handler or callback).\n\n**Weaknesses/Vulnerabilities:**\n\n- **Improper Exception Handling:** The JavaScript engine doesn't correctly clean up or reset its state when an exception occurs during nested execution. This leaves the engine in an inconsistent state.\n- **Memory Corruption:** The inconsistent state leads to memory corruption, potentially due to the engine's deoptimizer using a corrupted stack pointer.\n\n**Impact of Exploitation:**\n\n- **Arbitrary Code Execution:** Successful exploitation of this vulnerability can lead to arbitrary code execution, allowing an attacker to take control of the affected system.\n- **Memory Corruption:** The vulnerability leads to memory corruption, causing crashes and potentially enabling other attacks.\n\n**Attack Vectors:**\n\n- **Malicious PDF Document:** An attacker can embed malicious JavaScript in a PDF document. When a user opens this document in a vulnerable version of Foxit Reader, the exploit is triggered.\n- **Malicious Website:** If the Foxit Reader browser plugin is enabled, a user visiting a specially-crafted malicious website can also trigger the vulnerability.\n\n**Required Attacker Capabilities/Position:**\n\n-   **User Interaction:** The attacker must trick the user into opening a malicious PDF file or visiting a malicious website.\n- **JavaScript Knowledge**: The attacker needs to craft specific JavaScript code that triggers the exception in a nested execution context to exploit this vulnerability.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-460 | Improper Cleanup on Thrown Exception | 0.9 | Base | Primary | Allowed |\n| CWE-787 | Out-of-bounds Write | 0.7 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability is caused by an **improperly handled exception** in the JavaScript engine of Foxit Reader. When the `getPageNthWordQuads` method is called with an invalid parameter, a C++ exception is thrown but not properly handled during nested JavaScript execution. This leads to an inconsistent engine state and ultimately **memory corruption**. The core weakness is the failure to properly clean up or reset the engine's state after an exception. This aligns directly with CWE-460 (Improper Cleanup on Thrown Exception). The description explicitly mentions the **improper handling of exceptions** which leads to an invalid state and memory corruption. CWE-460 is at the Base level of abstraction, which is preferred.\n  \n  - *Relationship Analysis:* There are no direct relationships specified for CWE-460.\n\n- **Confidence Score:**  \n  - Confidence: 0.9 (High evidence due to the explicit mention of exception handling issues and their consequences.)\n\n- **Analysis and Justification:**  \n  - *Explanation:* The **memory corruption vulnerability** that occurs because of the **improper exception handling** can result in an out-of-bounds write. The vulnerability description indicates that the improper handling of exceptions leads to an inconsistent state, which can result in memory corruption and arbitrary code execution. CWE-787 (Out-of-bounds Write) describes a scenario where a product writes data past the end of the intended buffer. The **root cause** is the **improper exception handling (CWE-460)**, which can lead to memory corruption (**CWE-787**). While CWE-787 accurately represents the result of the **memory corruption**, the primary weakness is in exception handling.\n  \n  - *Relationship Analysis:* CWE-787 is a child of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer). It can also be a consequence of other weaknesses that lead to writing outside the allocated buffer.\n\n- **Confidence Score:**  \n  - Confidence: 0.7 (There is sufficient evidence to show that the **improper exception handling** results in **memory corruption** but assigning CWE-787 as a secondary candidate as the primary **rootcause** is the exception handling.)",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-460 | Improper Cleanup on Thrown Exception | 0.9 | Base | Primary | Allowed |\n| CWE-787 | Out-of-bounds Write | 0.7 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability is caused by an **improperly handled exception** in the JavaScript engine of Foxit Reader. When the `getPageNthWordQuads` method is called with an invalid parameter, a C++ exception is thrown but not properly handled during nested JavaScript execution. This leads to an inconsistent engine state and ultimately **memory corruption**. The core weakness is the failure to properly clean up or reset the engine's state after an exception. This aligns directly with CWE-460 (Improper Cleanup on Thrown Exception). The description explicitly mentions the **improper handling of exceptions** which leads to an invalid state and memory corruption. CWE-460 is at the Base level of abstraction, which is preferred.\n  \n  - *Relationship Analysis:* There are no direct relationships specified for CWE-460.\n\n- **Confidence Score:**  \n  - Confidence: 0.9 (High evidence due to the explicit mention of exception handling issues and their consequences.)\n\n- **Analysis and Justification:**  \n  - *Explanation:* The **memory corruption vulnerability** that occurs because of the **improper exception handling** can result in an out-of-bounds write. The vulnerability description indicates that the improper handling of exceptions leads to an inconsistent state, which can result in memory corruption and arbitrary code execution. CWE-787 (Out-of-bounds Write) describes a scenario where a product writes data past the end of the intended buffer. The **root cause** is the **improper exception handling (CWE-460)**, which can lead to memory corruption (**CWE-787**). While CWE-787 accurately represents the result of the **memory corruption**, the primary weakness is in exception handling.\n  \n  - *Relationship Analysis:* CWE-787 is a child of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer). It can also be a consequence of other weaknesses that lead to writing outside the allocated buffer.\n\n- **Confidence Score:**  \n  - Confidence: 0.7 (There is sufficient evidence to show that the **improper exception handling** results in **memory corruption** but assigning CWE-787 as a secondary candidate as the primary **rootcause** is the exception handling.)",
  "criticism": "Okay, I've reviewed the provided analysis against the full CWE specifications. Here's my critique:\n\n**Overall Assessment:**\n\nThe analysis is generally well-reasoned and the primary CWE assignment (CWE-460) is accurate and well-justified. The secondary candidate (CWE-787) is also a reasonable choice, reflecting the consequence of the primary weakness.  The confidence scores are appropriate.\n\n**Detailed Critique:**\n\n*   **CWE-460 (Improper Cleanup on Thrown Exception) - Primary:**\n\n    *   **Justification:** The core argument for CWE-460 is strong. The vulnerability description explicitly mentions the \"improper handling of exceptions\" within the JavaScript engine, leading to an inconsistent state and subsequent memory corruption. The analysis accurately connects the root cause (exception handling) to the resulting vulnerability.\n    *   **Confidence:** The 0.9 confidence is warranted. The vulnerability description strongly supports this mapping.\n    *   **CWE Specification Alignment:** The description of CWE-460 in the specification, *\"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow,\"*  directly maps to the described vulnerability.\n    *   **Mitigation Review:** The specification's mitigation guidance for CWE-460 is *\"If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.\"* This aligns with the general strategy of ensuring proper resource management and state cleanup during exception handling. It highlights the need for robust error handling mechanisms.\n\n*   **CWE-787 (Out-of-bounds Write) - Secondary Candidate:**\n\n    *   **Justification:** The analysis correctly identifies that the memory corruption resulting from the improper exception handling can manifest as an out-of-bounds write. This represents a consequence of the primary weakness.\n    *   **Confidence:** The 0.7 confidence is also reasonable. While the description indicates memory corruption, it is a result of improperly handled exceptions. So, it's appropriate as a secondary candidate.\n    *   **CWE Specification Alignment:** The description of CWE-787 *\"The product writes data past the end, or before the beginning, of the intended buffer,\"* accurately describes the potential *result* of the vulnerability. It's a possible outcome of the memory corruption.\n    *   **Mitigation Review:** Mitigation for CWE-787, such as *\"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid,\"* is also relevant. However, the deeper fix would be in proper exception handling, to prevent the memory corruption at the source. Therefore, preventing the memory corruption would avoid CWE-787 entirely.\n\n**Retriever Results Critique:**\n\nThe retriever results list contains some interesting candidates.\n\n*   **CWE-190 (Integer Overflow or Wraparound):** While not selected, it is a reasonable consideration. An integer overflow could potentially contribute to the memory corruption, especially if it's related to calculating buffer sizes. However, exception handling is a more direct root cause.\n*   **CWE-1284 (Improper Validation of Specified Quantity in Input):** This could be relevant if the code that's throwing the exception is related to validating input parameters (e.g. size of memory to allocate). However, the original analysis states that the vulnerability occurs when calling `getPageNthWordQuads` with an invalid parameter. This could mean this is related to the invalid parameter, making CWE-1284 a strong candidate as well.\n*   **CWE-416 (Use After Free):** Could be possible if exception is called and then memory is deallocated and then used, so this is a possibility as well.\n*   **CWE-248 (Uncaught Exception):** Not directly the right choice, as the exception is caught. But not handled correctly.\n\n**Suggestions for Improvement:**\n\n*   **Clarify Relationship between CWEs:** Explicitly state the relationship between CWE-460 and CWE-787 as a *causal* relationship: \"The improper exception handling (CWE-460) *leads to* memory corruption, which manifests as an out-of-bounds write (CWE-787).\" This makes the analysis more understandable.\n*   **Consider Potential Chains:** While the analysis is strong, briefly consider potential chains. For instance: \"It's possible that an integer overflow (CWE-190) contributes to the memory corruption by miscalculating buffer sizes.\" Then, explain why that wasn't chosen as a primary CWE (e.g., \"However, the primary driver is the failure to handle the exception itself.\").\n*   **Discuss Alternative CWEs:** Briefly mention CWE-248 (Uncaught Exception) and explain why it's *not* the primary weakness (\"While an exception is thrown, it is caught. The problem is in how the exception is *handled* rather than in it being uncaught\").\n\n**Conclusion:**\n\nThe analysis is strong and well-justified. The choice of CWE-460 as the primary weakness and CWE-787 as a secondary candidate is appropriate and reflects the nature of the vulnerability. Addressing the minor suggestions above could further improve the analysis and make it even more comprehensive.",
  "resolution": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-460 | Improper Cleanup on Thrown Exception | 0.9 | Base | Primary | Allowed |\n| CWE-787 | Out-of-bounds Write | 0.7 | Base | Secondary Candidate | Allowed |\n| CWE-1284 | Improper Validation of Specified Quantity in Input | 0.5 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship impacting the decision is the causal one, where **CWE-460** (Improper Cleanup on Thrown Exception) leads to **CWE-787** (Out-of-bounds Write). **CWE-787** is a child of **CWE-119** (Improper Restriction of Operations within the Bounds of a Memory Buffer), indicating that it's a specific type of buffer-related error. Also, `getPageNthWordQuads` is called with an invalid parameter, making **CWE-1284** (Improper Validation of Specified Quantity in Input) a strong secondary candidate, because the exception is being thrown due to the invalid input parameter.\n\n```mermaid\ngraph TD\n    cwe460[\"CWE-460: Improper Cleanup on Thrown Exception\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n    \n    cwe787 -->|CHILDOF| cwe119\n    cwe787 -->|CANFOLLOW| cwe460\n    cwe460 -->|CANPRECEDE| cwe787\n    cwe1284 -->|CANPRECEDE| cwe460\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe460 primary\n    class cwe787,cwe1284 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with calling the `getPageNthWordQuads` method with an invalid parameter. This leads to **CWE-1284**, because the input is not properly validated. Then a C++ exception is thrown, but it is not properly handled, leading to **CWE-460** (**rootcause**). This results in an inconsistent engine state and finally leads to **CWE-787** (**memory corruption**).\n\n## Summary of Analysis\nThe initial analysis and criticism are well-reasoned and accurate. The primary **WEAKNESS** is indeed the **improper exception handling (CWE-460)**, as the vulnerability description explicitly mentions this. The secondary candidate, **CWE-787**, is the consequence of this **rootcause**, representing the **memory corruption**. The suggestion to clarify the relationship between the **CWEs** as a causal one is valid and makes the analysis clearer. However, the analysis did not consider that the exception is thrown due to invalid input. Therefore, I am adding **CWE-1284** to the secondary candidates.\n\nThe graph relationships confirm this, with **CWE-460** potentially leading to **CWE-787**. The abstraction levels are also appropriate, as both **CWE-460** and **CWE-787** are at the Base level.\n\nThe final decision is to keep **CWE-460** as the primary **WEAKNESS**, as it's the **rootcause** of the vulnerability. **CWE-787** remains as a secondary candidate because it's the consequence of the improper exception handling. Also, **CWE-1284** is being added as a secondary candidate because the invalid input leads to the exception. This classification provides the optimal level of specificity, reflecting both the **rootcause** and the resulting impact. The confidence score remains at 0.8, as it is still highly likely that this is related to the exception handling, but there is sufficient evidence to show that invalid input also plays a role.\n\nThe evidence supporting this decision is from the vulnerability description: \"A specially-crafted PDF document can trigger an exception which is improperly handled, leaving the engine in an invalid state, which can lead to memory corruption and arbitrary code execution... calling the `getPageNthWordQuads` method with an invalid parameter.\"",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "CWE-787",
        "name": "Out-of-bounds Write",
        "type": "Base",
        "original_content": "The product writes data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 929.0778180637924,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5685204506890137,
            "sparse": 929.0778180637924,
            "graph": 2.071405200582127
          },
          "normalized_scores": {
            "dense": 0.5685204506890137,
            "sparse": 0.7432622544510339,
            "graph": 0.7397875716364739
          },
          "weighted_scores": {
            "dense": 0.19898215774115477,
            "sparse": 0.2973049017804136,
            "graph": 0.18494689290911848
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5685204506890137,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.5685204506890137,
              "weight": 0.35,
              "weighted_score": 0.19898215774115477
            },
            "sparse": {
              "raw_score": 929.0778180637924,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.7432622544510339,
              "weight": 0.4,
              "weighted_score": 0.2973049017804136
            },
            "graph": {
              "raw_score": 2.071405200582127,
              "query_max": 3.3566,
              "query_min": 1.6848000000000003,
              "normalized_score": 0.7397875716364739,
              "weight": 0.25,
              "weighted_score": 0.18494689290911848
            }
          },
          "contribution_percentages": {
            "dense": 29.209078178087506,
            "sparse": 43.64211453636602,
            "graph": 27.148807285546468
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.6812339524306869,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.8856041381598929
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.8856041381598929
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.9741645519758823
            }
          },
          "combined_score": 0.9741645519758823
        }
      },
      "similarity": 0.9741645519758823
    },
    {
      "metadata": {
        "doc_id": "CWE-190",
        "name": "Integer Overflow or Wraparound",
        "type": "Base",
        "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
        "relationships": [],
        "original_sparse_score": 889.3876507016961,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ],
          "suggestions": [
            {
              "CweID": "191",
              "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4789022832962139,
            "sparse": 889.3876507016961,
            "graph": 2.0395461185041723
          },
          "normalized_scores": {
            "dense": 0.4789022832962139,
            "sparse": 0.7115101205613569,
            "graph": 0.7284093280372045
          },
          "weighted_scores": {
            "dense": 0.16761579915367486,
            "sparse": 0.28460404822454277,
            "graph": 0.18210233200930112
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4789022832962139,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.4789022832962139,
              "weight": 0.35,
              "weighted_score": 0.16761579915367486
            },
            "sparse": {
              "raw_score": 889.3876507016961,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.7115101205613569,
              "weight": 0.4,
              "weighted_score": 0.28460404822454277
            },
            "graph": {
              "raw_score": 2.0395461185041723,
              "query_max": 3.3566,
              "query_min": 1.6848000000000003,
              "normalized_score": 0.7284093280372045,
              "weight": 0.25,
              "weighted_score": 0.18210233200930112
            }
          },
          "contribution_percentages": {
            "dense": 26.424395141837753,
            "sparse": 44.867428173384596,
            "graph": 28.708176684777648
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.6343221793875188,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.8246188332037745
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.8246188332037745
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ],
                "suggestions": [
                  {
                    "CweID": "191",
                    "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
                  }
                ]
              },
              "score_after": 0.907080716524152
            }
          },
          "combined_score": 0.907080716524152
        }
      },
      "similarity": 0.907080716524152
    },
    {
      "metadata": {
        "doc_id": "CWE-460",
        "name": "Improper Cleanup on Thrown Exception",
        "type": "Base",
        "original_content": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.",
        "relationships": [],
        "original_sparse_score": 1384.4505111552621,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4828967408788869,
            "sparse": 1384.4505111552621
          },
          "normalized_scores": {
            "dense": 0.4828967408788869,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.1690138593076104,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4828967408788869,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.4828967408788869,
              "weight": 0.35,
              "weighted_score": 0.1690138593076104
            },
            "sparse": {
              "raw_score": 1384.4505111552621,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 29.702942475473353,
            "sparse": 70.29705752452665
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5690138593076104,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.7397180170998935
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.7397180170998935
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.8136898188098829
            }
          },
          "combined_score": 0.8136898188098829
        }
      },
      "similarity": 0.8136898188098829
    },
    {
      "metadata": {
        "doc_id": "CWE-1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "relationships": [],
        "original_sparse_score": 826.9816484264161,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 826.9816484264161,
            "graph": 2.3295999999999997
          },
          "normalized_scores": {
            "sparse": 0.6615853187411329,
            "graph": 0.832
          },
          "weighted_scores": {
            "sparse": 0.26463412749645315,
            "graph": 0.208
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 826.9816484264161,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6615853187411329,
              "weight": 0.4,
              "weighted_score": 0.26463412749645315
            },
            "graph": {
              "raw_score": 2.3295999999999997,
              "query_max": 3.3566,
              "query_min": 1.6848000000000003,
              "normalized_score": 0.832,
              "weight": 0.25,
              "weighted_score": 0.208
            }
          },
          "contribution_percentages": {
            "sparse": 55.991328619924744,
            "graph": 44.008671380075256
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.47263412749645317,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6144243657453892
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6144243657453892
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.6758668023199281
            }
          },
          "combined_score": 0.6758668023199281
        }
      },
      "similarity": 0.6758668023199281
    },
    {
      "metadata": {
        "doc_id": "CWE-125",
        "name": "Out-of-bounds Read",
        "type": "Base",
        "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 820.2060802240666,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4741989169114931,
            "sparse": 820.2060802240666
          },
          "normalized_scores": {
            "dense": 0.4741989169114931,
            "sparse": 0.6561648641792532
          },
          "weighted_scores": {
            "dense": 0.16596962091902256,
            "sparse": 0.2624659456717013
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4741989169114931,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.4741989169114931,
              "weight": 0.35,
              "weighted_score": 0.16596962091902256
            },
            "sparse": {
              "raw_score": 820.2060802240666,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6561648641792532,
              "weight": 0.4,
              "weighted_score": 0.2624659456717013
            }
          },
          "contribution_percentages": {
            "dense": 38.738525430959406,
            "sparse": 61.261474569040594
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.42843556659072385,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.556966236567941
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.556966236567941
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.6126628602247352
            }
          },
          "combined_score": 0.6126628602247352
        }
      },
      "similarity": 0.6126628602247352
    },
    {
      "metadata": {
        "doc_id": "CWE-122",
        "name": "Heap-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
        "relationships": [],
        "original_sparse_score": 852.4109845374649,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.46828608258842297,
            "sparse": 852.4109845374649
          },
          "normalized_scores": {
            "dense": 0.46828608258842297,
            "sparse": 0.6819287876299719
          },
          "weighted_scores": {
            "dense": 0.16390012890594802,
            "sparse": 0.27277151505198877
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.46828608258842297,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.46828608258842297,
              "weight": 0.35,
              "weighted_score": 0.16390012890594802
            },
            "sparse": {
              "raw_score": 852.4109845374649,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6819287876299719,
              "weight": 0.4,
              "weighted_score": 0.27277151505198877
            }
          },
          "contribution_percentages": {
            "dense": 37.533952839341225,
            "sparse": 62.466047160658775
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4366716439579368,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.5240059727495241
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.5240059727495241
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5764065700244766
            }
          },
          "combined_score": 0.5764065700244766
        }
      },
      "similarity": 0.5764065700244766
    },
    {
      "metadata": {
        "doc_id": "CWE-416",
        "name": "Use After Free",
        "type": "Variant",
        "original_content": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
        "relationships": [],
        "original_sparse_score": 804.5278114130194,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4923932290213693,
            "sparse": 804.5278114130194
          },
          "normalized_scores": {
            "dense": 0.4923932290213693,
            "sparse": 0.6436222491304155
          },
          "weighted_scores": {
            "dense": 0.17233763015747924,
            "sparse": 0.2574488996521662
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4923932290213693,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.4923932290213693,
              "weight": 0.35,
              "weighted_score": 0.17233763015747924
            },
            "sparse": {
              "raw_score": 804.5278114130194,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6436222491304155,
              "weight": 0.4,
              "weighted_score": 0.2574488996521662
            }
          },
          "contribution_percentages": {
            "dense": 40.09842519583115,
            "sparse": 59.901574804168845
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4297865298096455,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.5157438357715746
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.5157438357715746
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5673182193487321
            }
          },
          "combined_score": 0.5673182193487321
        }
      },
      "similarity": 0.5673182193487321
    },
    {
      "metadata": {
        "doc_id": "CWE-121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "relationships": [],
        "original_sparse_score": 792.8668577482754,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4669294208666011,
            "sparse": 792.8668577482754
          },
          "normalized_scores": {
            "dense": 0.4669294208666011,
            "sparse": 0.6342934861986202
          },
          "weighted_scores": {
            "dense": 0.16342529730331037,
            "sparse": 0.25371739447944813
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4669294208666011,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.4669294208666011,
              "weight": 0.35,
              "weighted_score": 0.16342529730331037
            },
            "sparse": {
              "raw_score": 792.8668577482754,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6342934861986202,
              "weight": 0.4,
              "weighted_score": 0.25371739447944813
            }
          },
          "contribution_percentages": {
            "dense": 39.17731282906419,
            "sparse": 60.822687170935794
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.41714269178275853,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.5005712301393103
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.5005712301393103
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5506283531532413
            }
          },
          "combined_score": 0.5506283531532413
        }
      },
      "similarity": 0.5506283531532413
    },
    {
      "metadata": {
        "doc_id": "CWE-248",
        "name": "Uncaught Exception",
        "type": "Base",
        "original_content": "An exception is thrown from a function, but it is not caught.",
        "relationships": [],
        "original_sparse_score": 483.9135110842631,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4673878458486912,
            "sparse": 483.9135110842631
          },
          "normalized_scores": {
            "dense": 0.4673878458486912,
            "sparse": 0.38713080886741047
          },
          "weighted_scores": {
            "dense": 0.1635857460470419,
            "sparse": 0.1548523235469642
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4673878458486912,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.4673878458486912,
              "weight": 0.35,
              "weighted_score": 0.1635857460470419
            },
            "sparse": {
              "raw_score": 483.9135110842631,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.38713080886741047,
              "weight": 0.4,
              "weighted_score": 0.1548523235469642
            }
          },
          "contribution_percentages": {
            "dense": 51.37129057954854,
            "sparse": 48.62870942045146
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.3184380695940061,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.41396949047220793
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.41396949047220793
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.4553664395194288
            }
          },
          "combined_score": 0.4553664395194288
        }
      },
      "similarity": 0.4553664395194288
    },
    {
      "metadata": {
        "doc_id": "CWE-197",
        "name": "Numeric Truncation Error",
        "type": "Base",
        "original_content": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
        "relationships": [],
        "original_sparse_score": 814.7279899461985,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 814.7279899461985
          },
          "normalized_scores": {
            "sparse": 0.6517823919569588
          },
          "weighted_scores": {
            "sparse": 0.2607129567827835
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 814.7279899461985,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6517823919569588,
              "weight": 0.4,
              "weighted_score": 0.2607129567827835
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2607129567827835,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.33892684381761856
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.33892684381761856
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.37281952819938047
            }
          },
          "combined_score": 0.37281952819938047
        }
      },
      "similarity": 0.37281952819938047
    },
    {
      "metadata": {
        "doc_id": "CWE-502",
        "name": "Deserialization of Untrusted Data",
        "type": "Base",
        "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
        "relationships": [],
        "original_sparse_score": 794.8054067226155,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 794.8054067226155
          },
          "normalized_scores": {
            "sparse": 0.6358443253780924
          },
          "weighted_scores": {
            "sparse": 0.254337730151237
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 794.8054067226155,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6358443253780924,
              "weight": 0.4,
              "weighted_score": 0.254337730151237
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.254337730151237,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.33063904919660814
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.33063904919660814
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.36370295411626896
            }
          },
          "combined_score": 0.36370295411626896
        }
      },
      "similarity": 0.36370295411626896
    },
    {
      "metadata": {
        "doc_id": "CWE-476",
        "name": "NULL Pointer Dereference",
        "type": "Base",
        "original_content": "The product dereferences a pointer that it expects to be valid but is NULL.",
        "relationships": [],
        "original_sparse_score": 789.6706957660315,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 789.6706957660315
          },
          "normalized_scores": {
            "sparse": 0.6317365566128252
          },
          "weighted_scores": {
            "sparse": 0.2526946226451301
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 789.6706957660315,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6317365566128252,
              "weight": 0.4,
              "weighted_score": 0.2526946226451301
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2526946226451301,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.3285030094386691
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3285030094386691
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.36135331038253604
            }
          },
          "combined_score": 0.36135331038253604
        }
      },
      "similarity": 0.36135331038253604
    },
    {
      "metadata": {
        "doc_id": "CWE-252",
        "name": "Unchecked Return Value",
        "type": "Base",
        "original_content": "The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",
        "relationships": [],
        "original_sparse_score": 789.5666649213242,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 789.5666649213242
          },
          "normalized_scores": {
            "sparse": 0.6316533319370594
          },
          "weighted_scores": {
            "sparse": 0.2526613327748238
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 789.5666649213242,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6316533319370594,
              "weight": 0.4,
              "weighted_score": 0.2526613327748238
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2526613327748238,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.3284597326072709
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3284597326072709
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.36130570586799804
            }
          },
          "combined_score": 0.36130570586799804
        }
      },
      "similarity": 0.36130570586799804
    },
    {
      "metadata": {
        "doc_id": "CWE-1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "type": "Base",
        "original_content": "The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",
        "relationships": [],
        "original_sparse_score": 780.7592401241182,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 780.7592401241182
          },
          "normalized_scores": {
            "sparse": 0.6246073920992945
          },
          "weighted_scores": {
            "sparse": 0.2498429568397178
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 780.7592401241182,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6246073920992945,
              "weight": 0.4,
              "weighted_score": 0.2498429568397178
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2498429568397178,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.32479584389163313
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.32479584389163313
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.35727542828079645
            }
          },
          "combined_score": 0.35727542828079645
        }
      },
      "similarity": 0.35727542828079645
    },
    {
      "metadata": {
        "doc_id": "CWE-79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "type": "Base",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "relationships": [],
        "original_sparse_score": 773.4125794030326,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 773.4125794030326
          },
          "normalized_scores": {
            "sparse": 0.6187300635224261
          },
          "weighted_scores": {
            "sparse": 0.24749202540897045
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 773.4125794030326,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6187300635224261,
              "weight": 0.4,
              "weighted_score": 0.24749202540897045
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.24749202540897045,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.3217396330316616
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3217396330316616
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.3539135963348278
            }
          },
          "combined_score": 0.3539135963348278
        }
      },
      "similarity": 0.3539135963348278
    },
    {
      "metadata": {
        "doc_id": "CWE-415",
        "name": "Double Free",
        "type": "Variant",
        "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
        "relationships": [],
        "original_sparse_score": 824.0105754031671,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 824.0105754031671
          },
          "normalized_scores": {
            "sparse": 0.6592084603225337
          },
          "weighted_scores": {
            "sparse": 0.2636833841290135
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 824.0105754031671,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6592084603225337,
              "weight": 0.4,
              "weighted_score": 0.2636833841290135
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2636833841290135,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.3164200609548162
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3164200609548162
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.3480620670502978
            }
          },
          "combined_score": 0.3480620670502978
        }
      },
      "similarity": 0.3480620670502978
    },
    {
      "metadata": {
        "doc_id": "CWE-20",
        "name": "Improper Input Validation",
        "type": "Class",
        "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
        "relationships": [],
        "original_sparse_score": 806.6610361622729,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "1284",
              "Comment": "Specified Quantity"
            },
            {
              "CweID": "1285",
              "Comment": "Specified Index, Position, or Offset"
            },
            {
              "CweID": "1286",
              "Comment": "Syntactic Correctness"
            },
            {
              "CweID": "1287",
              "Comment": "Specified Type"
            },
            {
              "CweID": "1288",
              "Comment": "Consistency within Input"
            },
            {
              "CweID": "1289",
              "Comment": "Unsafe Equivalence"
            },
            {
              "CweID": "116",
              "Comment": "Improper Encoding or Escaping of Output"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.46462763055562495,
            "sparse": 806.6610361622729
          },
          "normalized_scores": {
            "dense": 0.46462763055562495,
            "sparse": 0.6453288289298184
          },
          "weighted_scores": {
            "dense": 0.16261967069446873,
            "sparse": 0.25813153157192736
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.46462763055562495,
              "query_max": 0.5685204506890137,
              "query_min": 0.45413711954836095,
              "normalized_score": 0.46462763055562495,
              "weight": 0.35,
              "weighted_score": 0.16261967069446873
            },
            "sparse": {
              "raw_score": 806.6610361622729,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6453288289298184,
              "weight": 0.4,
              "weighted_score": 0.25813153157192736
            }
          },
          "contribution_percentages": {
            "dense": 38.649841003070286,
            "sparse": 61.35015899692973
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.42075120226639606,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.3366009618131169
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3366009618131169
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
                "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
                "reasons": [
                  "Frequent Misuse"
                ],
                "suggestions": [
                  {
                    "CweID": "1284",
                    "Comment": "Specified Quantity"
                  },
                  {
                    "CweID": "1285",
                    "Comment": "Specified Index, Position, or Offset"
                  },
                  {
                    "CweID": "1286",
                    "Comment": "Syntactic Correctness"
                  },
                  {
                    "CweID": "1287",
                    "Comment": "Specified Type"
                  },
                  {
                    "CweID": "1288",
                    "Comment": "Consistency within Input"
                  },
                  {
                    "CweID": "1289",
                    "Comment": "Unsafe Equivalence"
                  },
                  {
                    "CweID": "116",
                    "Comment": "Improper Encoding or Escaping of Output"
                  }
                ]
              },
              "score_after": 0.2692807694504935
            }
          },
          "combined_score": 0.2692807694504935
        }
      },
      "similarity": 0.2692807694504935
    },
    {
      "metadata": {
        "doc_id": "CWE-835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "type": "Base",
        "original_content": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
        "relationships": [],
        "original_sparse_score": 473.1258276578439,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 473.1258276578439
          },
          "normalized_scores": {
            "sparse": 0.37850066212627514
          },
          "weighted_scores": {
            "sparse": 0.15140026485051006
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 473.1258276578439,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.37850066212627514,
              "weight": 0.4,
              "weighted_score": 0.15140026485051006
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.15140026485051006,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.1968203443056631
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.1968203443056631
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.2165023787362294
            }
          },
          "combined_score": 0.2165023787362294
        }
      },
      "similarity": 0.2165023787362294
    },
    {
      "metadata": {
        "doc_id": "CWE-674",
        "name": "Uncontrolled Recursion",
        "type": "Class",
        "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
        "relationships": [],
        "original_sparse_score": 786.9808554593642,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 786.9808554593642
          },
          "normalized_scores": {
            "sparse": 0.6295846843674914
          },
          "weighted_scores": {
            "sparse": 0.25183387374699656
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 786.9808554593642,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6295846843674914,
              "weight": 0.4,
              "weighted_score": 0.25183387374699656
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.25183387374699656,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.20146709899759727
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.20146709899759727
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.21154045394747714
            }
          },
          "combined_score": 0.21154045394747714
        }
      },
      "similarity": 0.21154045394747714
    },
    {
      "metadata": {
        "doc_id": "CWE-755",
        "name": "Improper Handling of Exceptional Conditions",
        "type": "Class",
        "original_content": "The product does not handle or incorrectly handles an exceptional condition.",
        "relationships": [],
        "original_sparse_score": 772.9629181740238,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 772.9629181740238
          },
          "normalized_scores": {
            "sparse": 0.6183703345392191
          },
          "weighted_scores": {
            "sparse": 0.24734813381568765
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 772.9629181740238,
              "query_max": 1384.4505111552621,
              "query_min": 473.1258276578439,
              "normalized_score": 0.6183703345392191,
              "weight": 0.4,
              "weighted_score": 0.24734813381568765
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.24734813381568765,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.19787850705255014
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.19787850705255014
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.15830280564204013
            }
          },
          "combined_score": 0.15830280564204013
        }
      },
      "similarity": 0.15830280564204013
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-119",
      "CWE-460",
      "CWE-787"
    ],
    "critic_additional": [
      "CWE-190",
      "CWE-416",
      "CWE-1284",
      "CWE-248"
    ]
  }
}