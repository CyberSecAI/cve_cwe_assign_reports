{
  "cve_id": "CVE-2021-32647",
  "description": "Emissary is a P2P based data-driven workflow engine. Affected versions of Emissary are vulnerable to post-authentication Remote Code Execution (RCE). The [`CreatePlace`](https//github.com/NationalSecurityAgency/emissary/blob/30c54ef16c6eb6ed09604a929939fb9f66868382/src/main/java/emissary/server/mvc/internal/CreatePlaceAction.java#L36) REST endpoint accepts an `sppClassName` parameter which is used to load an arbitrary class. This class is later instantiated using a constructor with the following signature `(String, String, String)`. An attacker may find a gadget (class) in the application classpath that could be used to achieve Remote Code Execution (RCE) or disrupt the application. Even though the chances to find a gadget (class) that allow arbitrary code execution are low, an attacker can still find gadgets that could potentially crash the application or leak sensitive data. As a work around disable network access to Emissary from untrusted sources.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "Remote Code Execution",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Emissary",
    "version": "",
    "component": "CreatePlace REST endpoint"
  },
  "reference_content": "Based on the provided content, here's an analysis of CVE-2021-32647:\n\n**Root Cause of Vulnerability:**\n\n*   The vulnerability lies in the `CreatePlaceAction` REST endpoint which accepts an `sppClassName` parameter. This parameter is used to load an arbitrary class, which is then instantiated using a constructor with the signature `<constructor>(String, String, String)`.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Arbitrary Class Loading:** The application allows loading of an arbitrary class based on user-supplied input (`sppClassName` parameter), without proper validation or sanitization.\n*   **Gadget Exploitation:** The vulnerability can be exploited by finding a gadget (a class) within the application's classpath that, when instantiated, leads to remote code execution or denial of service.\n\n**Impact of Exploitation:**\n\n*   **Remote Code Execution (RCE):** An attacker can potentially execute arbitrary code on the server if a suitable gadget class is found.\n*   **Application Disruption:** An attacker can cause a denial of service by exploiting gadgets that crash the application.\n*  **Sensitive Data Leakage:** It is possible for the attacker to find a class that allows for sensitive data leakage.\n\n**Attack Vectors:**\n\n*   **Network:** The vulnerability is exploitable through the network via the `CreatePlace` REST endpoint.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Authentication:** The attacker needs to be authenticated to access the vulnerable REST endpoint.\n*   **Knowledge of Gadgets:** The attacker needs knowledge of existing classes within the application classpath that can be used as gadgets to achieve RCE or denial of service.\n\n**Additional details:**\n\n*   The vulnerability is present in `emissary:emissary` version 6.4.0.\n*   It was patched in version 7.0.0.\n*   The vulnerability has a CVSS score of 8.1 (High).\n*   The attack complexity is high due to the need to find suitable gadget classes.\n\nThe provided information is more detailed than a typical CVE description, explaining the root cause and providing the vulnerable code location.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-470 | Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') | 0.90 | Base | Allowed | Primary CWE |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.70 | Base | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability description clearly states that the `CreatePlace` REST endpoint accepts an `sppClassName` parameter, which is used to load an arbitrary class. This aligns directly with CWE-470 [Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')], as the application uses external input (`sppClassName`) to select which class to use. The CVE Reference Links Content Summary confirms this by stating: \"The application allows loading of an arbitrary class based on user-supplied input (`sppClassName` parameter), without proper validation or sanitization.\" This makes CWE-470 the primary weakness.\n\n  - *Relationship Analysis:* While CWE-94 [Improper Control of Generation of Code ('Code Injection')] is a related weakness (as reflected code could lead to code injection), the root cause is the unsafe reflection, making CWE-470 the more precise and appropriate choice. CWE-470 is a child of CWE-20 [Improper Input Validation], as the externally-controlled input is not validated.\n\n- **Confidence Score:**  \n  - Confidence: 0.90 (High evidence from technical description and CVE reference materials)\n\n---\n- **Analysis and Justification:**  \n  - *Explanation:* CWE-94 [Improper Control of Generation of Code ('Code Injection')] is a secondary candidate because the loaded class, if malicious, could lead to code execution. The description mentions that an attacker might find a \"gadget\" (class) to achieve **Remote Code Execution** (RCE). The CVE Reference Links Content Summary also states this possibility of RCE if a suitable gadget is found. However, the primary issue is the unsafe reflection (CWE-470) which *allows* the possibility of code injection through a gadget.\n\n  - *Relationship Analysis:* CWE-94 [Improper Control of Generation of Code ('Code Injection')] is a child of CWE-74 [Improper Neutralization of Special Elements]. CWE-470 [Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')] can precede CWE-94 [Improper Control of Generation of Code ('Code Injection')] because the ability to select arbitrary classes sets the stage for potential code injection if a malicious class is loaded. The MITRE usage guidance for CWE-94 indicates \"Allowed-with-Review\" and cautions about misuse if the root cause is not code generation. Here, the root cause is unsafe reflection, making CWE-94 a secondary concern.\n\n- **Confidence Score:**  \n  - Confidence: 0.70 (Supporting evidence, but not the primary weakness)",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-470 | Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') | 0.90 | Base | Allowed | Primary CWE |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.70 | Base | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability description clearly states that the `CreatePlace` REST endpoint accepts an `sppClassName` parameter, which is used to load an arbitrary class. This aligns directly with CWE-470 [Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')], as the application uses external input (`sppClassName`) to select which class to use. The CVE Reference Links Content Summary confirms this by stating: \"The application allows loading of an arbitrary class based on user-supplied input (`sppClassName` parameter), without proper validation or sanitization.\" This makes CWE-470 the primary weakness.\n\n  - *Relationship Analysis:* While CWE-94 [Improper Control of Generation of Code ('Code Injection')] is a related weakness (as reflected code could lead to code injection), the root cause is the unsafe reflection, making CWE-470 the more precise and appropriate choice. CWE-470 is a child of CWE-20 [Improper Input Validation], as the externally-controlled input is not validated.\n\n- **Confidence Score:**  \n  - Confidence: 0.90 (High evidence from technical description and CVE reference materials)\n\n---\n- **Analysis and Justification:**  \n  - *Explanation:* CWE-94 [Improper Control of Generation of Code ('Code Injection')] is a secondary candidate because the loaded class, if malicious, could lead to code execution. The description mentions that an attacker might find a \"gadget\" (class) to achieve **Remote Code Execution** (RCE). The CVE Reference Links Content Summary also states this possibility of RCE if a suitable gadget is found. However, the primary issue is the unsafe reflection (CWE-470) which *allows* the possibility of code injection through a gadget.\n\n  - *Relationship Analysis:* CWE-94 [Improper Control of Generation of Code ('Code Injection')] is a child of CWE-74 [Improper Neutralization of Special Elements]. CWE-470 [Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')] can precede CWE-94 [Improper Control of Generation of Code ('Code Injection')] because the ability to select arbitrary classes sets the stage for potential code injection if a malicious class is loaded. The MITRE usage guidance for CWE-94 indicates \"Allowed-with-Review\" and cautions about misuse if the root cause is not code generation. Here, the root cause is unsafe reflection, making CWE-94 a secondary concern.\n\n- **Confidence Score:**  \n  - Confidence: 0.70 (Supporting evidence, but not the primary weakness)",
  "criticism": "Okay, here's a detailed review of the provided analysis, incorporating the full CWE specifications.\n\n## Overall Assessment\n\nThe analysis correctly identifies CWE-470 as the primary weakness. The reasoning is sound and well-supported by the description of the vulnerability and the CVE Reference Links Content Summary. The consideration of CWE-94 is also appropriate, recognizing its relevance but ultimately concluding that CWE-470 is a more precise fit. The confidence levels assigned are also justified.\n\n## Detailed Critique\n\n**1. CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')**\n\n*   **Mapping:** The mapping to CWE-470 is strong and appropriate.\n*   **Confidence:** The confidence score of 0.90 is justified. The evidence from the vulnerability description and CVE reference content is compelling. The core problem is the direct use of the `sppClassName` parameter to load an arbitrary class, fitting the CWE description perfectly.\n*   **Abstraction Level:** The analysis correctly identifies CWE-470 as a Base level CWE, which is the preferred level of abstraction.\n*   **CWE Specification Fit:** The analysis aligns well with the CWE-470 specification. The description mentions:\n    *   \"The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.\"  This directly matches the vulnerability.\n    *   The analysis correctly points out the risk of bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner.\n*   **Mitigation Considerations:**\n    *   The analysis implicitly suggests Mitigation 3: \"Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.\" This is the most relevant and practical mitigation in this specific case.  The analysis could be improved by explicitly stating this mitigation.\n    *   Mitigation 1 (\"Refactor your code to avoid using reflection\") and Mitigation 2 (\"Do not use user-controlled inputs to select and load classes or code\")  are valuable suggestions, but they represent significant architectural changes and might not always be feasible.\n*   **Relationship to other CWEs:** The analysis correctly identifies CWE-470 as a child of CWE-20 (Improper Input Validation). It also correctly analyzes the relationships with CWE-94.\n\n**2. CWE-94: Improper Control of Generation of Code ('Code Injection')**\n\n*   **Mapping:** The inclusion of CWE-94 as a secondary concern is valid, but the rationale for its lower confidence is equally valid.\n*   **Confidence:** The confidence score of 0.70 is appropriate.  The possibility of RCE through gadget exploitation warrants consideration of CWE-94, but it's a consequence *of* the unsafe reflection, not the primary cause.\n*   **Abstraction Level:** The analysis correctly identifies CWE-94 as a Base level CWE.\n*   **CWE Specification Fit:** The analysis aligns well with the CWE-94 specification:\n    *   The analysis correctly identifies that loading malicious class could lead to code execution.\n*   **Mitigation Considerations:**\n    * The analysis implies the use of allowlists to reduce the likelihood of code injection (from CWE-94's mitigations).\n*   **Relationship to other CWEs:** The analysis correctly links CWE-94 as a child of CWE-74 and points out the relationship with CWE-470. It correctly notes that unsafe reflection *allows* the possibility of code injection.\n\n**General Observations & Suggestions**\n\n*   **Input Validation (CWE-20):** While the analysis mentions that CWE-470 is a child of CWE-20, it could be strengthened by explicitly stating that the core problem is the *lack of input validation* on the `sppClassName` parameter. This lack of validation allows the attacker to specify any class, making the unsafe reflection possible.  Adding this explicit statement would reinforce the connection between the root cause (lack of input validation) and the specific weakness (unsafe reflection). Consider rephrasing this as the root cause being 'Improper Input Validation' on the Class Name, which is then used in unsafe reflection.\n*   **Mitigation Specificity:**  For both CWE-470 and CWE-94, the analysis could benefit from more specific mitigation recommendations.  Instead of just generally stating \"apply strict input validation,\" provide examples of what that validation might look like:\n    *   **Example:** \"Implement an allowlist of permitted `sppClassName` values.  This allowlist should be based on the functionality of the `CreatePlace` endpoint and only include classes that are explicitly intended to be used in this context.\"  This makes the mitigation more actionable.\n*   **CWE-502 Deserialization of Untrusted Data:** In the Retriever Results, CWE-502 is second-ranked. While the primary vulnerability isn't directly deserialization, *if* a malicious class is loaded via CWE-470 and *that* class leverages deserialization to execute code, then CWE-502 becomes relevant. If the classes that are loaded use Deserialization and can be influenced, then adding CWE-502 could be valuable.\n*   **Framework/Tool Specificity:** The CWE specifications sometimes mention specific frameworks or tools (e.g., ESAPI, Struts).  Where applicable, the analysis could benefit from mentioning these, especially in the mitigation sections. This makes the recommendations more concrete and useful.\n\n## Recommendations for Improvement\n\n1.  **Explicitly state the role of missing input validation (CWE-20) as the enabler for CWE-470.**\n2.  **Add specific examples of input validation for the `sppClassName` parameter.**  Focus on allowlisting.\n3.  **Evaluate classes that use deserialization, add CWE-502 if relevant.**\n4.  **In mitigation sections, suggest specific frameworks or tools (e.g., ESAPI) that can assist with input validation or safe reflection.**\n5.  **Re-rank CWE-94 based on deserialization impact and if it increases the overall exploitation impact**\n\nBy incorporating these suggestions, the analysis will become even stronger and more actionable, providing a clearer understanding of the vulnerability and more effective guidance for remediation.",
  "resolution": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-470 | Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') | 0.95 | Base | Allowed | Primary CWE |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.75 | Variant | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.90\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship impacting the decision is the parent-child relationship between CWE-20 [Improper Input Validation] and CWE-470 [Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')]. The lack of input validation (CWE-20) on the `sppClassName` parameter directly enables the unsafe reflection (CWE-470). Additionally, the CANPRECEDE relationship between CWE-470 and CWE-94 [Improper Control of Generation of Code ('Code Injection')] is important. Unsafe reflection can lead to code injection if a malicious \"gadget\" class is loaded. The analysis also considered peer relationships, specifically CWE-502 [Deserialization of Untrusted Data], but determined that it's only relevant if the loaded classes leverage deserialization in a way that can be influenced by an attacker. The base abstraction level of CWE-470 is optimal as it directly represents the **rootcause**.\n\n```mermaid\ngraph TD\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe470[\"CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n\n    cwe470 -->|CHILDOF| cwe20\n    cwe470 -->|CANPRECEDE| cwe94\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe470 primary\n    class cwe94 secondary\n    class cwe20 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **rootcause**, which is the lack of input validation (CWE-20) on the `sppClassName` parameter. This allows an attacker to control the class that is loaded via reflection (CWE-470). If the attacker can find a suitable \"gadget\" class in the application's classpath, this can lead to **code injection** (CWE-94) and ultimately **Remote Code Execution** (RCE). If the loaded classes use Deserialization and can be influenced, then adding CWE-502 could be valuable.\n  - **Missing Links:** The chain is complete based on the provided information.\n\n## Summary of Analysis\nThe initial analysis correctly identified CWE-470 as the primary weakness. The analysis is strongly supported by the vulnerability description and the CVE reference. The evidence \"The `CreatePlace` REST endpoint accepts an `sppClassName` parameter which is used to load an arbitrary class\" clearly shows the **externally-controlled input** being used to select a class. The graph relationships reinforce this by showing how the lack of input validation enables the unsafe reflection. The selection of CWE-470 is at the optimal level of specificity because it directly addresses the **rootcause** of the vulnerability.\n\nThe inclusion of CWE-94 as a secondary candidate is also justified. The potential for code injection through gadget exploitation is a valid concern. However, CWE-470 remains the primary weakness because it's the direct cause of the vulnerability, whereas CWE-94 is a potential consequence.\n\nThe confidence level for CWE-470 has been increased to 0.95 due to the overwhelming evidence and the direct match with the CWE description. The confidence level for CWE-94 has been slightly increased to 0.75 based on the better understanding of its impact on the application.\n\nRecommendations from the criticism section have been applied:\n\n*   The role of missing input validation (CWE-20) as the enabler for CWE-470 is explicitly stated.\n*   Specific examples of input validation for the `sppClassName` parameter, focusing on allowlisting, have been considered, even though we do not provide them directly.\n*   CWE-502 [Deserialization of Untrusted Data] was considered, and the analysis states that it may be relevant if the loaded classes leverage deserialization in a way that can be influenced by an attacker.\n*   The analysis is based on the provided evidence only.",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "CWE-470",
        "name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
        "type": "Base",
        "original_content": "The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.",
        "relationships": [],
        "original_sparse_score": 1468.6707656137526,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5323580239500536,
            "sparse": 1468.6707656137526,
            "graph": 1.6678800177215345
          },
          "normalized_scores": {
            "dense": 0.5323580239500536,
            "sparse": 1.0,
            "graph": 0.5956714349005481
          },
          "weighted_scores": {
            "dense": 0.18632530838251876,
            "sparse": 0.4,
            "graph": 0.14891785872513702
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5323580239500536,
              "query_max": 0.5507569791338254,
              "query_min": 0.4966036265822723,
              "normalized_score": 0.5323580239500536,
              "weight": 0.35,
              "weighted_score": 0.18632530838251876
            },
            "sparse": {
              "raw_score": 1468.6707656137526,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            },
            "graph": {
              "raw_score": 1.6678800177215345,
              "query_max": 2.4699999999999998,
              "query_min": 1.3676000000000001,
              "normalized_score": 0.5956714349005481,
              "weight": 0.25,
              "weighted_score": 0.14891785872513702
            }
          },
          "contribution_percentages": {
            "dense": 25.341997956335533,
            "sparse": 54.403769785925974,
            "graph": 20.2542322577385
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.7352431671076558,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.9558161172399525
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.9558161172399525
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 1.0513977289639478
            }
          },
          "combined_score": 1.0513977289639478
        }
      },
      "similarity": 1.0513977289639478
    },
    {
      "metadata": {
        "doc_id": "CWE-502",
        "name": "Deserialization of Untrusted Data",
        "type": "Base",
        "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
        "relationships": [],
        "original_sparse_score": 638.9611081400959,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.500541962870529,
            "sparse": 638.9611081400959,
            "graph": 1.4829063333670676
          },
          "normalized_scores": {
            "dense": 0.500541962870529,
            "sparse": 0.5111688865120767,
            "graph": 0.5296094047739527
          },
          "weighted_scores": {
            "dense": 0.17518968700468512,
            "sparse": 0.20446755460483068,
            "graph": 0.13240235119348817
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.500541962870529,
              "query_max": 0.5507569791338254,
              "query_min": 0.4966036265822723,
              "normalized_score": 0.500541962870529,
              "weight": 0.35,
              "weighted_score": 0.17518968700468512
            },
            "sparse": {
              "raw_score": 638.9611081400959,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.5111688865120767,
              "weight": 0.4,
              "weighted_score": 0.20446755460483068
            },
            "graph": {
              "raw_score": 1.4829063333670676,
              "query_max": 2.4699999999999998,
              "query_min": 1.3676000000000001,
              "normalized_score": 0.5296094047739527,
              "weight": 0.25,
              "weighted_score": 0.13240235119348817
            }
          },
          "contribution_percentages": {
            "dense": 34.21275364566462,
            "sparse": 39.93042166939582,
            "graph": 25.85682468493957
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.512059592803004,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6656774706439051
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6656774706439051
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7322452177082958
            }
          },
          "combined_score": 0.7322452177082958
        }
      },
      "similarity": 0.7322452177082958
    },
    {
      "metadata": {
        "doc_id": "CWE-918",
        "name": "Server-Side Request Forgery (SSRF)",
        "type": "Base",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "relationships": [],
        "original_sparse_score": 601.0642998705808,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5095832472036292,
            "sparse": 601.0642998705808,
            "graph": 1.488434349710903
          },
          "normalized_scores": {
            "dense": 0.5095832472036292,
            "sparse": 0.48085143989646467,
            "graph": 0.5315836963253225
          },
          "weighted_scores": {
            "dense": 0.17835413652127022,
            "sparse": 0.1923405759585859,
            "graph": 0.13289592408133064
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5095832472036292,
              "query_max": 0.5507569791338254,
              "query_min": 0.4966036265822723,
              "normalized_score": 0.5095832472036292,
              "weight": 0.35,
              "weighted_score": 0.17835413652127022
            },
            "sparse": {
              "raw_score": 601.0642998705808,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.48085143989646467,
              "weight": 0.4,
              "weighted_score": 0.1923405759585859
            },
            "graph": {
              "raw_score": 1.488434349710903,
              "query_max": 2.4699999999999998,
              "query_min": 1.3676000000000001,
              "normalized_score": 0.5315836963253225,
              "weight": 0.25,
              "weighted_score": 0.13289592408133064
            }
          },
          "contribution_percentages": {
            "dense": 35.416491803576264,
            "sparse": 38.19383483219635,
            "graph": 26.389673364227384
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5035906365611867,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6546678275295428
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6546678275295428
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7201346102824971
            }
          },
          "combined_score": 0.7201346102824971
        }
      },
      "similarity": 0.7201346102824971
    },
    {
      "metadata": {
        "doc_id": "CWE-94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
        "relationships": [],
        "original_sparse_score": 612.1490303354834,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
          "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
          "reasons": [
            "Frequent Misuse",
            "Frequent Misinterpretation"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5090499526784629,
            "sparse": 612.1490303354834,
            "graph": 1.6970256402878303
          },
          "normalized_scores": {
            "dense": 0.5090499526784629,
            "sparse": 0.4897192242683867,
            "graph": 0.6060805858170822
          },
          "weighted_scores": {
            "dense": 0.178167483437462,
            "sparse": 0.1958876897073547,
            "graph": 0.15152014645427056
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5090499526784629,
              "query_max": 0.5507569791338254,
              "query_min": 0.4966036265822723,
              "normalized_score": 0.5090499526784629,
              "weight": 0.35,
              "weighted_score": 0.178167483437462
            },
            "sparse": {
              "raw_score": 612.1490303354834,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4897192242683867,
              "weight": 0.4,
              "weighted_score": 0.1958876897073547
            },
            "graph": {
              "raw_score": 1.6970256402878303,
              "query_max": 2.4699999999999998,
              "query_min": 1.3676000000000001,
              "normalized_score": 0.6060805858170822,
              "weight": 0.25,
              "weighted_score": 0.15152014645427056
            }
          },
          "contribution_percentages": {
            "dense": 33.899514835165675,
            "sparse": 37.27109748166624,
            "graph": 28.829387683168083
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.5255753195990873,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6832479154788136
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6832479154788136
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
                "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
                "reasons": [
                  "Frequent Misuse",
                  "Frequent Misinterpretation"
                ]
              },
              "score_after": 0.7174103112527543
            }
          },
          "combined_score": 0.7174103112527543
        }
      },
      "similarity": 0.7174103112527543
    },
    {
      "metadata": {
        "doc_id": "CWE-1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "type": "Base",
        "original_content": "The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",
        "relationships": [],
        "original_sparse_score": 613.6364957999485,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 613.6364957999485,
            "graph": 2.4699999999999998
          },
          "normalized_scores": {
            "sparse": 0.4909091966399588,
            "graph": 0.8821428571428571
          },
          "weighted_scores": {
            "sparse": 0.19636367865598353,
            "graph": 0.22053571428571428
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 613.6364957999485,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4909091966399588,
              "weight": 0.4,
              "weighted_score": 0.19636367865598353
            },
            "graph": {
              "raw_score": 2.4699999999999998,
              "query_max": 2.4699999999999998,
              "query_min": 1.3676000000000001,
              "normalized_score": 0.8821428571428571,
              "weight": 0.25,
              "weighted_score": 0.22053571428571428
            }
          },
          "contribution_percentages": {
            "sparse": 47.10097495475232,
            "graph": 52.89902504524768
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4168993929416978,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.5419692108242071
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.5419692108242071
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5961661319066279
            }
          },
          "combined_score": 0.5961661319066279
        }
      },
      "similarity": 0.5961661319066279
    },
    {
      "metadata": {
        "doc_id": "CWE-917",
        "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",
        "relationships": [],
        "original_sparse_score": 572.7371122449968,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.508050766113888,
            "sparse": 572.7371122449968
          },
          "normalized_scores": {
            "dense": 0.508050766113888,
            "sparse": 0.4581896897959974
          },
          "weighted_scores": {
            "dense": 0.17781776813986078,
            "sparse": 0.18327587591839897
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.508050766113888,
              "query_max": 0.5507569791338254,
              "query_min": 0.4966036265822723,
              "normalized_score": 0.508050766113888,
              "weight": 0.35,
              "weighted_score": 0.17781776813986078
            },
            "sparse": {
              "raw_score": 572.7371122449968,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4581896897959974,
              "weight": 0.4,
              "weighted_score": 0.18327587591839897
            }
          },
          "contribution_percentages": {
            "dense": 49.2442254428525,
            "sparse": 50.755774557147504
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.3610936440582597,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.46942173727573766
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.46942173727573766
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5163639110033115
            }
          },
          "combined_score": 0.5163639110033115
        }
      },
      "similarity": 0.5163639110033115
    },
    {
      "metadata": {
        "doc_id": "CWE-22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "type": "Base",
        "original_content": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
        "relationships": [],
        "original_sparse_score": 597.3821720902142,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 597.3821720902142,
            "graph": 1.3676000000000001
          },
          "normalized_scores": {
            "sparse": 0.47790573767217137,
            "graph": 0.4884285714285715
          },
          "weighted_scores": {
            "sparse": 0.19116229506886856,
            "graph": 0.12210714285714287
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 597.3821720902142,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.47790573767217137,
              "weight": 0.4,
              "weighted_score": 0.19116229506886856
            },
            "graph": {
              "raw_score": 1.3676000000000001,
              "query_max": 2.4699999999999998,
              "query_min": 1.3676000000000001,
              "normalized_score": 0.4884285714285715,
              "weight": 0.25,
              "weighted_score": 0.12210714285714287
            }
          },
          "contribution_percentages": {
            "sparse": 61.021686741755396,
            "graph": 38.978313258244604
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.3132694379260114,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.40725026930381486
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.40725026930381486
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.4479752962341964
            }
          },
          "combined_score": 0.4479752962341964
        }
      },
      "similarity": 0.4479752962341964
    },
    {
      "metadata": {
        "doc_id": "CWE-1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "relationships": [],
        "original_sparse_score": 596.6177465140055,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 596.6177465140055
          },
          "normalized_scores": {
            "sparse": 0.4772941972112044
          },
          "weighted_scores": {
            "sparse": 0.19091767888448177
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 596.6177465140055,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4772941972112044,
              "weight": 0.4,
              "weighted_score": 0.19091767888448177
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.19091767888448177,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.2481929825498263
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.2481929825498263
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.27301228080480894
            }
          },
          "combined_score": 0.27301228080480894
        }
      },
      "similarity": 0.27301228080480894
    },
    {
      "metadata": {
        "doc_id": "CWE-88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "type": "Base",
        "original_content": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
        "relationships": [],
        "original_sparse_score": 593.6010280577781,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 593.6010280577781
          },
          "normalized_scores": {
            "sparse": 0.4748808224462225
          },
          "weighted_scores": {
            "sparse": 0.18995232897848902
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 593.6010280577781,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4748808224462225,
              "weight": 0.4,
              "weighted_score": 0.18995232897848902
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.18995232897848902,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.24693802767203574
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.24693802767203574
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.27163183043923933
            }
          },
          "combined_score": 0.27163183043923933
        }
      },
      "similarity": 0.27163183043923933
    },
    {
      "metadata": {
        "doc_id": "CWE-201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "type": "Base",
        "original_content": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.",
        "relationships": [],
        "original_sparse_score": 585.3266812879225,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 585.3266812879225
          },
          "normalized_scores": {
            "sparse": 0.468261345030338
          },
          "weighted_scores": {
            "sparse": 0.1873045380121352
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 585.3266812879225,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.468261345030338,
              "weight": 0.4,
              "weighted_score": 0.1873045380121352
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.1873045380121352,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.24349589941577576
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.24349589941577576
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.26784548935735336
            }
          },
          "combined_score": 0.26784548935735336
        }
      },
      "similarity": 0.26784548935735336
    },
    {
      "metadata": {
        "doc_id": "CWE-23",
        "name": "Relative Path Traversal",
        "type": "Base",
        "original_content": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.",
        "relationships": [],
        "original_sparse_score": 583.9990577345519,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 583.9990577345519
          },
          "normalized_scores": {
            "sparse": 0.4671992461876415
          },
          "weighted_scores": {
            "sparse": 0.18687969847505662
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 583.9990577345519,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4671992461876415,
              "weight": 0.4,
              "weighted_score": 0.18687969847505662
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.18687969847505662,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.24294360801757361
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.24294360801757361
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.267237968819331
            }
          },
          "combined_score": 0.267237968819331
        }
      },
      "similarity": 0.267237968819331
    },
    {
      "metadata": {
        "doc_id": "CWE-306",
        "name": "Missing Authentication for Critical Function",
        "type": "Base",
        "original_content": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
        "relationships": [],
        "original_sparse_score": 580.9869203489834,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 580.9869203489834
          },
          "normalized_scores": {
            "sparse": 0.46478953627918673
          },
          "weighted_scores": {
            "sparse": 0.18591581451167472
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 580.9869203489834,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.46478953627918673,
              "weight": 0.4,
              "weighted_score": 0.18591581451167472
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.18591581451167472,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.24169055886517712
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.24169055886517712
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.26585961475169484
            }
          },
          "combined_score": 0.26585961475169484
        }
      },
      "similarity": 0.26585961475169484
    },
    {
      "metadata": {
        "doc_id": "CWE-78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "relationships": [],
        "original_sparse_score": 570.5799857168277,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 570.5799857168277
          },
          "normalized_scores": {
            "sparse": 0.4564639885734621
          },
          "weighted_scores": {
            "sparse": 0.18258559542938485
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 570.5799857168277,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4564639885734621,
              "weight": 0.4,
              "weighted_score": 0.18258559542938485
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.18258559542938485,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.23736127405820032
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.23736127405820032
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.2610974014640204
            }
          },
          "combined_score": 0.2610974014640204
        }
      },
      "similarity": 0.2610974014640204
    },
    {
      "metadata": {
        "doc_id": "CWE-639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "type": "Base",
        "original_content": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.",
        "relationships": [],
        "original_sparse_score": 568.9143432098848,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 568.9143432098848
          },
          "normalized_scores": {
            "sparse": 0.45513147456790787
          },
          "weighted_scores": {
            "sparse": 0.18205258982716316
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 568.9143432098848,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.45513147456790787,
              "weight": 0.4,
              "weighted_score": 0.18205258982716316
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.18205258982716316,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.2366683667753121
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.2366683667753121
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.26033520345284333
            }
          },
          "combined_score": 0.26033520345284333
        }
      },
      "similarity": 0.26033520345284333
    },
    {
      "metadata": {
        "doc_id": "CWE-121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "relationships": [],
        "original_sparse_score": 570.4900236677859,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 570.4900236677859
          },
          "normalized_scores": {
            "sparse": 0.4563920189342287
          },
          "weighted_scores": {
            "sparse": 0.1825568075736915
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 570.4900236677859,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4563920189342287,
              "weight": 0.4,
              "weighted_score": 0.1825568075736915
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.1825568075736915,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.2190681690884298
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.2190681690884298
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.2409749859972728
            }
          },
          "combined_score": 0.2409749859972728
        }
      },
      "similarity": 0.2409749859972728
    },
    {
      "metadata": {
        "doc_id": "CWE-863",
        "name": "Incorrect Authorization",
        "type": "Class",
        "original_content": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.",
        "relationships": [],
        "original_sparse_score": 578.7030453152973,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 578.7030453152973
          },
          "normalized_scores": {
            "sparse": 0.4629624362522379
          },
          "weighted_scores": {
            "sparse": 0.18518497450089516
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 578.7030453152973,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4629624362522379,
              "weight": 0.4,
              "weighted_score": 0.18518497450089516
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.18518497450089516,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.14814797960071613
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.14814797960071613
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.15555537858075194
            }
          },
          "combined_score": 0.15555537858075194
        }
      },
      "similarity": 0.15555537858075194
    },
    {
      "metadata": {
        "doc_id": "CWE-790",
        "name": "Improper Filtering of Special Elements",
        "type": "Class",
        "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
        "relationships": [],
        "original_sparse_score": 572.1068802347869,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 572.1068802347869
          },
          "normalized_scores": {
            "sparse": 0.4576855041878295
          },
          "weighted_scores": {
            "sparse": 0.1830742016751318
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 572.1068802347869,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4576855041878295,
              "weight": 0.4,
              "weighted_score": 0.1830742016751318
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.1830742016751318,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.14645936134010545
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.14645936134010545
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.15378232940711073
            }
          },
          "combined_score": 0.15378232940711073
        }
      },
      "similarity": 0.15378232940711073
    },
    {
      "metadata": {
        "doc_id": "CWE-138",
        "name": "Improper Neutralization of Special Elements",
        "type": "Class",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "relationships": [],
        "original_sparse_score": 587.1949459521327,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 587.1949459521327
          },
          "normalized_scores": {
            "sparse": 0.4697559567617062
          },
          "weighted_scores": {
            "sparse": 0.18790238270468249
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 587.1949459521327,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4697559567617062,
              "weight": 0.4,
              "weighted_score": 0.18790238270468249
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.18790238270468249,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.150321906163746
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.150321906163746
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.1202575249309968
            }
          },
          "combined_score": 0.1202575249309968
        }
      },
      "similarity": 0.1202575249309968
    },
    {
      "metadata": {
        "doc_id": "CWE-20",
        "name": "Improper Input Validation",
        "type": "Class",
        "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
        "relationships": [],
        "original_sparse_score": 573.2707740915879,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "1284",
              "Comment": "Specified Quantity"
            },
            {
              "CweID": "1285",
              "Comment": "Specified Index, Position, or Offset"
            },
            {
              "CweID": "1286",
              "Comment": "Syntactic Correctness"
            },
            {
              "CweID": "1287",
              "Comment": "Specified Type"
            },
            {
              "CweID": "1288",
              "Comment": "Consistency within Input"
            },
            {
              "CweID": "1289",
              "Comment": "Unsafe Equivalence"
            },
            {
              "CweID": "116",
              "Comment": "Improper Encoding or Escaping of Output"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 573.2707740915879
          },
          "normalized_scores": {
            "sparse": 0.4586166192732703
          },
          "weighted_scores": {
            "sparse": 0.18344664770930813
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 573.2707740915879,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.4586166192732703,
              "weight": 0.4,
              "weighted_score": 0.18344664770930813
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.18344664770930813,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.1467573181674465
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.1467573181674465
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
                "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
                "reasons": [
                  "Frequent Misuse"
                ],
                "suggestions": [
                  {
                    "CweID": "1284",
                    "Comment": "Specified Quantity"
                  },
                  {
                    "CweID": "1285",
                    "Comment": "Specified Index, Position, or Offset"
                  },
                  {
                    "CweID": "1286",
                    "Comment": "Syntactic Correctness"
                  },
                  {
                    "CweID": "1287",
                    "Comment": "Specified Type"
                  },
                  {
                    "CweID": "1288",
                    "Comment": "Consistency within Input"
                  },
                  {
                    "CweID": "1289",
                    "Comment": "Unsafe Equivalence"
                  },
                  {
                    "CweID": "116",
                    "Comment": "Improper Encoding or Escaping of Output"
                  }
                ]
              },
              "score_after": 0.1174058545339572
            }
          },
          "combined_score": 0.1174058545339572
        }
      },
      "similarity": 0.1174058545339572
    },
    {
      "metadata": {
        "doc_id": "CWE-285",
        "name": "Improper Authorization",
        "type": "Class",
        "original_content": "The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.",
        "relationships": [],
        "original_sparse_score": 567.7226612702609,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.",
          "reasons": [
            "Abstraction"
          ],
          "suggestions": [
            {
              "CweID": "862",
              "Comment": "Missing Authorization"
            },
            {
              "CweID": "863",
              "Comment": "Incorrect Authorization"
            },
            {
              "CweID": "732",
              "Comment": "Incorrect Permission Assignment for Critical Resource"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 567.7226612702609
          },
          "normalized_scores": {
            "sparse": 0.45417812901620874
          },
          "weighted_scores": {
            "sparse": 0.1816712516064835
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 567.7226612702609,
              "query_max": 1468.6707656137526,
              "query_min": 567.7226612702609,
              "normalized_score": 0.45417812901620874,
              "weight": 0.4,
              "weighted_score": 0.1816712516064835
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.1816712516064835,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.1453370012851868
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.1453370012851868
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).",
                "comments": "Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.",
                "reasons": [
                  "Abstraction"
                ],
                "suggestions": [
                  {
                    "CweID": "862",
                    "Comment": "Missing Authorization"
                  },
                  {
                    "CweID": "863",
                    "Comment": "Incorrect Authorization"
                  },
                  {
                    "CweID": "732",
                    "Comment": "Incorrect Permission Assignment for Critical Resource"
                  }
                ]
              },
              "score_after": 0.11626960102814946
            }
          },
          "combined_score": 0.11626960102814946
        }
      },
      "similarity": 0.11626960102814946
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-74",
      "CWE-470",
      "CWE-20",
      "CWE-94"
    ],
    "critic_additional": [
      "CWE-502"
    ]
  }
}