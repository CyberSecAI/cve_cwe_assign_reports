{
  "method": "sparse_with_keyphrases",
  "query": "Azure RTOS USBX is a high-performance USB host, device, and on-the-go (OTG) embedded stack, that is fully integrated with Azure RTOS ThreadX. The case is, in [_ux_host_class_pima_read](https//github.com/azure-rtos/usbx/blob/master/common/usbx_host_classes/src/ux_host_class_pima_read.c), there is data length from device response, returned in the very first packet, and read by [L165 code](https//github.com/azure-rtos/usbx/blob/082fd9db09a3669eca3358f10b8837a5c1635c0b/common/usbx_host_classes/src/ux_host_class_pima_read.c#L165), as header_length. Then in [L178 code](https//github.com/azure-rtos/usbx/blob/082fd9db09a3669eca3358f10b8837a5c1635c0b/common/usbx_host_classes/src/ux_host_class_pima_read.c#L178), there is a if branch, which check the expression of (header_length - UX_HOST_CLASS_PIMA_DATA_HEADER_SIZE) > data_length where if header_length is smaller than UX_HOST_CLASS_PIMA_DATA_HEADER_SIZE, calculation could overflow and then [L182 code](https//github.com/azure-rtos/usbx/blob/082fd9db09a3669eca3358f10b8837a5c1635c0b/common/usbx_host_classes/src/ux_host_class_pima_read.c#L182) the calculation of data_length is also overflow, this way the later [while loop start from L192](https//github.com/azure-rtos/usbx/blob/082fd9db09a3669eca3358f10b8837a5c1635c0b/common/usbx_host_classes/src/ux_host_class_pima_read.c#L192) can move data_pointer to unexpected address and cause write buffer overflow. The fix has been included in USBX release [6.1.12](https//github.com/azure-rtos/usbx/releases/tag/v6.1.12_rel). The following can be used as a workaround Add check of `header_length` 1. It must be greater than `UX_HOST_CLASS_PIMA_DATA_HEADER_SIZE`. 1. It should be greater or equal to the current returned data length (`transfer_request -> ux_transfer_request_actual_length`).",
  "keyphrases": {
    "weakness": "integer overflow"
  },
  "timestamp": "2025-03-18T16:31:34.255578",
  "results_count": 20,
  "results_summary": [
    {
      "doc_id": "CWE-191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "score": 3253.1381799810974
    },
    {
      "doc_id": "CWE-1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 1342.7021293487219
    },
    {
      "doc_id": "CWE-122",
      "name": "Heap-based Buffer Overflow",
      "score": 1044.9394621185522
    },
    {
      "doc_id": "CWE-824",
      "name": "Access of Uninitialized Pointer",
      "score": 969.0448905330438
    },
    {
      "doc_id": "CWE-190",
      "name": "Integer Overflow or Wraparound",
      "score": 925.5104160529437
    }
  ]
}