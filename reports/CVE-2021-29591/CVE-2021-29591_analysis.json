{
  "cve_id": "CVE-2021-29591",
  "description": "TensorFlow is an end-to-end open source platform for machine learning. TFlite graphs must not have loops between nodes. However, this condition was not checked and an attacker could craft models that would result in infinite loop during evaluation. In certain cases, the infinite loop would be replaced by stack overflow due to too many recursive calls. For example, the `While` implementation(https//github.com/tensorflow/tensorflow/blob/106d8f4fb89335a2c52d7c895b7a7485465ca8d9/tensorflow/lite/kernels/while.cc) could be tricked into a scneario where both the body and the loop subgraphs are the same. Evaluating one of the subgraphs means calling the `Eval` function for the other and this quickly exhaust all stack space. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range. Please consult our security guide(https//github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
  "key_phrases": {
    "rootcause": "loops between nodes",
    "weakness": "stack overflow",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "TensorFlow",
    "version": "before 2.5.0",
    "component": "TFlite graphs"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2021-29591:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from the lack of proper validation in TensorFlow Lite (TFLite) graphs, specifically regarding loops between nodes. The `While` operator in TFLite could be exploited by creating a scenario where the condition and body subgraphs are the same. This would lead to an infinite loop or stack overflow during model evaluation due to recursive calls.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Missing loop detection**: TFLite did not check for loops in the graph structure.\n- **Recursive calls without limits**: The `While` operator could be tricked into recursively calling itself, exhausting the stack.\n\n**Impact of Exploitation:**\n- **Infinite loop:** A specially crafted model could cause an infinite loop during evaluation.\n- **Stack overflow:** Recursive calls from the infinite loop could lead to stack exhaustion and a crash.\n\n**Attack Vectors:**\n- **Crafted TFLite model:** An attacker could create a malicious TFLite model with a looped graph structure.\n\n**Required Attacker Capabilities/Position:**\n- An attacker needs the ability to create and provide a crafted TFLite model.\n\n**Additional Details:**\n- The vulnerability specifically impacts the TFLite interpreter when evaluating models with loops.\n- The fix involves adding checks for recursion and ensuring that subgraphs are not used recursively.\n- The commits fixing the issue are  [9c1dc920d8ffb4893d6c9d27d1f039607b326743](https://github.com/tensorflow/tensorflow/commit/9c1dc920d8ffb4893d6c9d27d1f039607b326743) (for the `While` operator) and  [c6173f5fe66cdbab74f4f869311fe6aae2ba35f4](https://github.com/tensorflow/tensorflow/commit/c6173f5fe66cdbab74f4f869311fe6aae2ba35f4) (in general).\n- The vulnerability is addressed in TensorFlow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and will be included in 2.5.0.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-835 | Loop with Unreachable Exit Condition ('Infinite Loop') | 0.90 | Base | Allowed | Primary CWE |\n| CWE-674 | Improper Control of Recursion Depth | 0.75 | Class | Allowed-with-Review | Secondary Candidate |\n| CWE-125 | Out-of-bounds Read | 0.60 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The primary weakness described is the potential for **infinite loops** in TFlite graphs due to a lack of validation for **loops between nodes**. This directly corresponds to CWE-835, Loop with Unreachable Exit Condition ('Infinite Loop'). The vulnerability description states, \"TFlite graphs must not have **loops between nodes**. However, this condition was not checked and an attacker could craft models that would result in infinite loop during evaluation.\" This clearly indicates a missing check for a condition that leads to an infinite loop. The CVE Reference Links Content Summary reinforces this by highlighting the **missing loop detection** as a key weakness. CWE-835 is a Base level CWE and the mapping guidance indicates it is ALLOWED.\n\n  - In some cases, the **infinite loop** leads to **stack overflow** due to excessive recursive calls. This suggests CWE-674, Improper Control of Recursion Depth, as a secondary weakness. The description mentions the `While` implementation could be tricked into a scenario where both the body and the loop subgraphs are the same, leading to the `Eval` function calling itself recursively and exhausting stack space. CWE-674 is a Class level CWE, and while a more specific child CWE might be ideal, the available information doesn't pinpoint a precise variant. The mapping guidance is ALLOWED-with-Review, suggesting caution, but appropriate given the context.\n\n  - Finally, an **out-of-bounds read** (CWE-125) could be caused during the execution of a crafted model, potentially as a result of the **infinite loop**. However, this is a less direct consequence compared to the **infinite loop** itself and the **stack overflow**, so it's a weaker candidate.\n\n- **Relationship Analysis:**\n  - CWE-835 describes an **infinite loop**.\n  - CWE-674 can result from the unchecked looping and recursive calls.\n  - CWE-835 CanPrecede CWE-1322 (Use of Blocking Code in Single-threaded, Non-blocking Context). This relationship is relevant as the crafted model with the loop will block until the **stack overflow** condition is met.\n\n- **Confidence Score:**\n  - Confidence: 0.90 (High confidence for CWE-835 due to direct match with **infinite loop** condition.)\n  - Confidence: 0.75 (Medium confidence for CWE-674 due to the connection between **infinite loop** and resulting **stack overflow**.)\n  - Confidence: 0.60 (Low confidence for CWE-125 as a potential consequence, but not directly stated.)",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-835 | Loop with Unreachable Exit Condition ('Infinite Loop') | 0.90 | Base | Allowed | Primary CWE |\n| CWE-674 | Improper Control of Recursion Depth | 0.75 | Class | Allowed-with-Review | Secondary Candidate |\n| CWE-125 | Out-of-bounds Read | 0.60 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The primary weakness described is the potential for **infinite loops** in TFlite graphs due to a lack of validation for **loops between nodes**. This directly corresponds to CWE-835, Loop with Unreachable Exit Condition ('Infinite Loop'). The vulnerability description states, \"TFlite graphs must not have **loops between nodes**. However, this condition was not checked and an attacker could craft models that would result in infinite loop during evaluation.\" This clearly indicates a missing check for a condition that leads to an infinite loop. The CVE Reference Links Content Summary reinforces this by highlighting the **missing loop detection** as a key weakness. CWE-835 is a Base level CWE and the mapping guidance indicates it is ALLOWED.\n\n  - In some cases, the **infinite loop** leads to **stack overflow** due to excessive recursive calls. This suggests CWE-674, Improper Control of Recursion Depth, as a secondary weakness. The description mentions the `While` implementation could be tricked into a scenario where both the body and the loop subgraphs are the same, leading to the `Eval` function calling itself recursively and exhausting stack space. CWE-674 is a Class level CWE, and while a more specific child CWE might be ideal, the available information doesn't pinpoint a precise variant. The mapping guidance is ALLOWED-with-Review, suggesting caution, but appropriate given the context.\n\n  - Finally, an **out-of-bounds read** (CWE-125) could be caused during the execution of a crafted model, potentially as a result of the **infinite loop**. However, this is a less direct consequence compared to the **infinite loop** itself and the **stack overflow**, so it's a weaker candidate.\n\n- **Relationship Analysis:**\n  - CWE-835 describes an **infinite loop**.\n  - CWE-674 can result from the unchecked looping and recursive calls.\n  - CWE-835 CanPrecede CWE-1322 (Use of Blocking Code in Single-threaded, Non-blocking Context). This relationship is relevant as the crafted model with the loop will block until the **stack overflow** condition is met.\n\n- **Confidence Score:**\n  - Confidence: 0.90 (High confidence for CWE-835 due to direct match with **infinite loop** condition.)\n  - Confidence: 0.75 (Medium confidence for CWE-674 due to the connection between **infinite loop** and resulting **stack overflow**.)\n  - Confidence: 0.60 (Low confidence for CWE-125 as a potential consequence, but not directly stated.)",
  "criticism": "Okay, here's a detailed review of the provided analysis, incorporating the full CWE specifications:\n\n**Overall Assessment**\n\nThe analysis is generally well-reasoned and provides a good initial mapping of the vulnerability. The primary CWE, CWE-835 (Infinite Loop), is a strong fit. The secondary candidates, CWE-674 (Improper Control of Recursion Depth) and CWE-125 (Out-of-bounds Read), have reasonable justifications, though some refinements are possible based on the full CWE specifications.\n\n**Detailed Breakdown**\n\n*   **CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')**\n\n    *   **Confidence:** 0.90 (High) - Justified. The description explicitly states the possibility of infinite loops due to missing loop detection.\n    *   **Mapping Guidance:** *Allowed* - The analysis correctly identifies that this is a Base-level CWE suitable for root cause mapping.\n    *   **Relationships:** The CanFollow relationship to CWE-1322 (Use of Blocking Code in Single-threaded, Non-blocking Context) is relevant, as the infinite loop *is* blocking code.\n    *   **Observed Examples:** The examples provided in the CWE specification are relevant and support the mapping. Specifically, CVE-2022-25304 has the same concept of an input causing an infinite loop.\n    *   **Mitigations (from CWE Specification):** The Mitigations for CWE-835 are limited, as it's a symptom rather than a direct cause. Preventing the loop from occurring (by validating the graph structure) is the primary mitigation, as implemented in the fixes.\n    *   **Recommendation:** Excellent mapping.\n\n*   **CWE-674: Improper Control of Recursion Depth**\n\n    *   **Confidence:** 0.75 (Medium) - Reasonable, but could be improved. The analysis correctly identifies the possibility of stack overflow due to recursive calls within the `While` operator.  However, CWE-674 is a Class-level CWE, and the mapping guidance is *Allowed-with-Review*, indicating that a more specific child CWE should be preferred if possible.\n    *   **Mapping Guidance:** *Allowed-with-Review* -  The analysis acknowledges this and explains why a more specific CWE is not immediately apparent from the available information.\n    *   **Relationships:**  The ParentOf relationship to CWE-776 (XML Entity Expansion) isn't directly relevant here. It's an example of recursion, but the vulnerability isn't related to XML.\n    *   **Observed Examples:** Examples like CVE-2007-3409 (self-referencing pointers creating stack exhaustion) are relevant, but not perfectly analogous.\n    *   **Mitigations (from CWE Specification):**\n        *   \"Ensure an end condition will be reached under all logic conditions.\" - This is directly relevant. The fix involves ensuring that the loop and body subgraphs are not the same, effectively creating an end condition.\n        *   \"Increase the stack size.\" - This is a *limited* and *not recommended* mitigation. It would only delay the inevitable crash.\n    *   **Recommendation:** While the connection to stack overflow is valid, a more precise CWE *might* exist.  Consider if a child CWE of CWE-674 more accurately describes the *cause* of the uncontrolled recursion.  For example, the lack of validation of the graph structure that *permits* the recursive loop is the root cause, not the recursion itself. One might look for a CWE related to the structure of the graph or a lack of checks on input validity. While no direct child CWE of 674 seems to fit, there may be a related Base-level CWE that better represents the lack of structural validation that allows the recursion.\n\n*   **CWE-125: Out-of-bounds Read**\n\n    *   **Confidence:** 0.60 (Low) - Weakest justification.  While *possible*, it's speculative. An out-of-bounds read isn't explicitly mentioned in the vulnerability description. It is a possible *consequence* of memory corruption that *could* happen, but it isn't inherent to the core vulnerability.\n    *   **Mapping Guidance:** *Allowed* - But the justification needs to be strong, and in this case, it's weak.\n    *   **Relationships:** The \"CanFollow\" relationships are potentially relevant, but only if the OOB read actually *occurs*.\n    *   **Observed Examples:** The examples are not directly relevant, as they are about specific implementations of OOB reads, not general possibilities.\n    *   **Mitigations (from CWE Specification):**\n        *   \"Input Validation\" - This is *indirectly* relevant. Validating the graph structure (preventing loops) would prevent the *possibility* of an OOB read occurring.\n        *   \"Language Selection\" - Not relevant in this context, as TensorFlow is already written in C++.\n    *   **Recommendation:** I recommend *removing* CWE-125 as a primary or secondary CWE. It's too speculative. The core vulnerability is about infinite loops and potential stack overflow, not about directly reading data out of bounds.\n\n**Additional Considerations**\n\n1.  **Missing Input Validation CWEs:** The vulnerability is fundamentally caused by a *lack of input validation* on the structure of the TFlite graph. Consider adding a CWE related to this. Several of the \"Top Combined Results\" from the original analyzer input suggest this. Some possible candidates:\n    *   **CWE-1284: Improper Validation of Specified Quantity in Input:** While \"quantity\" might not seem immediately applicable, the *structure* of the graph can be thought of as a quantity of nodes and connections. The validation that this structure does *not* contain loops is missing.\n    *   **CWE-1286: Improper Validation of Syntactic Correctness of Input:** The TFLite graph has a required syntax (no loops). This syntax is not validated.\n    *   **CWE-1287: Improper Validation of Specified Type of Input:** Related to data types, so not very fitting.\n    CWE-1284 or CWE-1286 are stronger candidates.\n\n2.  **CWE-787: Out-of-bounds Write:** This CWE is present in the \"Top Combined Results\". Out-of-bounds writes are more likely than out-of-bounds reads. Stack overflow can manifest as out-of-bounds writes to the stack. This is a potential alternative to CWE-125, or in addition to it if an input validation CWE is added.\n\n**Revised Analysis**\n\n| CWE ID  | CWE Name                                                        | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes                                                                                                                                                                                                                                               |\n| :------ | :-------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| CWE-835 | Loop with Unreachable Exit Condition ('Infinite Loop')           | 0.90       | Base                  | Allowed                       | Primary CWE                                                                                                                                                                                                                                                                   |\n| CWE-674 | Improper Control of Recursion Depth                              | 0.75       | Class                  | Allowed-with-Review                      | Secondary Candidate - Consider if a more specific Base-level CWE exists. It describes what happens, not why it happens.                                                                                                                                               |\n| CWE-1284 | Improper Validation of Specified Quantity in Input  | 0.80       | Base                  | Allowed                       | Tertiary Candidate - Represents the root cause. Missing validation that the structure of the TFLite graph (quantity of nodes and connections) does not create loops.                                                                                                                               |\n| CWE-787 | Out-of-bounds Write  | 0.65       | Base                  | Allowed                       | Tertiary Candidate - Represents a potential symptom of stack overflow.                                                                                                                               |\n\n**Summary of Changes**\n\n*   Removed CWE-125 (Out-of-bounds Read) due to weak justification.\n*   Added CWE-1284 (Improper Validation of Specified Quantity in Input) to reflect the lack of input validation as the root cause.\n* Added CWE-787 (Out-of-bounds Write) due to stack overflow.\n\nBy incorporating the full CWE specifications and focusing on the root cause and most likely consequences, this revised analysis provides a more accurate and actionable classification of the vulnerability.",
  "resolution": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| **CWE-835** | Loop with Unreachable Exit Condition ('Infinite Loop') | 0.90 | Base | Allowed | Primary CWE |\n| **CWE-674** | Improper Control of Recursion Depth | 0.75 | Class | Allowed-with-Review | Secondary Candidate |\n| **CWE-1284** | Improper Validation of Specified Quantity in Input | 0.80 | Base | Allowed | Secondary Candidate |\n| **CWE-787** | Out-of-bounds Write | 0.65 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe following CWE relationships impacted my decision:\n  - **CWE-835** (Infinite Loop) is the primary issue described in the vulnerability.\n  - **CWE-674** (Improper Control of Recursion Depth) is a consequence of the **infinite loop**, resulting in stack overflow. While it is a Class level CWE, a more specific base CWE isn't apparent from the provided information.\n  - **CWE-1284** (Improper Validation of Specified Quantity in Input) represents the **root cause**, as the lack of input validation on the graph structure allows the **infinite loop** to be created.\n  - **CWE-787** (Out-of-bounds Write) is a potential consequence of stack overflow.\n\n```mermaid\ngraph TD\n    cwe835[\"CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')\"]\n    cwe674[\"CWE-674: Improper Control of Recursion Depth\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe1322[\"CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context\"]\n\n    cwe835 -->|CANPRECEDE| cwe1322\n    cwe674 -->|CHILDOF| cwe674\n    cwe1284 -->|CANPRECEDE| cwe835\n    cwe835 -->|CANPRECEDE| cwe674\n    cwe674 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe835 primary\n    class cwe674,cwe1284,cwe787 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the lack of input validation (**CWE-1284**), allowing a crafted TFlite graph with **loops between nodes**. This leads to an **infinite loop** (**CWE-835**), which can then cause excessive recursive calls and stack overflow (**CWE-674**). The stack overflow can lead to an out-of-bounds write (**CWE-787**).\n\n## Summary of Analysis\nThe initial analysis was well-reasoned. The criticism highlighted the need for a CWE representing the **lack of input validation**, which is the **root cause** of the vulnerability. It also identified that **CWE-125** (Out-of-bounds Read) was a weaker candidate and suggested **CWE-787** (Out-of-bounds Write) as a possible alternative, as stack overflow can lead to out-of-bounds writes. The vulnerability description mentions, \"TFlite graphs must not have **loops between nodes**. However, this condition was not checked and an attacker could craft models that would result in **infinite loop** during evaluation.\" This, combined with the potential for stack overflow, justifies the selection of **CWE-835**, **CWE-674**, **CWE-1284**, and **CWE-787**. The graph relationships confirm this chain, with **CWE-1284** leading to **CWE-835**, which then leads to **CWE-674** and potentially **CWE-787**. These CWEs are at the optimal level of specificity based on the available evidence.",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "CWE-835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "type": "Base",
        "original_content": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
        "relationships": [],
        "original_sparse_score": 2646.8652797857453,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.45538386598219016,
            "sparse": 2646.8652797857453,
            "graph": 1.5948497712708112
          },
          "normalized_scores": {
            "dense": 0.45538386598219016,
            "sparse": 1.0,
            "graph": 0.5695892040252898
          },
          "weighted_scores": {
            "dense": 0.15938435309376656,
            "sparse": 0.4,
            "graph": 0.14239730100632245
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.45538386598219016,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.45538386598219016,
              "weight": 0.35,
              "weighted_score": 0.15938435309376656
            },
            "sparse": {
              "raw_score": 2646.8652797857453,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            },
            "graph": {
              "raw_score": 1.5948497712708112,
              "query_max": 2.2100000000000004,
              "query_min": 1.2992000000000001,
              "normalized_score": 0.5695892040252898,
              "weight": 0.25,
              "weighted_score": 0.14239730100632245
            }
          },
          "contribution_percentages": {
            "dense": 22.711387817361633,
            "sparse": 56.99778523177973,
            "graph": 20.290826950858644
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.701781654100089,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.9123161503301157
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.9123161503301157
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 1.0035477653631273
            }
          },
          "combined_score": 1.0035477653631273
        }
      },
      "similarity": 1.0035477653631273
    },
    {
      "metadata": {
        "doc_id": "CWE-824",
        "name": "Access of Uninitialized Pointer",
        "type": "Base",
        "original_content": "The product accesses or uses a pointer that has not been initialized.",
        "relationships": [],
        "original_sparse_score": 2074.1006311861734,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.44797113009405043,
            "sparse": 2074.1006311861734,
            "graph": 1.5942629252290201
          },
          "normalized_scores": {
            "dense": 0.44797113009405043,
            "sparse": 1.0,
            "graph": 0.5693796161532215
          },
          "weighted_scores": {
            "dense": 0.15678989553291764,
            "sparse": 0.4,
            "graph": 0.14234490403830538
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.44797113009405043,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.44797113009405043,
              "weight": 0.35,
              "weighted_score": 0.15678989553291764
            },
            "sparse": {
              "raw_score": 2074.1006311861734,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            },
            "graph": {
              "raw_score": 1.5942629252290201,
              "query_max": 2.2100000000000004,
              "query_min": 1.2992000000000001,
              "normalized_score": 0.5693796161532215,
              "weight": 0.25,
              "weighted_score": 0.14234490403830538
            }
          },
          "contribution_percentages": {
            "dense": 22.42627539482748,
            "sparse": 57.21357315432141,
            "graph": 20.36015145085111
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.699134799571223,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.90887523944259
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.90887523944259
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.999762763386849
            }
          },
          "combined_score": 0.999762763386849
        }
      },
      "similarity": 0.999762763386849
    },
    {
      "metadata": {
        "doc_id": "CWE-1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "relationships": [],
        "original_sparse_score": 2025.7926062507584,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.44996450008952393,
            "sparse": 2025.7926062507584,
            "graph": 1.463145344026755
          },
          "normalized_scores": {
            "dense": 0.44996450008952393,
            "sparse": 1.0,
            "graph": 0.522551908580984
          },
          "weighted_scores": {
            "dense": 0.15748757503133337,
            "sparse": 0.4,
            "graph": 0.130637977145246
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.44996450008952393,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.44996450008952393,
              "weight": 0.35,
              "weighted_score": 0.15748757503133337
            },
            "sparse": {
              "raw_score": 2025.7926062507584,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            },
            "graph": {
              "raw_score": 1.463145344026755,
              "query_max": 2.2100000000000004,
              "query_min": 1.2992000000000001,
              "normalized_score": 0.522551908580984,
              "weight": 0.25,
              "weighted_score": 0.130637977145246
            }
          },
          "contribution_percentages": {
            "dense": 22.88645938712658,
            "sparse": 58.1289270155392,
            "graph": 18.984613597334207
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.6881255521765794,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.8945632178295533
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.8945632178295533
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.9840195396125087
            }
          },
          "combined_score": 0.9840195396125087
        }
      },
      "similarity": 0.9840195396125087
    },
    {
      "metadata": {
        "doc_id": "CWE-681",
        "name": "Incorrect Conversion between Numeric Types",
        "type": "Base",
        "original_content": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",
        "relationships": [],
        "original_sparse_score": 1967.587837268526,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.40577366567353473,
            "sparse": 1967.587837268526,
            "graph": 1.4533014310158525
          },
          "normalized_scores": {
            "dense": 0.40577366567353473,
            "sparse": 1.0,
            "graph": 0.5190362253628045
          },
          "weighted_scores": {
            "dense": 0.14202078298573714,
            "sparse": 0.4,
            "graph": 0.12975905634070112
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.40577366567353473,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.40577366567353473,
              "weight": 0.35,
              "weighted_score": 0.14202078298573714
            },
            "sparse": {
              "raw_score": 1967.587837268526,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            },
            "graph": {
              "raw_score": 1.4533014310158525,
              "query_max": 2.2100000000000004,
              "query_min": 1.2992000000000001,
              "normalized_score": 0.5190362253628045,
              "weight": 0.25,
              "weighted_score": 0.12975905634070112
            }
          },
          "contribution_percentages": {
            "dense": 21.1409712932342,
            "sparse": 59.543317108334335,
            "graph": 19.315711598431466
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.6717798393264383,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.8733137911243698
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.8733137911243698
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.9606451702368068
            }
          },
          "combined_score": 0.9606451702368068
        }
      },
      "similarity": 0.9606451702368068
    },
    {
      "metadata": {
        "doc_id": "CWE-787",
        "name": "Out-of-bounds Write",
        "type": "Base",
        "original_content": "The product writes data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 1503.884170995222,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 1503.884170995222,
            "graph": 2.2100000000000004
          },
          "normalized_scores": {
            "sparse": 1.0,
            "graph": 0.7892857142857145
          },
          "weighted_scores": {
            "sparse": 0.4,
            "graph": 0.19732142857142862
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 1503.884170995222,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            },
            "graph": {
              "raw_score": 2.2100000000000004,
              "query_max": 2.2100000000000004,
              "query_min": 1.2992000000000001,
              "normalized_score": 0.7892857142857145,
              "weight": 0.25,
              "weighted_score": 0.19732142857142862
            }
          },
          "contribution_percentages": {
            "sparse": 66.96562032884901,
            "graph": 33.03437967115098
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5973214285714287,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.7765178571428573
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.7765178571428573
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.854169642857143
            }
          },
          "combined_score": 0.854169642857143
        }
      },
      "similarity": 0.854169642857143
    },
    {
      "metadata": {
        "doc_id": "CWE-1287",
        "name": "Improper Validation of Specified Type of Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.",
        "relationships": [],
        "original_sparse_score": 1326.8204801997683,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.43592375664915084,
            "sparse": 1326.8204801997683
          },
          "normalized_scores": {
            "dense": 0.43592375664915084,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.1525733148272028,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.43592375664915084,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.43592375664915084,
              "weight": 0.35,
              "weighted_score": 0.1525733148272028
            },
            "sparse": {
              "raw_score": 1326.8204801997683,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 27.61141566796698,
            "sparse": 72.38858433203302
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5525733148272028,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.7183453092753638
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.7183453092753638
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7901798402029002
            }
          },
          "combined_score": 0.7901798402029002
        }
      },
      "similarity": 0.7901798402029002
    },
    {
      "metadata": {
        "doc_id": "CWE-663",
        "name": "Use of a Non-reentrant Function in a Concurrent Context",
        "type": "Base",
        "original_content": "The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.",
        "relationships": [],
        "original_sparse_score": 1616.919287538898,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.41613286793559734,
            "sparse": 1616.919287538898
          },
          "normalized_scores": {
            "dense": 0.41613286793559734,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.14564650377745905,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.41613286793559734,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.41613286793559734,
              "weight": 0.35,
              "weighted_score": 0.14564650377745905
            },
            "sparse": {
              "raw_score": 1616.919287538898,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 26.692465317593374,
            "sparse": 73.30753468240664
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.545646503777459,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.7093404549106967
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.7093404549106967
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7802745004017665
            }
          },
          "combined_score": 0.7802745004017665
        }
      },
      "similarity": 0.7802745004017665
    },
    {
      "metadata": {
        "doc_id": "CWE-190",
        "name": "Integer Overflow or Wraparound",
        "type": "Base",
        "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
        "relationships": [],
        "original_sparse_score": 1447.0151082844275,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ],
          "suggestions": [
            {
              "CweID": "191",
              "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4100510282394976,
            "sparse": 1447.0151082844275
          },
          "normalized_scores": {
            "dense": 0.4100510282394976,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.14351785988382415,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4100510282394976,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.4100510282394976,
              "weight": 0.35,
              "weighted_score": 0.14351785988382415
            },
            "sparse": {
              "raw_score": 1447.0151082844275,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 26.405362266200562,
            "sparse": 73.59463773379944
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5435178598838242,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.7065732178489714
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.7065732178489714
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ],
                "suggestions": [
                  {
                    "CweID": "191",
                    "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
                  }
                ]
              },
              "score_after": 0.7772305396338687
            }
          },
          "combined_score": 0.7772305396338687
        }
      },
      "similarity": 0.7772305396338687
    },
    {
      "metadata": {
        "doc_id": "CWE-1286",
        "name": "Improper Validation of Syntactic Correctness of Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.",
        "relationships": [],
        "original_sparse_score": 1447.4496108329367,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4052779271778958,
            "sparse": 1447.4496108329367
          },
          "normalized_scores": {
            "dense": 0.4052779271778958,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.1418472745122635,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4052779271778958,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.4052779271778958,
              "weight": 0.35,
              "weighted_score": 0.1418472745122635
            },
            "sparse": {
              "raw_score": 1447.4496108329367,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 26.178460460089127,
            "sparse": 73.82153953991086
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5418472745122636,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.7044014568659427
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.7044014568659427
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.774841602552537
            }
          },
          "combined_score": 0.774841602552537
        }
      },
      "similarity": 0.774841602552537
    },
    {
      "metadata": {
        "doc_id": "CWE-843",
        "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
        "type": "Base",
        "original_content": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
        "relationships": [],
        "original_sparse_score": 1441.5161645619912,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4034055452428902,
            "sparse": 1441.5161645619912
          },
          "normalized_scores": {
            "dense": 0.4034055452428902,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.14119194083501155,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4034055452428902,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.4034055452428902,
              "weight": 0.35,
              "weighted_score": 0.14119194083501155
            },
            "sparse": {
              "raw_score": 1441.5161645619912,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 26.0890693636651,
            "sparse": 73.91093063633491
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5411919408350115,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.703549523085515
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.703549523085515
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7739044753940666
            }
          },
          "combined_score": 0.7739044753940666
        }
      },
      "similarity": 0.7739044753940666
    },
    {
      "metadata": {
        "doc_id": "CWE-617",
        "name": "Reachable Assertion",
        "type": "Base",
        "original_content": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",
        "relationships": [],
        "original_sparse_score": 1698.1071719875379,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.3943837350264366,
            "sparse": 1698.1071719875379
          },
          "normalized_scores": {
            "dense": 0.3943837350264366,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.1380343072592528,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.3943837350264366,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.3943837350264366,
              "weight": 0.35,
              "weighted_score": 0.1380343072592528
            },
            "sparse": {
              "raw_score": 1698.1071719875379,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 25.65529844414563,
            "sparse": 74.34470155585437
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5380343072592528,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6994445994370287
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6994445994370287
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7693890593807317
            }
          },
          "combined_score": 0.7693890593807317
        }
      },
      "similarity": 0.7693890593807317
    },
    {
      "metadata": {
        "doc_id": "CWE-125",
        "name": "Out-of-bounds Read",
        "type": "Base",
        "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 1648.9587398553283,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 1648.9587398553283,
            "graph": 1.4972477885507844
          },
          "normalized_scores": {
            "sparse": 1.0,
            "graph": 0.5347313530538517
          },
          "weighted_scores": {
            "sparse": 0.4,
            "graph": 0.13368283826346292
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 1648.9587398553283,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            },
            "graph": {
              "raw_score": 1.4972477885507844,
              "query_max": 2.2100000000000004,
              "query_min": 1.2992000000000001,
              "normalized_score": 0.5347313530538517,
              "weight": 0.25,
              "weighted_score": 0.13368283826346292
            }
          },
          "contribution_percentages": {
            "sparse": 74.95088305660154,
            "graph": 25.049116943398463
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.533682838263463,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6937876897425019
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6937876897425019
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7631664587167521
            }
          },
          "combined_score": 0.7631664587167521
        }
      },
      "similarity": 0.7631664587167521
    },
    {
      "metadata": {
        "doc_id": "CWE-415",
        "name": "Double Free",
        "type": "Variant",
        "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
        "relationships": [],
        "original_sparse_score": 1731.780553942571,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.43989217428910843,
            "sparse": 1731.780553942571
          },
          "normalized_scores": {
            "dense": 0.43989217428910843,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.15396226100118793,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.43989217428910843,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.43989217428910843,
              "weight": 0.35,
              "weighted_score": 0.15396226100118793
            },
            "sparse": {
              "raw_score": 1731.780553942571,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 27.79291512077531,
            "sparse": 72.2070848792247
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.553962261001188,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.6647547132014255
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6647547132014255
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7312301845215682
            }
          },
          "combined_score": 0.7312301845215682
        }
      },
      "similarity": 0.7312301845215682
    },
    {
      "metadata": {
        "doc_id": "CWE-193",
        "name": "Off-by-one Error",
        "type": "Base",
        "original_content": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
        "relationships": [],
        "original_sparse_score": 1813.6161283936308,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 1813.6161283936308
          },
          "normalized_scores": {
            "sparse": 1.0
          },
          "weighted_scores": {
            "sparse": 0.4
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 1813.6161283936308,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.52
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.52
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5720000000000001
            }
          },
          "combined_score": 0.5720000000000001
        }
      },
      "similarity": 0.5720000000000001
    },
    {
      "metadata": {
        "doc_id": "CWE-476",
        "name": "NULL Pointer Dereference",
        "type": "Base",
        "original_content": "The product dereferences a pointer that it expects to be valid but is NULL.",
        "relationships": [],
        "original_sparse_score": 1594.1055169451145,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 1594.1055169451145
          },
          "normalized_scores": {
            "sparse": 1.0
          },
          "weighted_scores": {
            "sparse": 0.4
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 1594.1055169451145,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.52
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.52
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5720000000000001
            }
          },
          "combined_score": 0.5720000000000001
        }
      },
      "similarity": 0.5720000000000001
    },
    {
      "metadata": {
        "doc_id": "CWE-191",
        "name": "Integer Underflow (Wrap or Wraparound)",
        "type": "Base",
        "original_content": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
        "relationships": [],
        "original_sparse_score": 1369.4782072910132,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 1369.4782072910132
          },
          "normalized_scores": {
            "sparse": 1.0
          },
          "weighted_scores": {
            "sparse": 0.4
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 1369.4782072910132,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.52
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.52
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5720000000000001
            }
          },
          "combined_score": 0.5720000000000001
        }
      },
      "similarity": 0.5720000000000001
    },
    {
      "metadata": {
        "doc_id": "CWE-122",
        "name": "Heap-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
        "relationships": [],
        "original_sparse_score": 1850.0027803653354,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 1850.0027803653354
          },
          "normalized_scores": {
            "sparse": 1.0
          },
          "weighted_scores": {
            "sparse": 0.4
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 1850.0027803653354,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.48
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.48
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.528
            }
          },
          "combined_score": 0.528
        }
      },
      "similarity": 0.528
    },
    {
      "metadata": {
        "doc_id": "CWE-95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "type": "Variant",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
        "relationships": [],
        "original_sparse_score": 1664.9914025113073,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 1664.9914025113073
          },
          "normalized_scores": {
            "sparse": 1.0
          },
          "weighted_scores": {
            "sparse": 0.4
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 1664.9914025113073,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.48
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.48
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.528
            }
          },
          "combined_score": 0.528
        }
      },
      "similarity": 0.528
    },
    {
      "metadata": {
        "doc_id": "CWE-674",
        "name": "Uncontrolled Recursion",
        "type": "Class",
        "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
        "relationships": [],
        "original_sparse_score": 1964.7405813153696,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.45254912091076843,
            "sparse": 1964.7405813153696
          },
          "normalized_scores": {
            "dense": 0.45254912091076843,
            "sparse": 1.0
          },
          "weighted_scores": {
            "dense": 0.15839219231876894,
            "sparse": 0.4
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.45254912091076843,
              "query_max": 0.4610116861217398,
              "query_min": 0.3943837350264366,
              "normalized_score": 0.45254912091076843,
              "weight": 0.35,
              "weighted_score": 0.15839219231876894
            },
            "sparse": {
              "raw_score": 1964.7405813153696,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "dense": 28.36576057072584,
            "sparse": 71.63423942927417
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.5583921923187689,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.44671375385501516
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.44671375385501516
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.46904944154776596
            }
          },
          "combined_score": 0.46904944154776596
        }
      },
      "similarity": 0.46904944154776596
    },
    {
      "metadata": {
        "doc_id": "CWE-20",
        "name": "Improper Input Validation",
        "type": "Class",
        "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
        "relationships": [],
        "original_sparse_score": 1532.5958320132743,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "1284",
              "Comment": "Specified Quantity"
            },
            {
              "CweID": "1285",
              "Comment": "Specified Index, Position, or Offset"
            },
            {
              "CweID": "1286",
              "Comment": "Syntactic Correctness"
            },
            {
              "CweID": "1287",
              "Comment": "Specified Type"
            },
            {
              "CweID": "1288",
              "Comment": "Consistency within Input"
            },
            {
              "CweID": "1289",
              "Comment": "Unsafe Equivalence"
            },
            {
              "CweID": "116",
              "Comment": "Improper Encoding or Escaping of Output"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 1532.5958320132743
          },
          "normalized_scores": {
            "sparse": 1.0
          },
          "weighted_scores": {
            "sparse": 0.4
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 1532.5958320132743,
              "query_max": 2646.8652797857453,
              "query_min": 1326.8204801997683,
              "normalized_score": 1.0,
              "weight": 0.4,
              "weighted_score": 0.4
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.4,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.32000000000000006
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.32000000000000006
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
                "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
                "reasons": [
                  "Frequent Misuse"
                ],
                "suggestions": [
                  {
                    "CweID": "1284",
                    "Comment": "Specified Quantity"
                  },
                  {
                    "CweID": "1285",
                    "Comment": "Specified Index, Position, or Offset"
                  },
                  {
                    "CweID": "1286",
                    "Comment": "Syntactic Correctness"
                  },
                  {
                    "CweID": "1287",
                    "Comment": "Specified Type"
                  },
                  {
                    "CweID": "1288",
                    "Comment": "Consistency within Input"
                  },
                  {
                    "CweID": "1289",
                    "Comment": "Unsafe Equivalence"
                  },
                  {
                    "CweID": "116",
                    "Comment": "Improper Encoding or Escaping of Output"
                  }
                ]
              },
              "score_after": 0.25600000000000006
            }
          },
          "combined_score": 0.25600000000000006
        }
      },
      "similarity": 0.25600000000000006
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-835",
      "CWE-1322",
      "CWE-125",
      "CWE-674"
    ],
    "critic_additional": [
      "CWE-776",
      "CWE-1286",
      "CWE-1287",
      "CWE-787",
      "CWE-1284"
    ]
  }
}