{
  "cve_id": "CVE-2022-35886",
  "description": "Four format string injection vulnerabilities exist in the web interface /action/wirelessConnect functionality of Abode Systems, Inc. iota All-In-One Security Kit 6.9Z and 6.9X. A specially-crafted HTTP request can lead to memory corruption, information disclosure and denial of service. An attacker can make an authenticated HTTP request to trigger these vulnerabilities.This vulnerability arises from format string injection via the `default_key_id` and `key` HTTP parameters, as used within the `/action/wirelessConnect` handler.",
  "key_phrases": {
    "rootcause": "format string injection",
    "weakness": "",
    "impact": [
      "memory corruption",
      "information disclosure",
      "denial of service"
    ],
    "vector": "",
    "attacker": "attacker",
    "product": "Abode Systems iota All-In-One Security Kit",
    "version": "6.9Z and 6.9X",
    "component": "/action/wirelessConnect functionality"
  },
  "reference_content": "```\n{\n  \"Root cause of vulnerability\": \"The `log` function, which is a wrapper to `vsnprintf` and `puts`, is misused in the `/action/wirelessConnect` HTTP handler. Specifically, the `format` parameter of `vsnprintf` within the `log` function is populated with attacker-controlled data from HTTP parameters, leading to a format string vulnerability.\",\n  \"Weaknesses/vulnerabilities present\": [\n    \"Format string injection vulnerability in the `log` function.\",\n     \"Lack of proper sanitization of HTTP parameters `default_key_id` and `key` before being used in a format string within the `log` function.\"\n  ],\n  \"Impact of exploitation\": \"An attacker can cause memory corruption, information disclosure, and denial of service by sending a specially-crafted HTTP request that exploits format string vulnerabilities. The attacker can potentially leak stack memory and write arbitrary memory.\",\n  \"Attack vectors\": \"An attacker can exploit the vulnerabilities by sending an authenticated HTTP request to the `/action/wirelessConnect` endpoint with crafted `default_key_id` and `key` HTTP parameters when the `auth_mode` parameter is either `WEP` or `SHARED`.\",\n  \"Required attacker capabilities/position\": \"The attacker needs to be authenticated to the web interface. The web interface is disabled by default, but can be re-enabled using previously discovered vulnerabilities. Additionally, a physically present attacker with UART access can observe the output of the format string vulnerabilities.\"\n}\n```",
  "similar_info": {
    "cwe_distribution": {
      "95": {
        "cwe_counts": {},
        "total_samples": 3,
        "distribution": [
          {
            "cwes": [],
            "frequency": 3,
            "proportion": 1.0
          }
        ]
      },
      "90": {
        "cwe_counts": {},
        "total_samples": 3,
        "distribution": [
          {
            "cwes": [],
            "frequency": 3,
            "proportion": 1.0
          }
        ]
      },
      "85": {
        "cwe_counts": {},
        "total_samples": 3,
        "distribution": [
          {
            "cwes": [],
            "frequency": 3,
            "proportion": 1.0
          }
        ]
      },
      "80": {
        "cwe_counts": {},
        "total_samples": 11,
        "distribution": [
          {
            "cwes": [],
            "frequency": 11,
            "proportion": 1.0
          }
        ]
      },
      "75": {
        "cwe_counts": {},
        "total_samples": 11,
        "distribution": [
          {
            "cwes": [],
            "frequency": 11,
            "proportion": 1.0
          }
        ]
      },
      "70": {
        "cwe_counts": {},
        "total_samples": 11,
        "distribution": [
          {
            "cwes": [],
            "frequency": 11,
            "proportion": 1.0
          }
        ]
      }
    },
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [
        95,
        90,
        85,
        80,
        75,
        70
      ],
      "total_samples_by_threshold": {
        "95": 3,
        "90": 3,
        "85": 3,
        "80": 11,
        "75": 11,
        "70": 11
      },
      "top_cwes_by_threshold": {
        "95": [],
        "90": [],
        "85": [],
        "80": [],
        "75": [],
        "70": []
      }
    },
    "raw_matches": [
      {
        "similarity": 95,
        "cwes": [],
        "total": 3,
        "frequency": 3,
        "proportion": 1.0
      },
      {
        "similarity": 90,
        "cwes": [],
        "total": 3,
        "frequency": 3,
        "proportion": 1.0
      },
      {
        "similarity": 85,
        "cwes": [],
        "total": 3,
        "frequency": 3,
        "proportion": 1.0
      },
      {
        "similarity": 80,
        "cwes": [],
        "total": 11,
        "frequency": 11,
        "proportion": 1.0
      },
      {
        "similarity": 75,
        "cwes": [],
        "total": 11,
        "frequency": 11,
        "proportion": 1.0
      },
      {
        "similarity": 70,
        "cwes": [],
        "total": 11,
        "frequency": 11,
        "proportion": 1.0
      }
    ]
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {
      "high": [],
      "medium": [],
      "low": []
    },
    "total_samples": 42
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-134 | Use of Externally-Controlled Format String | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**\n  - *Explanation:* The vulnerability description clearly states the existence of **format string injection** vulnerabilities in the `/action/wirelessConnect` functionality of Abode Systems, Inc. iota All-In-One Security Kit. The root cause, as confirmed by the CVE Reference Links Content Summary, is that the `log` function, which uses `vsnprintf`, is being misused, leading to a **format string vulnerability** because the `format` parameter is populated with attacker-controlled data. CWE-134 (Use of Externally-Controlled Format String) directly addresses this issue, as it describes a scenario where a format string originates from an external source, which is precisely the case here with HTTP parameters `default_key_id` and `key`. The usage is ALLOWED according to MITRE.\n\n  - *Relationship Analysis:* No direct relationships were provided but based on the vulnerability details, the attacker controlled data used in a format string leads to memory corruption, information disclosure and denial of service.\n\n- **Confidence Score:**\n  - Confidence: 1.0 (The description provides explicit details and the summary confirms the root cause and attack vector.)",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-134 | Use of Externally-Controlled Format String | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**\n  - *Explanation:* The vulnerability description clearly states the existence of **format string injection** vulnerabilities in the `/action/wirelessConnect` functionality of Abode Systems, Inc. iota All-In-One Security Kit. The root cause, as confirmed by the CVE Reference Links Content Summary, is that the `log` function, which uses `vsnprintf`, is being misused, leading to a **format string vulnerability** because the `format` parameter is populated with attacker-controlled data. CWE-134 (Use of Externally-Controlled Format String) directly addresses this issue, as it describes a scenario where a format string originates from an external source, which is precisely the case here with HTTP parameters `default_key_id` and `key`. The usage is ALLOWED according to MITRE.\n\n  - *Relationship Analysis:* No direct relationships were provided but based on the vulnerability details, the attacker controlled data used in a format string leads to memory corruption, information disclosure and denial of service.\n\n- **Confidence Score:**\n  - Confidence: 1.0 (The description provides explicit details and the summary confirms the root cause and attack vector.)",
  "criticism": "Okay, let's break down the provided analysis and critique it against the full CWE specifications.\n\n**Overall Assessment:**\n\nThe primary CWE mapping to CWE-134 (Use of Externally-Controlled Format String) is accurate and well-supported. The analysis clearly explains the root cause, attack vector, and impact, aligning well with the CWE-134 description. The confidence score of 1.0 is justified. However, the retriever results suggest other potential weaknesses are at play, particularly related to input validation and the consequences of the format string vulnerability (e.g., buffer overflows, code injection). These should be explored as secondary or contributing factors.\n\n**Detailed Critique by CWE:**\n\n1.  **CWE-134: Use of Externally-Controlled Format String (Primary CWE)**\n\n    *   **Strengths:**\n\n        *   The analysis correctly identifies that the `format` parameter of `vsnprintf` is populated with attacker-controlled data from HTTP parameters, which perfectly fits the CWE-134 description.\n        *   The justification clearly links the vulnerability description to the root cause identified in the CVE Reference Links Content Summary.\n        *   The analysis mentions the potential impact of memory corruption, information disclosure, and denial of service, which are all plausible consequences of a format string vulnerability.\n        *   The analysis notes the MITRE Usage as ALLOWED.\n\n    *   **Areas for Improvement:**\n\n        *   The analysis could benefit from explicitly mentioning the potential use of the `%n` operator (or similar format specifiers) to achieve arbitrary memory writes, which is a common exploitation technique for format string vulnerabilities.  Mentioning this would solidify the understanding of the attack.\n        *   While the analysis focuses on the root cause, it doesn't delve into mitigations. It would be beneficial to briefly discuss how CWE-134 can be prevented, such as:\n            *   Using static format strings whenever possible.\n            *   Using safer logging mechanisms that automatically handle format specifiers or use structured logging.\n            *   Sanitizing or validating input before using it in a format string.\n        *   The \"Relationship Analysis\" section is quite brief. It could be expanded to describe how CWE-134 can lead to other CWEs like CWE-123 (Write-what-where Condition) or CWE-121 (Stack-based Buffer Overflow), depending on the specific format string used by the attacker.\n\n2.  **CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')**\n\n    *   **Relevance:** The retriever results suggest that OS Command Injection may be present. While not explicitly mentioned in the original vulnerability description, it is possible that the attacker-controlled format string could be used to inject OS commands. However, this is less likely and would be a secondary effect if it were present.\n    *   **Analysis:** If the `log` function or a related function is used to construct OS commands, then CWE-78 would be relevant. This depends on the context of how the logged information is used.\n    *   **Mitigation:** If OS command injection is possible, then the mitigations for CWE-78 should be considered, such as avoiding external processes and using library calls instead.\n\n3.  **CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')**\n\n    *   **Relevance:** Similar to CWE-78, SQL injection is unlikely unless the logged information is used in SQL queries.\n    *   **Analysis:** If the `log` function or a related function is used to construct SQL queries, then CWE-89 would be relevant. This depends on the context of how the logged information is used.\n    *   **Mitigation:** If SQL injection is possible, then the mitigations for CWE-89 should be considered, such as using parameterized queries.\n\n4.  **CWE-190: Integer Overflow or Wraparound**\n\n    *   **Relevance:** It is unlikely that integer overflow would occur as part of a format string vulnerability unless the parameters for the format string specifiers involve integer calculations.\n    *    **Analysis:** Only relevant if the data being formatted involves integers that are calculated prior to being passed to the `log` function.\n    *    **Mitigation:** If present, use safe integer handling packages.\n\n5.  **CWE-798: Use of Hard-coded Credentials**\n\n    *   **Relevance:** The vulnerability description makes no mention of hard-coded credentials. Therefore, CWE-798 is unlikely to be present.\n\n6.  **CWE-94: Improper Control of Generation of Code ('Code Injection')**\n\n    *   **Relevance:** This is more plausible than OS Command Injection or SQL Injection.  While the primary attack vector is format string injection, the attacker might be able to inject code snippets that are later executed, depending on how the logged information is handled. This depends on how the logged data is further processed and used by the application.\n    *   **Analysis:**  If the data logged with the format string vulnerability is later used to dynamically generate code, this CWE would be applicable.\n    *   **Mitigation:** Avoid dynamic code generation and use input validation (allowlists) to limit allowed code constructs.\n\n7.  **CWE-121: Stack-based Buffer Overflow**\n\n    *   **Relevance:** A format string vulnerability can *lead* to a buffer overflow if the attacker uses format specifiers to write more data than the buffer allocated for the output can hold. This is very likely.  Therefore, this is a relevant *consequence* of the format string vulnerability.\n    *   **Analysis:** The format string vulnerability could lead to a stack-based buffer overflow if the output buffer is located on the stack.\n    *   **Mitigation:** In addition to mitigating the format string vulnerability itself, use compiler flags for buffer overflow detection (e.g., /GS in Visual Studio).\n\n8.  **CWE-20: Improper Input Validation**\n\n    *   **Relevance:** This is a general CWE, but *very* relevant in this case. The root cause of the format string vulnerability is the *lack* of proper input validation on the `default_key_id` and `key` HTTP parameters. This is the overarching issue that allows the format string vulnerability to be exploited.\n    *   **Analysis:** The system fails to validate that the input does not contain format string specifiers.\n    *   **Mitigation:**  Implement strict input validation to sanitize or reject inputs containing format string specifiers. Use an \"accept known good\" strategy.\n\n9.  **CWE-1286/1287: Improper Validation of Syntactic Correctness of Input / Specified Type of Input**\n\n    *   **Relevance:** These are more specific versions of CWE-20. They highlight that the input should be checked for the correct syntax and data type. In this case, the input should not contain format string specifiers, which violate the expected syntax.\n    *   **Analysis:** Focuses on the specific type of input validation failures.\n    *   **Mitigation:** Implement more specific input validation rules to ensure the input conforms to the expected syntax and type.\n\n**Recommendations:**\n\n1.  **Expand the analysis to include the potential consequences of CWE-134**, particularly how it can lead to CWE-121 (Stack-based Buffer Overflow) and, potentially, CWE-94 (Code Injection).\n2.  **Emphasize the importance of input validation (CWE-20, CWE-1286, CWE-1287) as the primary defense** against this vulnerability.  Explain how proper input validation can prevent attacker-controlled data from reaching the `vsnprintf` function.\n3.  **Discuss mitigations for all relevant CWEs.**  Don't just focus on fixing the root cause; consider defense-in-depth measures.\n4.  **Address the likelihood of OS Command Injection and SQL Injection.**  Clarify whether the logged information is used in a way that could lead to these vulnerabilities. If so, add appropriate mitigations. If not, justify why these CWEs are not relevant.\n5.  **Consider the \"relationships\" between CWEs.**  For example, CWE-20 (Improper Input Validation) is a parent of CWE-134 (Use of Externally-Controlled Format String), as improper input validation allows the external control. CWE-134 can \"precede\" CWE-123 (Write-what-where Condition) or CWE-121 (Stack-based Buffer Overflow).\n6.  **Review and potentially adjust the confidence scores** of the secondary CWEs based on the likelihood of their occurrence.\n\nBy incorporating these suggestions, the analysis will be more comprehensive and provide a better understanding of the vulnerability and its potential impact.",
  "resolution": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-134 | Use of Externally-Controlled Format String | 1.0 | Base | Allowed | Primary CWE |\n| CWE-20 | Improper Input Validation | 0.9 | Class | Discouraged | Secondary CWE - Root cause enabling CWE-134 |\n| CWE-121 | Stack-based Buffer Overflow | 0.7 | Base | Allowed | Secondary CWE - Consequence of CWE-134 |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary **WEAKNESS** is CWE-134, which stems from a lack of input validation (CWE-20). The exploitation of CWE-134 can lead to CWE-121. CWE-20 is a parent of CWE-134, indicating that the absence of input validation is the root cause that enables the format string vulnerability. CWE-134 can precede CWE-121 because the format string vulnerability allows an attacker to write arbitrary data to memory, potentially overflowing a buffer.\n\n```mermaid\ngraph TD\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe134[\"CWE-134: Use of Externally-Controlled Format String\"]\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    \n    cwe134 -->|CANPRECEDE| cwe121\n    cwe20 -->|PARENTOF| cwe134\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe134 primary\n    class cwe20,cwe121 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **CWE-20** (Improper Input Validation) on the `default_key_id` and `key` HTTP parameters. This allows an attacker to inject format string specifiers. The injected format string is then used in a `log` function, leading to **CWE-134** (Use of Externally-Controlled Format String). Exploitation of the **CWE-134** vulnerability can then lead to **CWE-121** (Stack-based Buffer Overflow) if the attacker writes more data than the allocated buffer size.\n\n## Summary of Analysis\nThe initial analysis correctly identified **CWE-134** as the primary **WEAKNESS**. The criticism highlighted the importance of considering related CWEs, particularly the root cause (improper input validation) and potential consequences (buffer overflow).\n\nThe vulnerability description states: \"Four format string injection vulnerabilities exist in the web interface /action/wirelessConnect functionality of Abode Systems, Inc. iota All-In-One Security Kit 6.9Z and 6.9X. A specially-crafted HTTP request can lead to memory corruption, information disclosure and denial of service. An attacker can make an authenticated HTTP request to trigger these vulnerabilities.This vulnerability arises from format string injection via the `default_key_id` and `key` HTTP parameters, as used within the `/action/wirelessConnect` handler.\" This directly supports the classification of **CWE-134**.\n\nThe graph relationships influenced the selection of secondary CWEs. **CWE-20** was selected because it is a parent of **CWE-134**, representing the root cause. **CWE-121** was selected because it can be a consequence of exploiting **CWE-134**.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-134** is a Base CWE, which is the preferred level for mapping. **CWE-20** is a Class CWE, but it is included because it directly contributes to the vulnerability by representing the lack of input validation. **CWE-121** is a Base CWE and represents a concrete consequence of the **format string vulnerability**.",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "CWE-134",
        "name": "Use of Externally-Controlled Format String",
        "type": "Base",
        "original_content": "The product uses a function that accepts a format string as an argument, but the format string originates from an external source.",
        "relationships": [],
        "original_sparse_score": 1049.1423934968825,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.6944789978243214,
            "sparse": 1049.1423934968825,
            "graph": 1.9841758641534861
          },
          "normalized_scores": {
            "dense": 0.6944789978243214,
            "sparse": 0.839313914797506,
            "graph": 0.7086342371976737
          },
          "weighted_scores": {
            "dense": 0.24306764923851248,
            "sparse": 0.33572556591900243,
            "graph": 0.17715855929941843
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.6944789978243214,
              "query_max": 0.6944789978243214,
              "query_min": 0.5500349562446996,
              "normalized_score": 0.6944789978243214,
              "weight": 0.35,
              "weighted_score": 0.24306764923851248
            },
            "sparse": {
              "raw_score": 1049.1423934968825,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.839313914797506,
              "weight": 0.4,
              "weighted_score": 0.33572556591900243
            },
            "graph": {
              "raw_score": 1.9841758641534861,
              "query_max": 2.821,
              "query_min": 1.6848000000000003,
              "normalized_score": 0.7086342371976737,
              "weight": 0.25,
              "weighted_score": 0.17715855929941843
            }
          },
          "contribution_percentages": {
            "dense": 32.1538565622297,
            "sparse": 44.41097663408273,
            "graph": 23.43516680368758
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.7559517744569333,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.9827373067940133
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.9827373067940133
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 1.0810110374734148
            }
          },
          "combined_score": 1.0810110374734148
        }
      },
      "similarity": 1.0810110374734148
    },
    {
      "metadata": {
        "doc_id": "CWE-78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "relationships": [],
        "original_sparse_score": 438.49623419156376,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.594658009940272,
            "sparse": 438.49623419156376,
            "graph": 1.6853483850775388
          },
          "normalized_scores": {
            "dense": 0.594658009940272,
            "sparse": 0.350796987353251,
            "graph": 0.6019101375276925
          },
          "weighted_scores": {
            "dense": 0.20813030347909517,
            "sparse": 0.1403187949413004,
            "graph": 0.15047753438192313
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.594658009940272,
              "query_max": 0.6944789978243214,
              "query_min": 0.5500349562446996,
              "normalized_score": 0.594658009940272,
              "weight": 0.35,
              "weighted_score": 0.20813030347909517
            },
            "sparse": {
              "raw_score": 438.49623419156376,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.350796987353251,
              "weight": 0.4,
              "weighted_score": 0.1403187949413004
            },
            "graph": {
              "raw_score": 1.6853483850775388,
              "query_max": 2.821,
              "query_min": 1.6848000000000003,
              "normalized_score": 0.6019101375276925,
              "weight": 0.25,
              "weighted_score": 0.15047753438192313
            }
          },
          "contribution_percentages": {
            "dense": 41.71561303714952,
            "sparse": 28.124134034130936,
            "graph": 30.160252928719544
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4989266328023187,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6486046226430143
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6486046226430143
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.7134650849073159
            }
          },
          "combined_score": 0.7134650849073159
        }
      },
      "similarity": 0.7134650849073159
    },
    {
      "metadata": {
        "doc_id": "CWE-89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "relationships": [],
        "original_sparse_score": 461.6991093034345,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 461.6991093034345,
            "graph": 2.821
          },
          "normalized_scores": {
            "sparse": 0.3693592874427476,
            "graph": 1.0
          },
          "weighted_scores": {
            "sparse": 0.14774371497709904,
            "graph": 0.25
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 461.6991093034345,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3693592874427476,
              "weight": 0.4,
              "weighted_score": 0.14774371497709904
            },
            "graph": {
              "raw_score": 2.821,
              "query_max": 2.821,
              "query_min": 1.6848000000000003,
              "normalized_score": 1.0,
              "weight": 0.25,
              "weighted_score": 0.25
            }
          },
          "contribution_percentages": {
            "sparse": 37.14545558202113,
            "graph": 62.85454441797887
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.39774371497709904,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.5170668294702288
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.5170668294702288
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.5687735124172517
            }
          },
          "combined_score": 0.5687735124172517
        }
      },
      "similarity": 0.5687735124172517
    },
    {
      "metadata": {
        "doc_id": "CWE-190",
        "name": "Integer Overflow or Wraparound",
        "type": "Base",
        "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
        "relationships": [],
        "original_sparse_score": 411.09976478186786,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ],
          "suggestions": [
            {
              "CweID": "191",
              "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 411.09976478186786,
            "graph": 2.4699999999999998
          },
          "normalized_scores": {
            "sparse": 0.3288798118254943,
            "graph": 0.8821428571428571
          },
          "weighted_scores": {
            "sparse": 0.13155192473019772,
            "graph": 0.22053571428571428
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 411.09976478186786,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3288798118254943,
              "weight": 0.4,
              "weighted_score": 0.13155192473019772
            },
            "graph": {
              "raw_score": 2.4699999999999998,
              "query_max": 2.821,
              "query_min": 1.6848000000000003,
              "normalized_score": 0.8821428571428571,
              "weight": 0.25,
              "weighted_score": 0.22053571428571428
            }
          },
          "contribution_percentages": {
            "sparse": 37.3634033554505,
            "graph": 62.63659664454949
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.352087639015912,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.4577139307206856
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.4577139307206856
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ],
                "suggestions": [
                  {
                    "CweID": "191",
                    "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
                  }
                ]
              },
              "score_after": 0.5034853237927542
            }
          },
          "combined_score": 0.5034853237927542
        }
      },
      "similarity": 0.5034853237927542
    },
    {
      "metadata": {
        "doc_id": "CWE-798",
        "name": "Use of Hard-coded Credentials",
        "type": "Base",
        "original_content": "The product contains hard-coded credentials, such as a password or cryptographic key.",
        "relationships": [],
        "original_sparse_score": 406.13058514328804,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5582234901938073,
            "sparse": 406.13058514328804
          },
          "normalized_scores": {
            "dense": 0.5582234901938073,
            "sparse": 0.3249044681146304
          },
          "weighted_scores": {
            "dense": 0.19537822156783255,
            "sparse": 0.12996178724585217
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5582234901938073,
              "query_max": 0.6944789978243214,
              "query_min": 0.5500349562446996,
              "normalized_score": 0.5582234901938073,
              "weight": 0.35,
              "weighted_score": 0.19537822156783255
            },
            "sparse": {
              "raw_score": 406.13058514328804,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3249044681146304,
              "weight": 0.4,
              "weighted_score": 0.12996178724585217
            }
          },
          "contribution_percentages": {
            "dense": 60.05354898718327,
            "sparse": 39.946451012816716
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.32534000881368474,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.4229420114577902
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.4229420114577902
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.46523621260356923
            }
          },
          "combined_score": 0.46523621260356923
        }
      },
      "similarity": 0.46523621260356923
    },
    {
      "metadata": {
        "doc_id": "CWE-94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
        "relationships": [],
        "original_sparse_score": 396.268020016298,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
          "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
          "reasons": [
            "Frequent Misuse",
            "Frequent Misinterpretation"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5639515964479677,
            "sparse": 396.268020016298
          },
          "normalized_scores": {
            "dense": 0.5639515964479677,
            "sparse": 0.3170144160130384
          },
          "weighted_scores": {
            "dense": 0.19738305875678866,
            "sparse": 0.12680576640521538
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5639515964479677,
              "query_max": 0.6944789978243214,
              "query_min": 0.5500349562446996,
              "normalized_score": 0.5639515964479677,
              "weight": 0.35,
              "weighted_score": 0.19738305875678866
            },
            "sparse": {
              "raw_score": 396.268020016298,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3170144160130384,
              "weight": 0.4,
              "weighted_score": 0.12680576640521538
            }
          },
          "contribution_percentages": {
            "dense": 60.88521362762956,
            "sparse": 39.11478637237044
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.32418882516200404,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.4214454727106053
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.4214454727106053
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
                "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
                "reasons": [
                  "Frequent Misuse",
                  "Frequent Misinterpretation"
                ]
              },
              "score_after": 0.44251774634613555
            }
          },
          "combined_score": 0.44251774634613555
        }
      },
      "similarity": 0.44251774634613555
    },
    {
      "metadata": {
        "doc_id": "CWE-121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "relationships": [],
        "original_sparse_score": 383.0049745776551,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5692219068327155,
            "sparse": 383.0049745776551
          },
          "normalized_scores": {
            "dense": 0.5692219068327155,
            "sparse": 0.30640397966212407
          },
          "weighted_scores": {
            "dense": 0.1992276673914504,
            "sparse": 0.12256159186484963
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5692219068327155,
              "query_max": 0.6944789978243214,
              "query_min": 0.5500349562446996,
              "normalized_score": 0.5692219068327155,
              "weight": 0.35,
              "weighted_score": 0.1992276673914504
            },
            "sparse": {
              "raw_score": 383.0049745776551,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.30640397966212407,
              "weight": 0.4,
              "weighted_score": 0.12256159186484963
            }
          },
          "contribution_percentages": {
            "dense": 61.912466516717615,
            "sparse": 38.087533483282385
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.32178925925630003,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.38614711110756
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.38614711110756
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.42476182221831604
            }
          },
          "combined_score": 0.42476182221831604
        }
      },
      "similarity": 0.42476182221831604
    },
    {
      "metadata": {
        "doc_id": "CWE-20",
        "name": "Improper Input Validation",
        "type": "Class",
        "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
        "relationships": [],
        "original_sparse_score": 423.24892165842925,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "1284",
              "Comment": "Specified Quantity"
            },
            {
              "CweID": "1285",
              "Comment": "Specified Index, Position, or Offset"
            },
            {
              "CweID": "1286",
              "Comment": "Syntactic Correctness"
            },
            {
              "CweID": "1287",
              "Comment": "Specified Type"
            },
            {
              "CweID": "1288",
              "Comment": "Consistency within Input"
            },
            {
              "CweID": "1289",
              "Comment": "Unsafe Equivalence"
            },
            {
              "CweID": "116",
              "Comment": "Improper Encoding or Escaping of Output"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5500546367373591,
            "sparse": 423.24892165842925
          },
          "normalized_scores": {
            "dense": 0.5500546367373591,
            "sparse": 0.3385991373267434
          },
          "weighted_scores": {
            "dense": 0.19251912285807568,
            "sparse": 0.13543965493069737
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5500546367373591,
              "query_max": 0.6944789978243214,
              "query_min": 0.5500349562446996,
              "normalized_score": 0.5500546367373591,
              "weight": 0.35,
              "weighted_score": 0.19251912285807568
            },
            "sparse": {
              "raw_score": 423.24892165842925,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3385991373267434,
              "weight": 0.4,
              "weighted_score": 0.13543965493069737
            }
          },
          "contribution_percentages": {
            "dense": 58.70223207810301,
            "sparse": 41.297767921897
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.327958777788773,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.26236702223101843
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.26236702223101843
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
                "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
                "reasons": [
                  "Frequent Misuse"
                ],
                "suggestions": [
                  {
                    "CweID": "1284",
                    "Comment": "Specified Quantity"
                  },
                  {
                    "CweID": "1285",
                    "Comment": "Specified Index, Position, or Offset"
                  },
                  {
                    "CweID": "1286",
                    "Comment": "Syntactic Correctness"
                  },
                  {
                    "CweID": "1287",
                    "Comment": "Specified Type"
                  },
                  {
                    "CweID": "1288",
                    "Comment": "Consistency within Input"
                  },
                  {
                    "CweID": "1289",
                    "Comment": "Unsafe Equivalence"
                  },
                  {
                    "CweID": "116",
                    "Comment": "Improper Encoding or Escaping of Output"
                  }
                ]
              },
              "score_after": 0.20989361778481475
            }
          },
          "combined_score": 0.20989361778481475
        }
      },
      "similarity": 0.20989361778481475
    },
    {
      "metadata": {
        "doc_id": "CWE-1286",
        "name": "Improper Validation of Syntactic Correctness of Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.",
        "relationships": [],
        "original_sparse_score": 403.7035916789936,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 403.7035916789936
          },
          "normalized_scores": {
            "sparse": 0.32296287334319485
          },
          "weighted_scores": {
            "sparse": 0.12918514933727795
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 403.7035916789936,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.32296287334319485,
              "weight": 0.4,
              "weighted_score": 0.12918514933727795
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12918514933727795,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.16794069413846135
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16794069413846135
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.1847347635523075
            }
          },
          "combined_score": 0.1847347635523075
        }
      },
      "similarity": 0.1847347635523075
    },
    {
      "metadata": {
        "doc_id": "CWE-1287",
        "name": "Improper Validation of Specified Type of Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.",
        "relationships": [],
        "original_sparse_score": 400.5218114017397,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 400.5218114017397
          },
          "normalized_scores": {
            "sparse": 0.32041744912139175
          },
          "weighted_scores": {
            "sparse": 0.1281669796485567
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 400.5218114017397,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.32041744912139175,
              "weight": 0.4,
              "weighted_score": 0.1281669796485567
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.1281669796485567,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.16661707354312372
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16661707354312372
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.1832787808974361
            }
          },
          "combined_score": 0.1832787808974361
        }
      },
      "similarity": 0.1832787808974361
    },
    {
      "metadata": {
        "doc_id": "CWE-611",
        "name": "Improper Restriction of XML External Entity Reference",
        "type": "Base",
        "original_content": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
        "relationships": [],
        "original_sparse_score": 397.8087076065929,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 397.8087076065929
          },
          "normalized_scores": {
            "sparse": 0.3182469660852743
          },
          "weighted_scores": {
            "sparse": 0.12729878643410972
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 397.8087076065929,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3182469660852743,
              "weight": 0.4,
              "weighted_score": 0.12729878643410972
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12729878643410972,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.16548842236434264
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16548842236434264
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.1820372646007769
            }
          },
          "combined_score": 0.1820372646007769
        }
      },
      "similarity": 0.1820372646007769
    },
    {
      "metadata": {
        "doc_id": "CWE-93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "type": "Base",
        "original_content": "The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",
        "relationships": [],
        "original_sparse_score": 389.91066601008,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 389.91066601008
          },
          "normalized_scores": {
            "sparse": 0.311928532808064
          },
          "weighted_scores": {
            "sparse": 0.1247714131232256
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 389.91066601008,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.311928532808064,
              "weight": 0.4,
              "weighted_score": 0.1247714131232256
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.1247714131232256,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.16220283706019328
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16220283706019328
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17842312076621264
            }
          },
          "combined_score": 0.17842312076621264
        }
      },
      "similarity": 0.17842312076621264
    },
    {
      "metadata": {
        "doc_id": "CWE-502",
        "name": "Deserialization of Untrusted Data",
        "type": "Base",
        "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
        "relationships": [],
        "original_sparse_score": 388.6415665799866,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 388.6415665799866
          },
          "normalized_scores": {
            "sparse": 0.3109132532639893
          },
          "weighted_scores": {
            "sparse": 0.12436530130559571
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 388.6415665799866,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3109132532639893,
              "weight": 0.4,
              "weighted_score": 0.12436530130559571
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12436530130559571,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.16167489169727442
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16167489169727442
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17784238086700188
            }
          },
          "combined_score": 0.17784238086700188
        }
      },
      "similarity": 0.17784238086700188
    },
    {
      "metadata": {
        "doc_id": "CWE-787",
        "name": "Out-of-bounds Write",
        "type": "Base",
        "original_content": "The product writes data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 386.2413836273591,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 386.2413836273591
          },
          "normalized_scores": {
            "sparse": 0.30899310690188725
          },
          "weighted_scores": {
            "sparse": 0.1235972427607549
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 386.2413836273591,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.30899310690188725,
              "weight": 0.4,
              "weighted_score": 0.1235972427607549
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.1235972427607549,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.16067641558898138
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16067641558898138
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17674405714787952
            }
          },
          "combined_score": 0.17674405714787952
        }
      },
      "similarity": 0.17674405714787952
    },
    {
      "metadata": {
        "doc_id": "CWE-918",
        "name": "Server-Side Request Forgery (SSRF)",
        "type": "Base",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "relationships": [],
        "original_sparse_score": 384.7347618002201,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 384.7347618002201
          },
          "normalized_scores": {
            "sparse": 0.3077878094401761
          },
          "weighted_scores": {
            "sparse": 0.12311512377607044
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 384.7347618002201,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3077878094401761,
              "weight": 0.4,
              "weighted_score": 0.12311512377607044
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12311512377607044,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.16004966090889158
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16004966090889158
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17605462699978075
            }
          },
          "combined_score": 0.17605462699978075
        }
      },
      "similarity": 0.17605462699978075
    },
    {
      "metadata": {
        "doc_id": "CWE-23",
        "name": "Relative Path Traversal",
        "type": "Base",
        "original_content": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.",
        "relationships": [],
        "original_sparse_score": 383.7060787845201,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 383.7060787845201
          },
          "normalized_scores": {
            "sparse": 0.3069648630276161
          },
          "weighted_scores": {
            "sparse": 0.12278594521104645
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 383.7060787845201,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3069648630276161,
              "weight": 0.4,
              "weighted_score": 0.12278594521104645
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12278594521104645,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.1596217287743604
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.1596217287743604
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17558390165179646
            }
          },
          "combined_score": 0.17558390165179646
        }
      },
      "similarity": 0.17558390165179646
    },
    {
      "metadata": {
        "doc_id": "CWE-88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "type": "Base",
        "original_content": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
        "relationships": [],
        "original_sparse_score": 382.620180076187,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 382.620180076187
          },
          "normalized_scores": {
            "sparse": 0.3060961440609496
          },
          "weighted_scores": {
            "sparse": 0.12243845762437984
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 382.620180076187,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3060961440609496,
              "weight": 0.4,
              "weighted_score": 0.12243845762437984
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12243845762437984,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.15916999491169379
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.15916999491169379
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17508699440286318
            }
          },
          "combined_score": 0.17508699440286318
        }
      },
      "similarity": 0.17508699440286318
    },
    {
      "metadata": {
        "doc_id": "CWE-1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "relationships": [],
        "original_sparse_score": 377.82343186587275,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 377.82343186587275
          },
          "normalized_scores": {
            "sparse": 0.3022587454926982
          },
          "weighted_scores": {
            "sparse": 0.1209034981970793
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 377.82343186587275,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3022587454926982,
              "weight": 0.4,
              "weighted_score": 0.1209034981970793
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.1209034981970793,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.1571745476562031
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.1571745476562031
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17289200242182343
            }
          },
          "combined_score": 0.17289200242182343
        }
      },
      "similarity": 0.17289200242182343
    },
    {
      "metadata": {
        "doc_id": "CWE-138",
        "name": "Improper Neutralization of Special Elements",
        "type": "Class",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "relationships": [],
        "original_sparse_score": 398.5369674312472,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 398.5369674312472
          },
          "normalized_scores": {
            "sparse": 0.3188295739449978
          },
          "weighted_scores": {
            "sparse": 0.1275318295779991
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 398.5369674312472,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.3188295739449978,
              "weight": 0.4,
              "weighted_score": 0.1275318295779991
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.1275318295779991,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.10202546366239928
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.10202546366239928
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.08162037092991943
            }
          },
          "combined_score": 0.08162037092991943
        }
      },
      "similarity": 0.08162037092991943
    },
    {
      "metadata": {
        "doc_id": "CWE-287",
        "name": "Improper Authentication",
        "type": "Class",
        "original_content": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
        "relationships": [],
        "original_sparse_score": 376.9182499329777,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "1390",
              "Comment": "Weak Authentication"
            },
            {
              "CweID": "306",
              "Comment": "Missing Authentication for Critical Function"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 376.9182499329777
          },
          "normalized_scores": {
            "sparse": 0.30153459994638215
          },
          "weighted_scores": {
            "sparse": 0.12061383997855286
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 376.9182499329777,
              "query_max": 1049.1423934968825,
              "query_min": 376.9182499329777,
              "normalized_score": 0.30153459994638215,
              "weight": 0.4,
              "weighted_score": 0.12061383997855286
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.12061383997855286,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.09649107198284229
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.09649107198284229
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).",
                "comments": "Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.",
                "reasons": [
                  "Frequent Misuse"
                ],
                "suggestions": [
                  {
                    "CweID": "1390",
                    "Comment": "Weak Authentication"
                  },
                  {
                    "CweID": "306",
                    "Comment": "Missing Authentication for Critical Function"
                  }
                ]
              },
              "score_after": 0.07719285758627384
            }
          },
          "combined_score": 0.07719285758627384
        }
      },
      "similarity": 0.07719285758627384
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-134"
    ],
    "critic_additional": [
      "CWE-78",
      "CWE-190",
      "CWE-798",
      "CWE-123",
      "CWE-1286",
      "CWE-1287",
      "CWE-20",
      "CWE-121",
      "CWE-94",
      "CWE-89"
    ]
  }
}