{
  "cve_id": "CVE-2022-32039",
  "description": "Tenda M3 V1.0.0.12 was discovered to contain a stack overflow via the listN parameter in the function fromDhcpListClient.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "stack overflow",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Tenda M3",
    "version": "V1.0.0.12",
    "component": "function fromDhcpListClient"
  },
  "reference_content": "- **Root cause of vulnerability**: A stack overflow vulnerability exists in the `fromDhcpListClient` function within the `httpd` binary due to improper handling of the `listN` POST parameter. The program concatenates the `listN` POST parameter without checking the length of the input leading to a buffer overflow on the stack.\n- **Weaknesses/vulnerabilities present**: Stack overflow vulnerability due to lack of input validation.\n- **Impact of exploitation**:  A successful exploit of this vulnerability can cause a denial of service (DoS) by crashing the httpd process. Specifically, the overflow corrupts the `LISTEN` pointer, causing a crash in the `atoi` function.\n- **Attack vectors**: Sending a crafted HTTP POST request to the `/goform/DhcpListClient` endpoint, including an overly long `listN` parameter.\n- **Required attacker capabilities/position**: The attacker needs to be able to send HTTP requests to the vulnerable device. No authentication bypass was mentioned, so the attack likely requires a valid `user` cookie which implies that the attacker must either be authenticated, or be able to obtain a valid session cookie.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 0.95 | Variant | Allowed | This is the Primary CWE because it directly addresses the root cause described in the vulnerability: a buffer overflow on the stack. |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.75 | Base | Allowed-with-Review | Secondary candidate.  While a buffer overflow is present, this CWE is less specific than CWE-121 as it doesn't specify the stack. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.90\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* \"The vulnerability description explicitly states a **stack overflow** via the `listN` parameter in the `fromDhcpListClient` function. The CVE Reference Links Content Summary confirms that the root cause is a **stack overflow** vulnerability in the `fromDhcpListClient` function within the `httpd` binary due to improper handling of the `listN` POST parameter. The program concatenates the `listN` POST parameter without checking the length of the input leading to a buffer overflow on the stack.  The impact is a denial of service (DoS) by crashing the httpd process. Given the explicit mention of 'stack overflow' and the root cause analysis pointing towards uncontrolled concatenation of input leading to overflow on the stack, CWE-121 (Stack-based Buffer Overflow) is the most appropriate primary CWE. The MITRE mapping guidance for CWE-121 indicates that its usage is ALLOWED.\"\n  \n  - *Relationship Analysis:* \"CWE-121 is a variant of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer). The vulnerability involves writing data beyond the intended buffer on the stack. There are no direct parent-child relationships provided in the extracted information.\"\n\n- **Confidence Score:**  \n  - Confidence: 0.95 (High evidence from technical description and CVE reference materials)\n\n---\n\n- **Analysis and Justification:**  \n  - *Explanation:* \"CWE-120 (Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')) is considered as a secondary candidate because while a buffer overflow is present, it does not explicitly specify where this overflow is located (e.g. heap vs stack). Given that the vulnerability description explicitly points towards stack-based overflow, CWE-121 is a more accurate mapping.\"\n  \n  - *Relationship Analysis:* \"CWE-120 is a base CWE and is a parent of more specific buffer overflow types. It is related to CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer).\"\n\n- **Confidence Score:**  \n  - Confidence: 0.75 (Sufficient evidence, but less specific than CWE-121)\n\n---",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 0.95 | Variant | Allowed | This is the Primary CWE because it directly addresses the root cause described in the vulnerability: a buffer overflow on the stack. |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.75 | Base | Allowed-with-Review | Secondary candidate.  While a buffer overflow is present, this CWE is less specific than CWE-121 as it doesn't specify the stack. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.90\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* \"The vulnerability description explicitly states a **stack overflow** via the `listN` parameter in the `fromDhcpListClient` function. The CVE Reference Links Content Summary confirms that the root cause is a **stack overflow** vulnerability in the `fromDhcpListClient` function within the `httpd` binary due to improper handling of the `listN` POST parameter. The program concatenates the `listN` POST parameter without checking the length of the input leading to a buffer overflow on the stack.  The impact is a denial of service (DoS) by crashing the httpd process. Given the explicit mention of 'stack overflow' and the root cause analysis pointing towards uncontrolled concatenation of input leading to overflow on the stack, CWE-121 (Stack-based Buffer Overflow) is the most appropriate primary CWE. The MITRE mapping guidance for CWE-121 indicates that its usage is ALLOWED.\"\n  \n  - *Relationship Analysis:* \"CWE-121 is a variant of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer). The vulnerability involves writing data beyond the intended buffer on the stack. There are no direct parent-child relationships provided in the extracted information.\"\n\n- **Confidence Score:**  \n  - Confidence: 0.95 (High evidence from technical description and CVE reference materials)\n\n---\n\n- **Analysis and Justification:**  \n  - *Explanation:* \"CWE-120 (Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')) is considered as a secondary candidate because while a buffer overflow is present, it does not explicitly specify where this overflow is located (e.g. heap vs stack). Given that the vulnerability description explicitly points towards stack-based overflow, CWE-121 is a more accurate mapping.\"\n  \n  - *Relationship Analysis:* \"CWE-120 is a base CWE and is a parent of more specific buffer overflow types. It is related to CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer).\"\n\n- **Confidence Score:**  \n  - Confidence: 0.75 (Sufficient evidence, but less specific than CWE-121)\n\n---",
  "criticism": "Okay, here's a review of the analysis provided, incorporating the full CWE specifications.\n\n**Overall Assessment:**\n\nThe analysis is generally good and arrives at the correct primary CWE (CWE-121). The reasoning is sound and well-explained. However, there are a few points where the justification could be strengthened, and some additional, related CWEs could be considered, even if not as primary mappings.  The confidence scores are appropriate.\n\n**Detailed Review:**\n\n**1. CWE-121: Stack-based Buffer Overflow (Primary CWE)**\n\n*   **Confidence:** 0.95 (Appropriate given the explicit nature of the description)\n*   **Justification:** The justification is strong. The vulnerability description directly states \"stack overflow.\" The CVE reference links content summary confirms this.  The analysis correctly identifies that the unchecked concatenation of the `listN` parameter is the root cause. The impact (DoS) is consistent with stack overflows.\n*   **Relationships Analysis:** Correctly identifies the parent of CWE-121 as CWE-788, however, a much more appropriate parent is CWE-787 (Out-of-bounds Write)\n*   **Mitigations:** The analysis does not include mitigations but should include the following common mitigations:\n    *   **Input Validation:** Implement bounds checking on the `listN` parameter's length before concatenation.  Reject overly long inputs. This aligns with CWE-121's mitigation suggestion: \"Implement and perform bounds checking on input.\"\n    *   **Safe String Functions:** Use safer string handling functions that enforce length limits (e.g., `strncpy`, `strncat` with size limits).\n    *   **Compiler-Based Protections:**  Enable compiler flags such as `/GS` (Microsoft Visual Studio) or `FORTIFY_SOURCE` (GCC) to provide stack protection.\n\n**2. CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') (Secondary CWE)**\n\n*   **Confidence:** 0.75 (Appropriate - it's a valid, but less specific, option)\n*   **Justification:** The analysis correctly states that while a buffer overflow is present, CWE-120 is less specific than CWE-121 because it doesn't explicitly state that the overflow is on the stack. This is a valid distinction.\n*   **Mapping Guidance:** The analysis should consider the Mapping Guidance in CWE-120 which states, \"There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.\" The vulnerability fits this description.\n*   **Mitigations:** The analysis does not include mitigations but should include the following common mitigations:\n    *   **Input Validation:** The most relevant mitigation is, \"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\" in order to specify the maximum number of expected characters in a copy operation.\n    *   **Safe String Functions:** Use safer string handling functions that enforce length limits (e.g., `strncpy`, `strncat` with size limits). This is also a specific mitigation called out in CWE-120.\n    *   **Language Selection:** The mitigation \"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid\" from CWE-120 is also relevant here.\n\n**Additional Considerations and Possible CWEs:**\n\n1.  **CWE-20: Improper Input Validation:** While CWE-20 is often discouraged as a primary CWE due to its generality, it's highly relevant *in addition* to CWE-121. The *root cause* of the stack overflow is the *lack* of input validation on the `listN` parameter. The code fails to check the length of the input before concatenating it.  It can be argued that CWE-20 should be listed as a contributing factor.  Furthermore, given the mapping guidance, CWE-1284 (Improper Validation of Specified Quantity in Input) could be considered a more suitable mapping.\n\n2.  **CWE-170: Improper Null Termination:** If the string copy/concatenation operation does not properly null-terminate the resulting string, this could exacerbate the buffer overflow or lead to other issues.  This is less likely *if* the `atoi` function is crashing, but it's worth considering.\n\n3.  **CWE-131: Incorrect Calculation of Buffer Size:** While not the primary issue, it's possible there's also an incorrect calculation of the buffer size on the stack where the `listN` parameter is being copied. This could be a contributing factor.\n\n4.  **CWE-123: Write-what-where Condition**: This is a potential consequence of a successful stack overflow exploit. The attacker gains the ability to write arbitrary data to arbitrary memory locations, which is the definition of CWE-123.\n\n**Recommendations:**\n\n*   **Strengthen the Input Validation Argument:** Explicitly state that the *absence* of input validation is the root cause.  Consider adding CWE-20 or CWE-1284 as contributing factors.\n*   **Consider Additional Contributing CWEs:** Explore the applicability of CWE-170 and CWE-131, even if they are ultimately deemed not to be primary.\n*   **Add Mitigations:** Include specific mitigations for CWE-121 and CWE-120, and for any other CWEs you choose to add. These should include input validation, safe string functions, and compiler-based protections.\n*   **Review Relationships:** Make sure that the relationships to parent and child CWEs are correct and include the relationship of CWE-121 to CWE-787\n\nBy addressing these points, the analysis can become more comprehensive and provide a more complete picture of the vulnerability and how to address it.",
  "resolution": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 0.95 | Variant | Allowed | Primary CWE: Directly addresses the stack overflow described in the vulnerability. |\n| CWE-1284 | Improper Validation of Specified Quantity in Input | 0.85 | Base | Allowed | Secondary CWE: The root cause is the lack of input validation on the size of the `listN` parameter. |\n| CWE-787 | Out-of-bounds Write | 0.60 | Base | Allowed | Secondary CWE: Occurs due to writing data beyond the intended buffer boundary. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.90\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship impacting the decision is the parent-child relationship. CWE-121 (Stack-based Buffer Overflow) is a specific type of **CWE-787** (Out-of-bounds Write), which in turn is a type of **CWE-119** (Improper Restriction of Operations within the Bounds of a Memory Buffer). Choosing CWE-121 provides the most specific classification. The addition of CWE-1284 highlights the lack of input validation that leads to the overflow.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    \n    cwe121 -->|CHILDOF| cwe787\n    cwe787 -->|CHILDOF| cwe119\n    cwe1284 -->|CANPRECEDE| cwe121\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe1284,cwe787 secondary\n\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-1284** (Improper Validation of Specified Quantity in Input), which leads to **CWE-121** (Stack-based Buffer Overflow), a specific instance of **CWE-787** (Out-of-bounds Write). The lack of input validation allows an attacker to send an overly long `listN` parameter. This parameter is then concatenated without bounds checking, resulting in a write beyond the allocated buffer on the stack. The consequence is a denial of service due to the `httpd` process crashing.\n\n## Summary of Analysis\nThe initial analysis correctly identified **CWE-121** (Stack-based Buffer Overflow) as the primary weakness. The vulnerability description explicitly states a stack overflow, and the CVE reference confirms the root cause in the `fromDhcpListClient` function due to the improper handling of the `listN` POST parameter. The code concatenates the `listN` POST parameter without checking the length of the input leading to a buffer overflow on the stack.\n\nThe criticism suggested strengthening the input validation argument and considering additional CWEs. Based on the MITRE mapping guidance and the vulnerability details, **CWE-1284** (Improper Validation of Specified Quantity in Input) has been added to represent the root cause: the absence of input validation on the size of the `listN` parameter. Without input validation, **CWE-121** (Stack-based Buffer Overflow) is possible. **CWE-787** (Out-of-bounds Write) is added to represent the consequence of writing beyond the allocated buffer.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-121** is chosen because the description specifically states a stack overflow.\n**CWE-1284** is included because a specified quantity in the input is not validated.\nThese choices are based on direct evidence from the vulnerability description and the CWE specifications.",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "CWE-120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "type": "Base",
        "original_content": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
        "relationships": [],
        "original_sparse_score": 133.3424885225842,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.",
          "comments": "If the vulnerability being analyzed involves out-of-bounds reads, then consider CWE-125 or descendants. For root cause analysis: if there is any input validation, consider children of CWE-20 such as CWE-1284. If there is a calculation error for buffer sizes, consider CWE-131 or similar.",
          "reasons": [
            "Frequent Misuse"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4614396907382122,
            "sparse": 133.3424885225842,
            "graph": 2.3295999999999997
          },
          "normalized_scores": {
            "dense": 0.4614396907382122,
            "sparse": 0.10667399081806736,
            "graph": 0.832
          },
          "weighted_scores": {
            "dense": 0.16150389175837426,
            "sparse": 0.042669596327226944,
            "graph": 0.208
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4614396907382122,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.4614396907382122,
              "weight": 0.35,
              "weighted_score": 0.16150389175837426
            },
            "sparse": {
              "raw_score": 133.3424885225842,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.10667399081806736,
              "weight": 0.4,
              "weighted_score": 0.042669596327226944
            },
            "graph": {
              "raw_score": 2.3295999999999997,
              "query_max": 2.821,
              "query_min": 1.7680000000000005,
              "normalized_score": 0.832,
              "weight": 0.25,
              "weighted_score": 0.208
            }
          },
          "contribution_percentages": {
            "dense": 39.18347405324448,
            "sparse": 10.352338896276905,
            "graph": 50.46418705047863
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.41217348808560117,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.5358255345112816
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.5358255345112816
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.",
                "comments": "If the vulnerability being analyzed involves out-of-bounds reads, then consider CWE-125 or descendants. For root cause analysis: if there is any input validation, consider children of CWE-20 such as CWE-1284. If there is a calculation error for buffer sizes, consider CWE-131 or similar.",
                "reasons": [
                  "Frequent Misuse"
                ]
              },
              "score_after": 0.5626168112368457
            }
          },
          "combined_score": 0.5626168112368457
        }
      },
      "similarity": 0.5626168112368457
    },
    {
      "metadata": {
        "doc_id": "CWE-125",
        "name": "Out-of-bounds Read",
        "type": "Base",
        "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 133.46360743310126,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 133.46360743310126,
            "graph": 2.821
          },
          "normalized_scores": {
            "sparse": 0.106770885946481,
            "graph": 1.0
          },
          "weighted_scores": {
            "sparse": 0.042708354378592404,
            "graph": 0.25
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 133.46360743310126,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.106770885946481,
              "weight": 0.4,
              "weighted_score": 0.042708354378592404
            },
            "graph": {
              "raw_score": 2.821,
              "query_max": 2.821,
              "query_min": 1.7680000000000005,
              "normalized_score": 1.0,
              "weight": 0.25,
              "weighted_score": 0.25
            }
          },
          "contribution_percentages": {
            "sparse": 14.59075347174851,
            "graph": 85.40924652825149
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2927083543785924,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.3805208606921701
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3805208606921701
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.4185729467613872
            }
          },
          "combined_score": 0.4185729467613872
        }
      },
      "similarity": 0.4185729467613872
    },
    {
      "metadata": {
        "doc_id": "CWE-121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "relationships": [],
        "original_sparse_score": 202.5689230777045,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5845402616648069,
            "sparse": 202.5689230777045
          },
          "normalized_scores": {
            "dense": 0.5845402616648069,
            "sparse": 0.1620551384621636
          },
          "weighted_scores": {
            "dense": 0.2045890915826824,
            "sparse": 0.06482205538486545
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5845402616648069,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.5845402616648069,
              "weight": 0.35,
              "weighted_score": 0.2045890915826824
            },
            "sparse": {
              "raw_score": 202.5689230777045,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.1620551384621636,
              "weight": 0.4,
              "weighted_score": 0.06482205538486545
            }
          },
          "contribution_percentages": {
            "dense": 75.93935658769395,
            "sparse": 24.06064341230604
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.26941114696754787,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.3232933763610574
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3232933763610574
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.3556227139971632
            }
          },
          "combined_score": 0.3556227139971632
        }
      },
      "similarity": 0.3556227139971632
    },
    {
      "metadata": {
        "doc_id": "CWE-78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "relationships": [],
        "original_sparse_score": 124.52872288953631,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5118323999196281,
            "sparse": 124.52872288953631
          },
          "normalized_scores": {
            "dense": 0.5118323999196281,
            "sparse": 0.09962297831162904
          },
          "weighted_scores": {
            "dense": 0.17914133997186985,
            "sparse": 0.03984919132465162
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5118323999196281,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.5118323999196281,
              "weight": 0.35,
              "weighted_score": 0.17914133997186985
            },
            "sparse": {
              "raw_score": 124.52872288953631,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.09962297831162904,
              "weight": 0.4,
              "weighted_score": 0.03984919132465162
            }
          },
          "contribution_percentages": {
            "dense": 81.80323546925675,
            "sparse": 18.196764530743252
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.21899053129652146,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.2846876906854779
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.2846876906854779
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.31315645975402573
            }
          },
          "combined_score": 0.31315645975402573
        }
      },
      "similarity": 0.31315645975402573
    },
    {
      "metadata": {
        "doc_id": "CWE-193",
        "name": "Off-by-one Error",
        "type": "Base",
        "original_content": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
        "relationships": [],
        "original_sparse_score": 118.0662763669278,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.47001137464055,
            "sparse": 118.0662763669278
          },
          "normalized_scores": {
            "dense": 0.47001137464055,
            "sparse": 0.09445302109354224
          },
          "weighted_scores": {
            "dense": 0.16450398112419248,
            "sparse": 0.0377812084374169
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.47001137464055,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.47001137464055,
              "weight": 0.35,
              "weighted_score": 0.16450398112419248
            },
            "sparse": {
              "raw_score": 118.0662763669278,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.09445302109354224,
              "weight": 0.4,
              "weighted_score": 0.0377812084374169
            }
          },
          "contribution_percentages": {
            "dense": 81.32280048811484,
            "sparse": 18.67719951188517
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.20228518956160937,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.2629707464300922
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.2629707464300922
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.28926782107310145
            }
          },
          "combined_score": 0.28926782107310145
        }
      },
      "similarity": 0.28926782107310145
    },
    {
      "metadata": {
        "doc_id": "CWE-1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "Base",
        "original_content": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
        "relationships": [],
        "original_sparse_score": 110.30471292214101,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.46533629276816124,
            "sparse": 110.30471292214101
          },
          "normalized_scores": {
            "dense": 0.46533629276816124,
            "sparse": 0.0882437703377128
          },
          "weighted_scores": {
            "dense": 0.16286770246885643,
            "sparse": 0.03529750813508512
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.46533629276816124,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.46533629276816124,
              "weight": 0.35,
              "weighted_score": 0.16286770246885643
            },
            "sparse": {
              "raw_score": 110.30471292214101,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.0882437703377128,
              "weight": 0.4,
              "weighted_score": 0.03529750813508512
            }
          },
          "contribution_percentages": {
            "dense": 82.18783810361563,
            "sparse": 17.812161896384374
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.19816521060394154,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.25761477378512404
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.25761477378512404
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.28337625116363646
            }
          },
          "combined_score": 0.28337625116363646
        }
      },
      "similarity": 0.28337625116363646
    },
    {
      "metadata": {
        "doc_id": "CWE-126",
        "name": "Buffer Over-read",
        "type": "Variant",
        "original_content": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.",
        "relationships": [],
        "original_sparse_score": 110.94837988126133,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.48839249402299456,
            "sparse": 110.94837988126133
          },
          "normalized_scores": {
            "dense": 0.48839249402299456,
            "sparse": 0.08875870390500906
          },
          "weighted_scores": {
            "dense": 0.17093737290804809,
            "sparse": 0.03550348156200363
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.48839249402299456,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.48839249402299456,
              "weight": 0.35,
              "weighted_score": 0.17093737290804809
            },
            "sparse": {
              "raw_score": 110.94837988126133,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.08875870390500906,
              "weight": 0.4,
              "weighted_score": 0.03550348156200363
            }
          },
          "contribution_percentages": {
            "dense": 82.80210491613029,
            "sparse": 17.1978950838697
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.20644085447005173,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.24772902536406205
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.24772902536406205
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.2725019279004683
            }
          },
          "combined_score": 0.2725019279004683
        }
      },
      "similarity": 0.2725019279004683
    },
    {
      "metadata": {
        "doc_id": "CWE-122",
        "name": "Heap-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
        "relationships": [],
        "original_sparse_score": 130.83852103007393,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4685437363871896,
            "sparse": 130.83852103007393
          },
          "normalized_scores": {
            "dense": 0.4685437363871896,
            "sparse": 0.10467081682405915
          },
          "weighted_scores": {
            "dense": 0.16399030773551634,
            "sparse": 0.041868326729623664
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4685437363871896,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.4685437363871896,
              "weight": 0.35,
              "weighted_score": 0.16399030773551634
            },
            "sparse": {
              "raw_score": 130.83852103007393,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.10467081682405915,
              "weight": 0.4,
              "weighted_score": 0.041868326729623664
            }
          },
          "contribution_percentages": {
            "dense": 79.66161252433955,
            "sparse": 20.33838747566045
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.20585863446514002,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.24703036135816803
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.24703036135816803
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.27173339749398484
            }
          },
          "combined_score": 0.27173339749398484
        }
      },
      "similarity": 0.27173339749398484
    },
    {
      "metadata": {
        "doc_id": "CWE-674",
        "name": "Uncontrolled Recursion",
        "type": "Class",
        "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
        "relationships": [],
        "original_sparse_score": 146.1776285945188,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4753030863418912,
            "sparse": 146.1776285945188
          },
          "normalized_scores": {
            "dense": 0.4753030863418912,
            "sparse": 0.11694210287561504
          },
          "weighted_scores": {
            "dense": 0.16635608021966192,
            "sparse": 0.046776841150246024
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4753030863418912,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.4753030863418912,
              "weight": 0.35,
              "weighted_score": 0.16635608021966192
            },
            "sparse": {
              "raw_score": 146.1776285945188,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.11694210287561504,
              "weight": 0.4,
              "weighted_score": 0.046776841150246024
            }
          },
          "contribution_percentages": {
            "dense": 78.05273777059463,
            "sparse": 21.947262229405357
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.21313292136990794,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.17050633709592636
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.17050633709592636
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.17903165395072268
            }
          },
          "combined_score": 0.17903165395072268
        }
      },
      "similarity": 0.17903165395072268
    },
    {
      "metadata": {
        "doc_id": "CWE-77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "type": "Class",
        "original_content": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
        "relationships": [],
        "original_sparse_score": 136.24441539371674,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].",
          "comments": "Ensure that the analysis focuses on the root-cause error that allows the execution of commands, as there are many weaknesses that can lead to this consequence. See Terminology Notes. If the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "78",
              "Comment": "OS Command Injection"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4812206989171105,
            "sparse": 136.24441539371674
          },
          "normalized_scores": {
            "dense": 0.4812206989171105,
            "sparse": 0.10899553231497339
          },
          "weighted_scores": {
            "dense": 0.16842724462098865,
            "sparse": 0.04359821292598936
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4812206989171105,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.4812206989171105,
              "weight": 0.35,
              "weighted_score": 0.16842724462098865
            },
            "sparse": {
              "raw_score": 136.24441539371674,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.10899553231497339,
              "weight": 0.4,
              "weighted_score": 0.04359821292598936
            }
          },
          "contribution_percentages": {
            "dense": 79.43727445260699,
            "sparse": 20.562725547393004
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.21202545754697802,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.16962036603758243
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16962036603758243
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].",
                "comments": "Ensure that the analysis focuses on the root-cause error that allows the execution of commands, as there are many weaknesses that can lead to this consequence. See Terminology Notes. If the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.",
                "reasons": [
                  "Frequent Misuse"
                ],
                "suggestions": [
                  {
                    "CweID": "78",
                    "Comment": "OS Command Injection"
                  }
                ]
              },
              "score_after": 0.17810138433946157
            }
          },
          "combined_score": 0.17810138433946157
        }
      },
      "similarity": 0.17810138433946157
    },
    {
      "metadata": {
        "doc_id": "CWE-790",
        "name": "Improper Filtering of Special Elements",
        "type": "Class",
        "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
        "relationships": [],
        "original_sparse_score": 112.71644054862035,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.49219331304522373,
            "sparse": 112.71644054862035
          },
          "normalized_scores": {
            "dense": 0.49219331304522373,
            "sparse": 0.09017315243889629
          },
          "weighted_scores": {
            "dense": 0.1722676595658283,
            "sparse": 0.036069260975558515
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.49219331304522373,
              "query_max": 0.5845402616648069,
              "query_min": 0.4614396907382122,
              "normalized_score": 0.49219331304522373,
              "weight": 0.35,
              "weighted_score": 0.1722676595658283
            },
            "sparse": {
              "raw_score": 112.71644054862035,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.09017315243889629,
              "weight": 0.4,
              "weighted_score": 0.036069260975558515
            }
          },
          "contribution_percentages": {
            "dense": 82.68705283642068,
            "sparse": 17.312947163579313
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.2083369205413868,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.16666953643310944
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.16666953643310944
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.17500301325476492
            }
          },
          "combined_score": 0.17500301325476492
        }
      },
      "similarity": 0.17500301325476492
    },
    {
      "metadata": {
        "doc_id": "CWE-190",
        "name": "Integer Overflow or Wraparound",
        "type": "Base",
        "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
        "relationships": [],
        "original_sparse_score": 126.87871537528399,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ],
          "suggestions": [
            {
              "CweID": "191",
              "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 126.87871537528399
          },
          "normalized_scores": {
            "sparse": 0.10150297230022719
          },
          "weighted_scores": {
            "sparse": 0.040601188920090875
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 126.87871537528399,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.10150297230022719,
              "weight": 0.4,
              "weighted_score": 0.040601188920090875
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.040601188920090875,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.05278154559611814
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.05278154559611814
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ],
                "suggestions": [
                  {
                    "CweID": "191",
                    "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
                  }
                ]
              },
              "score_after": 0.058059700155729956
            }
          },
          "combined_score": 0.058059700155729956
        }
      },
      "similarity": 0.058059700155729956
    },
    {
      "metadata": {
        "doc_id": "CWE-1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "relationships": [],
        "original_sparse_score": 126.79673294854219,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 126.79673294854219
          },
          "normalized_scores": {
            "sparse": 0.10143738635883374
          },
          "weighted_scores": {
            "sparse": 0.0405749545435335
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 126.79673294854219,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.10143738635883374,
              "weight": 0.4,
              "weighted_score": 0.0405749545435335
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.0405749545435335,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.05274744090659355
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.05274744090659355
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.05802218499725291
            }
          },
          "combined_score": 0.05802218499725291
        }
      },
      "similarity": 0.05802218499725291
    },
    {
      "metadata": {
        "doc_id": "CWE-770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "type": "Base",
        "original_content": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
        "relationships": [],
        "original_sparse_score": 120.78692264095929,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 120.78692264095929
          },
          "normalized_scores": {
            "sparse": 0.09662953811276744
          },
          "weighted_scores": {
            "sparse": 0.038651815245106975
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 120.78692264095929,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.09662953811276744,
              "weight": 0.4,
              "weighted_score": 0.038651815245106975
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.038651815245106975,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.05024735981863907
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.05024735981863907
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.055272095800502984
            }
          },
          "combined_score": 0.055272095800502984
        }
      },
      "similarity": 0.055272095800502984
    },
    {
      "metadata": {
        "doc_id": "CWE-124",
        "name": "Buffer Underwrite ('Buffer Underflow')",
        "type": "Base",
        "original_content": "The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
        "relationships": [],
        "original_sparse_score": 119.2543734675893,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 119.2543734675893
          },
          "normalized_scores": {
            "sparse": 0.09540349877407145
          },
          "weighted_scores": {
            "sparse": 0.03816139950962858
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 119.2543734675893,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.09540349877407145,
              "weight": 0.4,
              "weighted_score": 0.03816139950962858
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.03816139950962858,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.049609819362517155
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.049609819362517155
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.05457080129876887
            }
          },
          "combined_score": 0.05457080129876887
        }
      },
      "similarity": 0.05457080129876887
    },
    {
      "metadata": {
        "doc_id": "CWE-191",
        "name": "Integer Underflow (Wrap or Wraparound)",
        "type": "Base",
        "original_content": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
        "relationships": [],
        "original_sparse_score": 116.7187729862625,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 116.7187729862625
          },
          "normalized_scores": {
            "sparse": 0.09337501838901
          },
          "weighted_scores": {
            "sparse": 0.037350007355604
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 116.7187729862625,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.09337501838901,
              "weight": 0.4,
              "weighted_score": 0.037350007355604
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.037350007355604,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.04855500956228521
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.04855500956228521
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.05341051051851373
            }
          },
          "combined_score": 0.05341051051851373
        }
      },
      "similarity": 0.05341051051851373
    },
    {
      "metadata": {
        "doc_id": "CWE-835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "type": "Base",
        "original_content": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
        "relationships": [],
        "original_sparse_score": 113.24994375963112,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 113.24994375963112
          },
          "normalized_scores": {
            "sparse": 0.0905999550077049
          },
          "weighted_scores": {
            "sparse": 0.03623998200308196
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 113.24994375963112,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.0905999550077049,
              "weight": 0.4,
              "weighted_score": 0.03623998200308196
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.03623998200308196,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.04711197660400655
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.04711197660400655
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.05182317426440721
            }
          },
          "combined_score": 0.05182317426440721
        }
      },
      "similarity": 0.05182317426440721
    },
    {
      "metadata": {
        "doc_id": "CWE-197",
        "name": "Numeric Truncation Error",
        "type": "Base",
        "original_content": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
        "relationships": [],
        "original_sparse_score": 110.62331825974391,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 110.62331825974391
          },
          "normalized_scores": {
            "sparse": 0.08849865460779513
          },
          "weighted_scores": {
            "sparse": 0.035399461843118055
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 110.62331825974391,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.08849865460779513,
              "weight": 0.4,
              "weighted_score": 0.035399461843118055
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.035399461843118055,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.046019300396053474
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.046019300396053474
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.050621230435658825
            }
          },
          "combined_score": 0.050621230435658825
        }
      },
      "similarity": 0.050621230435658825
    },
    {
      "metadata": {
        "doc_id": "CWE-789",
        "name": "Memory Allocation with Excessive Size Value",
        "type": "Variant",
        "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",
        "relationships": [],
        "original_sparse_score": 114.25435124248598,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 114.25435124248598
          },
          "normalized_scores": {
            "sparse": 0.09140348099398879
          },
          "weighted_scores": {
            "sparse": 0.03656139239759552
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 114.25435124248598,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.09140348099398879,
              "weight": 0.4,
              "weighted_score": 0.03656139239759552
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.03656139239759552,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.04387367087711462
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.04387367087711462
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.04826103796482609
            }
          },
          "combined_score": 0.04826103796482609
        }
      },
      "similarity": 0.04826103796482609
    },
    {
      "metadata": {
        "doc_id": "CWE-119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "type": "Class",
        "original_content": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
        "relationships": [],
        "original_sparse_score": 121.06792539216693,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.",
          "comments": "Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.",
          "reasons": [
            "Frequent Misuse"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 121.06792539216693
          },
          "normalized_scores": {
            "sparse": 0.09685434031373354
          },
          "weighted_scores": {
            "sparse": 0.03874173612549342
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 121.06792539216693,
              "query_max": 202.5689230777045,
              "query_min": 110.30471292214101,
              "normalized_score": 0.09685434031373354,
              "weight": 0.4,
              "weighted_score": 0.03874173612549342
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.03874173612549342,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.030993388900394738
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.030993388900394738
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.",
                "comments": "Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.",
                "reasons": [
                  "Frequent Misuse"
                ]
              },
              "score_after": 0.024794711120315793
            }
          },
          "combined_score": 0.024794711120315793
        }
      },
      "similarity": 0.024794711120315793
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-120",
      "CWE-121",
      "CWE-119"
    ],
    "critic_additional": [
      "CWE-788",
      "CWE-787",
      "CWE-123",
      "CWE-1284",
      "CWE-20",
      "CWE-170",
      "CWE-131"
    ]
  }
}