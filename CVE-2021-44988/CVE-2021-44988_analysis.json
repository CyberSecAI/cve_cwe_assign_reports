{
  "cve_id": "CVE-2021-44988",
  "description": "Jerryscript v3.0.0 and below was discovered to contain a stack overflow via ecma_find_named_property in ecma-helpers.c.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "stack overflow",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Jerryscript",
    "version": "v3.0.0 and below",
    "component": "ecma-helpers.c"
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability:\n\n**Vulnerability:** Stack overflow in `ecma_find_named_property` (ecma-helpers.c) and `ecma_lcache_lookup` (ecma-lcache.c) within the JerryScript engine.\n\n**Root Cause:**\n- The vulnerability in `ecma_find_named_property` is triggered by a recursive call.\n- The vulnerability in `ecma_lcache_lookup` is caused by a potential recursive call within the function. Both are triggered by a crafted JavaScript payload using `Array.prototype.flat`.\n\n**Weaknesses:**\n- Lack of stack overflow checks within the `ecma_find_named_property` and `ecma_lcache_lookup` functions.\n- The `Array.prototype.flat` function can be used to create recursive data structures that trigger the stack overflow.\n\n**Impact of Exploitation:**\n- Stack overflow leading to denial of service (crashes) of the JerryScript engine.\n- Potentially other consequences based on the ability to control the stack through crafted input.\n\n**Attack Vectors:**\n- Crafting a malicious JavaScript payload.\n- Executing the payload within a vulnerable instance of the JerryScript engine.\n\n**Required Attacker Capabilities/Position:**\n- Ability to provide input that is processed by the JerryScript engine.\n- Knowledge of the vulnerable function and how it is impacted by `Array.prototype.flat`.\n- Ability to execute arbitrary Javascript code.\n\n**Additional Details:**\n- Both issues are triggered by the same javascript snippet.\n- The issue was found by the OWL337 team.\n- Both issues were resolved by adding stack overflow checks in `Array.prototype.{flat, flatMap}`\n\nThe provided content gives more detail than the standard CVE description, explaining the root cause, test case and exploit, and the file location of the vulnerable code.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 0.95 | Variant | Allowed | Primary CWE |\n| CWE-674 | Uncontrolled Recursion | 0.75 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability description clearly states a **stack overflow** in Jerryscript v3.0.0 and below, specifically within `ecma_find_named_property` in `ecma-helpers.c`. This directly corresponds to CWE-121 (Stack-based Buffer Overflow), which is a variant-level CWE that describes a buffer overflow occurring on the stack. The CVE Reference Links Content Summary confirms that the root cause involves a recursive call triggered by a crafted JavaScript payload, which further supports the selection of CWE-121. The summary states a \"lack of stack overflow checks\" which directly contributes to this weakness. The `Array.prototype.flat` is the vector used. The retriever results also list CWE-121 as a candidate, although not the top-ranked one, but the direct mention of a stack overflow makes it the most appropriate choice.\n\n  - *Relationship Analysis:* CWE-121 is a variant of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer), providing a more specific classification for this vulnerability. Given the information provided, it isn't clear that a buffer is copied without checking the size, so CWE-120 is less applicable. CWE-787 (Out-of-bounds Write) is more general, and CWE-121 provides better specificity. CWE-674 (Uncontrolled Recursion) is a Class-level CWE that could contribute to the stack overflow.\n\n- **Confidence Score:**  \n  - Confidence: 0.95 (High confidence due to direct mention of stack overflow and confirmation from CVE reference materials)\n\n---\n\n- **Analysis and Justification:**  \n  - *Explanation:* The recursive nature of the vulnerability, as highlighted in the CVE Reference Links Content Summary (\"The vulnerability in `ecma_find_named_property` is triggered by a recursive call\"), makes CWE-674 (Uncontrolled Recursion) a relevant, although secondary, consideration. While the primary issue is the stack overflow itself (CWE-121), the lack of control over the recursion depth directly contributes to the overflow. Therefore, CWE-674 captures an important aspect of the root cause. As a Class-level CWE, it's less specific than CWE-121 but still relevant in understanding the overall vulnerability. The retriever results also lists CWE-674 as a candidate.\n\n  - *Relationship Analysis:* CWE-674 is a Class-level CWE, and there might be more specific Base-level children that could be more appropriate, but none of them perfectly fit the description. It describes the condition that allows the stack overflow to occur.\n\n- **Confidence Score:**  \n  - Confidence: 0.75 (Medium confidence because while recursion is a contributing factor, the core vulnerability is the stack overflow.)",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 0.95 | Variant | Allowed | Primary CWE |\n| CWE-674 | Uncontrolled Recursion | 0.75 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability description clearly states a **stack overflow** in Jerryscript v3.0.0 and below, specifically within `ecma_find_named_property` in `ecma-helpers.c`. This directly corresponds to CWE-121 (Stack-based Buffer Overflow), which is a variant-level CWE that describes a buffer overflow occurring on the stack. The CVE Reference Links Content Summary confirms that the root cause involves a recursive call triggered by a crafted JavaScript payload, which further supports the selection of CWE-121. The summary states a \"lack of stack overflow checks\" which directly contributes to this weakness. The `Array.prototype.flat` is the vector used. The retriever results also list CWE-121 as a candidate, although not the top-ranked one, but the direct mention of a stack overflow makes it the most appropriate choice.\n\n  - *Relationship Analysis:* CWE-121 is a variant of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer), providing a more specific classification for this vulnerability. Given the information provided, it isn't clear that a buffer is copied without checking the size, so CWE-120 is less applicable. CWE-787 (Out-of-bounds Write) is more general, and CWE-121 provides better specificity. CWE-674 (Uncontrolled Recursion) is a Class-level CWE that could contribute to the stack overflow.\n\n- **Confidence Score:**  \n  - Confidence: 0.95 (High confidence due to direct mention of stack overflow and confirmation from CVE reference materials)\n\n---\n\n- **Analysis and Justification:**  \n  - *Explanation:* The recursive nature of the vulnerability, as highlighted in the CVE Reference Links Content Summary (\"The vulnerability in `ecma_find_named_property` is triggered by a recursive call\"), makes CWE-674 (Uncontrolled Recursion) a relevant, although secondary, consideration. While the primary issue is the stack overflow itself (CWE-121), the lack of control over the recursion depth directly contributes to the overflow. Therefore, CWE-674 captures an important aspect of the root cause. As a Class-level CWE, it's less specific than CWE-121 but still relevant in understanding the overall vulnerability. The retriever results also lists CWE-674 as a candidate.\n\n  - *Relationship Analysis:* CWE-674 is a Class-level CWE, and there might be more specific Base-level children that could be more appropriate, but none of them perfectly fit the description. It describes the condition that allows the stack overflow to occur.\n\n- **Confidence Score:**  \n  - Confidence: 0.75 (Medium confidence because while recursion is a contributing factor, the core vulnerability is the stack overflow.)",
  "criticism": "Okay, here's a review of the provided analysis, incorporating the full CWE specifications you've included.\n\n**Overall Assessment:**\n\nThe analysis is good. The primary mapping to CWE-121 (Stack-based Buffer Overflow) is accurate and well-justified. The inclusion of CWE-674 (Uncontrolled Recursion) as a secondary contributing factor is also reasonable and adds valuable context. The confidence levels assigned are appropriate.\n\n**Detailed Critique:**\n\n**1. CWE-121: Stack-based Buffer Overflow**\n\n*   **Correctness:** Excellent. The vulnerability is a stack overflow, and CWE-121 is the most specific CWE that directly describes this condition. The use of `Array.prototype.flat` to trigger excessive recursion leading to the overflow perfectly aligns with the concept of writing past the intended boundary of a stack-allocated buffer. The mitigation discussion is also appropriate and useful.\n*   **Abstraction Level:** Variant - Correct and appropriate as it's the specific type of overflow.\n*   **Mapping Guidance:** The Mapping Guidance of CWE-121 allows for it being used and the rationale makes sense.\n*   **Potential Mitigations:** The mitigation strategies listed in the CWE specification are relevant:\n    *   Environment Hardening (automatic buffer overflow detection) is a good general defense-in-depth measure.\n    *   Abstraction libraries can help, although not a complete solution.\n    *   Implementing bounds checking on input is crucial to prevent the overflow.\n*   **Confidence Score:** 0.95 is well-justified given the explicit mention of \"stack overflow\" in the vulnerability description and further detail provided in the CVE Reference Links Content Summary.\n\n**2. CWE-674: Uncontrolled Recursion**\n\n*   **Correctness:**  A solid secondary mapping. The description highlights the recursive nature of the exploit. The `Array.prototype.flat` technique exploits a lack of control over recursion depth. Without the recursion, there wouldn't be a stack overflow.\n*   **Abstraction Level:** Class-level. This is the correct abstraction level, but it would be ideal to find a more specific Base-level CWE. However, based on the description and without access to the code, CWE-674 is the best available choice.\n*   **Mapping Guidance:** Correctly identified as \"Allowed-with-Review\" because it's a Class and a more specific base could exist.  The comment \"Examine children of this entry to see if there is a better fit\" is followed.\n*   **Potential Mitigations:**\n    *   Ensuring an end condition is reached is the most effective mitigation for this CWE.\n    *   Limiting recursion depth is crucial to avoid a stack overflow.\n    *   Increasing stack size is a weak mitigation, as it only postpones the inevitable if the recursion is truly uncontrolled.\n*   **Confidence Score:** 0.75 is appropriate. While recursion is a contributing factor, it's not the primary vulnerability (the overflow is).\n\n**Review of Retriever Results:**\n\nThe retriever results are interesting, but not necessarily directly applicable to the mapping. Here's a brief analysis:\n\n*   **CWE-770: Allocation of Resources Without Limits or Throttling:**  While uncontrolled recursion *can* lead to resource exhaustion, it's not the most direct representation of the vulnerability. CWE-121 and CWE-674 capture the specific nature of the problem better.\n*   **CWE-125: Out-of-bounds Read:** Not as applicable as CWE-121 because the core issue is writing outside the buffer, not reading from it.\n*   **CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'):** Less applicable.  The vulnerability isn't necessarily a simple buffer copy, but is the result of a recursive process increasing stack size.\n*   **CWE-787: Out-of-bounds Write** A candidate, but it is better to specify that it is stack-based, so CWE-121 is more appropriate.\n\n**Suggestions for Improvement:**\n\n1.  **Consider Chaining:**  While you have two CWEs, you could consider a more explicit chain to represent the relationship: `CWE-674 -> CWE-121`. This visually represents that uncontrolled recursion leads to a stack-based buffer overflow.  However, this might be more applicable as a research concept than a formal CWE mapping, depending on the goals of the analysis.\n\n2.  **Double Check Child CWEs for CWE-674:** Although it is unlikely that a specific child of CWE-674 will fit, it is good to make sure that one doesn't apply.\n\n**Revised Summary Table (with Chaining Concept):**\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 0.95 | Variant | Allowed | Primary CWE |\n| CWE-674 | Uncontrolled Recursion | 0.75 | Class | Allowed-with-Review | Secondary Candidate, Root Cause, Contributes to CWE-121 |\n\n**Conclusion:**\n\nThe analysis is sound and well-reasoned. The primary mapping to CWE-121 is accurate, and the secondary mapping to CWE-674 provides valuable context. The confidence levels are appropriate, and the suggestions for improvement are relatively minor. This analysis provides a clear and useful understanding of the vulnerability.",
  "resolution": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 0.95 | Variant | Allowed | Primary CWE |\n| CWE-674 | Uncontrolled Recursion | 0.75 | Class | Allowed-with-Review | Secondary Candidate, Root Cause, Contributes to CWE-121 |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the hierarchical relationship between CWE-121 (Variant) and CWE-119 (Base), where CWE-121 is a `CHILDOF` CWE-119. This ensures the classification is at the most specific level. The analysis also recognizes that CWE-674 (Uncontrolled Recursion) contributes to the **weakness** by creating the conditions for the **stack overflow**. There is also a CANPRECEDE relationship between CWE-674 and CWE-121, which can be inferred.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe674[\"CWE-674: Uncontrolled Recursion\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe674 -->|CANPRECEDE| cwe121\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe674 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-674 (Uncontrolled Recursion)**, leading to **CWE-121 (Stack-based Buffer Overflow)**. The lack of proper control over the recursion depth (CWE-674) causes excessive memory allocation on the stack, eventually overflowing the buffer (CWE-121). The final impact is a denial of service or potential arbitrary code execution.\n\n## Summary of Analysis\nThe initial analysis and criticism are both well-reasoned and supported by the evidence provided in the vulnerability description and CVE reference materials. The analysis correctly identifies **CWE-121 (Stack-based Buffer Overflow)** as the primary **weakness** due to the explicit mention of a \"stack overflow\" in the description. The inclusion of **CWE-674 (Uncontrolled Recursion)** as a secondary contributing factor is also justified, as the recursive nature of the exploit contributes to the overflow.\n\nThe graph relationships support the selection of CWE-121 as the primary CWE, as it is a more specific variant of **CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer)**. The analysis also considers potential alternative classifications, such as **CWE-120 (Buffer Copy without Checking Size)** and **CWE-787 (Out-of-bounds Write)**, but correctly determines that CWE-121 provides the optimal level of specificity.\n\nThe selection of CWEs is based on the provided evidence, including the vulnerability description (\"Jerryscript v3.0.0 and below was discovered to contain a stack overflow via ecma_find_named_property in ecma-helpers.c\") and the CVE Reference Links Content Summary (\"The vulnerability in `ecma_find_named_property` is triggered by a recursive call\"). The CWEs are also at the optimal level of specificity, with CWE-121 being a Variant-level CWE and CWE-674 being a Class-level CWE that captures an important contributing factor.",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "CWE-770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "type": "Base",
        "original_content": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
        "relationships": [],
        "original_sparse_score": 130.54761093052159,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 130.54761093052159,
            "graph": 3.055
          },
          "normalized_scores": {
            "sparse": 0.10443808874441726,
            "graph": 1.0
          },
          "weighted_scores": {
            "sparse": 0.041775235497766905,
            "graph": 0.25
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 130.54761093052159,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.10443808874441726,
              "weight": 0.4,
              "weighted_score": 0.041775235497766905
            },
            "graph": {
              "raw_score": 3.055,
              "query_max": 3.8870000000000005,
              "query_min": 1.7144157889169425,
              "normalized_score": 1.0,
              "weight": 0.25,
              "weighted_score": 0.25
            }
          },
          "contribution_percentages": {
            "sparse": 14.317608355794345,
            "graph": 85.68239164420565
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2917752354977669,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.37930780614709697
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.37930780614709697
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.4172385867618067
            }
          },
          "combined_score": 0.4172385867618067
        }
      },
      "similarity": 0.4172385867618067
    },
    {
      "metadata": {
        "doc_id": "CWE-125",
        "name": "Out-of-bounds Read",
        "type": "Base",
        "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 121.04254696449689,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 121.04254696449689,
            "graph": 3.8870000000000005
          },
          "normalized_scores": {
            "sparse": 0.09683403757159752,
            "graph": 1.0
          },
          "weighted_scores": {
            "sparse": 0.03873361502863901,
            "graph": 0.25
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 121.04254696449689,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.09683403757159752,
              "weight": 0.4,
              "weighted_score": 0.03873361502863901
            },
            "graph": {
              "raw_score": 3.8870000000000005,
              "query_max": 3.8870000000000005,
              "query_min": 1.7144157889169425,
              "normalized_score": 1.0,
              "weight": 0.25,
              "weighted_score": 0.25
            }
          },
          "contribution_percentages": {
            "sparse": 13.415000198295957,
            "graph": 86.58499980170403
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.28873361502863903,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.37535369953723074
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.37535369953723074
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.41288906949095383
            }
          },
          "combined_score": 0.41288906949095383
        }
      },
      "similarity": 0.41288906949095383
    },
    {
      "metadata": {
        "doc_id": "CWE-120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "type": "Base",
        "original_content": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
        "relationships": [],
        "original_sparse_score": 119.18859390736185,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.",
          "comments": "If the vulnerability being analyzed involves out-of-bounds reads, then consider CWE-125 or descendants. For root cause analysis: if there is any input validation, consider children of CWE-20 such as CWE-1284. If there is a calculation error for buffer sizes, consider CWE-131 or similar.",
          "reasons": [
            "Frequent Misuse"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 119.18859390736185,
            "graph": 2.821
          },
          "normalized_scores": {
            "sparse": 0.09535087512588948,
            "graph": 1.0
          },
          "weighted_scores": {
            "sparse": 0.03814035005035579,
            "graph": 0.25
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 119.18859390736185,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.09535087512588948,
              "weight": 0.4,
              "weighted_score": 0.03814035005035579
            },
            "graph": {
              "raw_score": 2.821,
              "query_max": 3.8870000000000005,
              "query_min": 1.7144157889169425,
              "normalized_score": 1.0,
              "weight": 0.25,
              "weighted_score": 0.25
            }
          },
          "contribution_percentages": {
            "sparse": 13.236726492381349,
            "graph": 86.76327350761866
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.28814035005035576,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.3745824550654625
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3745824550654625
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.",
                "comments": "If the vulnerability being analyzed involves out-of-bounds reads, then consider CWE-125 or descendants. For root cause analysis: if there is any input validation, consider children of CWE-20 such as CWE-1284. If there is a calculation error for buffer sizes, consider CWE-131 or similar.",
                "reasons": [
                  "Frequent Misuse"
                ]
              },
              "score_after": 0.39331157781873566
            }
          },
          "combined_score": 0.39331157781873566
        }
      },
      "similarity": 0.39331157781873566
    },
    {
      "metadata": {
        "doc_id": "CWE-126",
        "name": "Buffer Over-read",
        "type": "Variant",
        "original_content": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.",
        "relationships": [],
        "original_sparse_score": 98.44723818901588,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 98.44723818901588,
            "graph": 2.2704
          },
          "normalized_scores": {
            "sparse": 0.07875779055121271,
            "graph": 0.8108571428571429
          },
          "weighted_scores": {
            "sparse": 0.031503116220485086,
            "graph": 0.20271428571428574
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 98.44723818901588,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.07875779055121271,
              "weight": 0.4,
              "weighted_score": 0.031503116220485086
            },
            "graph": {
              "raw_score": 2.2704,
              "query_max": 3.8870000000000005,
              "query_min": 1.7144157889169425,
              "normalized_score": 0.8108571428571429,
              "weight": 0.25,
              "weighted_score": 0.20271428571428574
            }
          },
          "contribution_percentages": {
            "sparse": 13.450373866438268,
            "graph": 86.54962613356174
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2342174019347708,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.28106088232172494
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.28106088232172494
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.30916697055389747
            }
          },
          "combined_score": 0.30916697055389747
        }
      },
      "similarity": 0.30916697055389747
    },
    {
      "metadata": {
        "doc_id": "CWE-121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "relationships": [],
        "original_sparse_score": 149.4213833068045,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5034502200333979,
            "sparse": 149.4213833068045
          },
          "normalized_scores": {
            "dense": 0.5034502200333979,
            "sparse": 0.1195371066454436
          },
          "weighted_scores": {
            "dense": 0.17620757701168926,
            "sparse": 0.047814842658177446
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5034502200333979,
              "query_max": 0.5583409067287118,
              "query_min": 0.48727951196926267,
              "normalized_score": 0.5034502200333979,
              "weight": 0.35,
              "weighted_score": 0.17620757701168926
            },
            "sparse": {
              "raw_score": 149.4213833068045,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.1195371066454436,
              "weight": 0.4,
              "weighted_score": 0.047814842658177446
            }
          },
          "contribution_percentages": {
            "dense": 78.65622435083044,
            "sparse": 21.343775649169558
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.22402241966986672,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.26882690360384004
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.26882690360384004
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.2957095939642241
            }
          },
          "combined_score": 0.2957095939642241
        }
      },
      "similarity": 0.2957095939642241
    },
    {
      "metadata": {
        "doc_id": "CWE-1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "Base",
        "original_content": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
        "relationships": [],
        "original_sparse_score": 102.71786530965932,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4898968912203694,
            "sparse": 102.71786530965932
          },
          "normalized_scores": {
            "dense": 0.4898968912203694,
            "sparse": 0.08217429224772746
          },
          "weighted_scores": {
            "dense": 0.1714639119271293,
            "sparse": 0.03286971689909098
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4898968912203694,
              "query_max": 0.5583409067287118,
              "query_min": 0.48727951196926267,
              "normalized_score": 0.4898968912203694,
              "weight": 0.35,
              "weighted_score": 0.1714639119271293
            },
            "sparse": {
              "raw_score": 102.71786530965932,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.08217429224772746,
              "weight": 0.4,
              "weighted_score": 0.03286971689909098
            }
          },
          "contribution_percentages": {
            "dense": 83.91370177884635,
            "sparse": 16.086298221153655
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.20433362882622028,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.2656337174740864
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.2656337174740864
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.292197089221495
            }
          },
          "combined_score": 0.292197089221495
        }
      },
      "similarity": 0.292197089221495
    },
    {
      "metadata": {
        "doc_id": "CWE-674",
        "name": "Uncontrolled Recursion",
        "type": "Class",
        "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
        "relationships": [],
        "original_sparse_score": 149.65608659309115,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5583409067287118,
            "sparse": 149.65608659309115
          },
          "normalized_scores": {
            "dense": 0.5583409067287118,
            "sparse": 0.11972486927447291
          },
          "weighted_scores": {
            "dense": 0.19541931735504914,
            "sparse": 0.04788994770978917
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5583409067287118,
              "query_max": 0.5583409067287118,
              "query_min": 0.48727951196926267,
              "normalized_score": 0.5583409067287118,
              "weight": 0.35,
              "weighted_score": 0.19541931735504914
            },
            "sparse": {
              "raw_score": 149.65608659309115,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.11972486927447291,
              "weight": 0.4,
              "weighted_score": 0.04788994770978917
            }
          },
          "contribution_percentages": {
            "dense": 80.31725273715853,
            "sparse": 19.682747262841474
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.2433092650648383,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.19464741205187064
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.19464741205187064
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.2043797826544642
            }
          },
          "combined_score": 0.2043797826544642
        }
      },
      "similarity": 0.2043797826544642
    },
    {
      "metadata": {
        "doc_id": "CWE-170",
        "name": "Improper Null Termination",
        "type": "Base",
        "original_content": "The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.",
        "relationships": [],
        "original_sparse_score": 115.95916684398186,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 115.95916684398186
          },
          "normalized_scores": {
            "sparse": 0.0927673334751855
          },
          "weighted_scores": {
            "sparse": 0.0371069333900742
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 115.95916684398186,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.0927673334751855,
              "weight": 0.4,
              "weighted_score": 0.0371069333900742
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.0371069333900742,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.04823901340709646
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.04823901340709646
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.05306291474780611
            }
          },
          "combined_score": 0.05306291474780611
        }
      },
      "similarity": 0.05306291474780611
    },
    {
      "metadata": {
        "doc_id": "CWE-124",
        "name": "Buffer Underwrite ('Buffer Underflow')",
        "type": "Base",
        "original_content": "The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
        "relationships": [],
        "original_sparse_score": 113.27075646563358,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 113.27075646563358
          },
          "normalized_scores": {
            "sparse": 0.09061660517250686
          },
          "weighted_scores": {
            "sparse": 0.036246642069002744
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 113.27075646563358,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.09061660517250686,
              "weight": 0.4,
              "weighted_score": 0.036246642069002744
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.036246642069002744,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.04712063468970357
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.04712063468970357
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.051832698158673925
            }
          },
          "combined_score": 0.051832698158673925
        }
      },
      "similarity": 0.051832698158673925
    },
    {
      "metadata": {
        "doc_id": "CWE-193",
        "name": "Off-by-one Error",
        "type": "Base",
        "original_content": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
        "relationships": [],
        "original_sparse_score": 110.74823454541134,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 110.74823454541134
          },
          "normalized_scores": {
            "sparse": 0.08859858763632907
          },
          "weighted_scores": {
            "sparse": 0.03543943505453163
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 110.74823454541134,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.08859858763632907,
              "weight": 0.4,
              "weighted_score": 0.03543943505453163
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.03543943505453163,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.04607126557089112
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.04607126557089112
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.05067839212798023
            }
          },
          "combined_score": 0.05067839212798023
        }
      },
      "similarity": 0.05067839212798023
    },
    {
      "metadata": {
        "doc_id": "CWE-190",
        "name": "Integer Overflow or Wraparound",
        "type": "Base",
        "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
        "relationships": [],
        "original_sparse_score": 107.21618532058164,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ],
          "suggestions": [
            {
              "CweID": "191",
              "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 107.21618532058164
          },
          "normalized_scores": {
            "sparse": 0.08577294825646531
          },
          "weighted_scores": {
            "sparse": 0.034309179302586125
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 107.21618532058164,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.08577294825646531,
              "weight": 0.4,
              "weighted_score": 0.034309179302586125
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.034309179302586125,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.04460193309336197
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.04460193309336197
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ],
                "suggestions": [
                  {
                    "CweID": "191",
                    "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
                  }
                ]
              },
              "score_after": 0.04906212640269817
            }
          },
          "combined_score": 0.04906212640269817
        }
      },
      "similarity": 0.04906212640269817
    },
    {
      "metadata": {
        "doc_id": "CWE-191",
        "name": "Integer Underflow (Wrap or Wraparound)",
        "type": "Base",
        "original_content": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
        "relationships": [],
        "original_sparse_score": 106.58662181840698,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 106.58662181840698
          },
          "normalized_scores": {
            "sparse": 0.08526929745472558
          },
          "weighted_scores": {
            "sparse": 0.03410771898189024
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 106.58662181840698,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.08526929745472558,
              "weight": 0.4,
              "weighted_score": 0.03410771898189024
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.03410771898189024,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.044340034676457314
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.044340034676457314
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.04877403814410305
            }
          },
          "combined_score": 0.04877403814410305
        }
      },
      "similarity": 0.04877403814410305
    },
    {
      "metadata": {
        "doc_id": "CWE-122",
        "name": "Heap-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
        "relationships": [],
        "original_sparse_score": 115.42254806493752,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 115.42254806493752
          },
          "normalized_scores": {
            "sparse": 0.09233803845195002
          },
          "weighted_scores": {
            "sparse": 0.036935215380780005
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 115.42254806493752,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.09233803845195002,
              "weight": 0.4,
              "weighted_score": 0.036935215380780005
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.036935215380780005,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.044322258456936006
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.044322258456936006
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.04875448430262961
            }
          },
          "combined_score": 0.04875448430262961
        }
      },
      "similarity": 0.04875448430262961
    },
    {
      "metadata": {
        "doc_id": "CWE-1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "relationships": [],
        "original_sparse_score": 106.01880612786228,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 106.01880612786228
          },
          "normalized_scores": {
            "sparse": 0.08481504490228982
          },
          "weighted_scores": {
            "sparse": 0.033926017960915926
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 106.01880612786228,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.08481504490228982,
              "weight": 0.4,
              "weighted_score": 0.033926017960915926
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.033926017960915926,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.044103823349190704
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.044103823349190704
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.04851420568410978
            }
          },
          "combined_score": 0.04851420568410978
        }
      },
      "similarity": 0.04851420568410978
    },
    {
      "metadata": {
        "doc_id": "CWE-835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "type": "Base",
        "original_content": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
        "relationships": [],
        "original_sparse_score": 99.65339704402241,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 99.65339704402241
          },
          "normalized_scores": {
            "sparse": 0.07972271763521793
          },
          "weighted_scores": {
            "sparse": 0.031889087054087176
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 99.65339704402241,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.07972271763521793,
              "weight": 0.4,
              "weighted_score": 0.031889087054087176
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.031889087054087176,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.04145581317031333
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.04145581317031333
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.04560139448734466
            }
          },
          "combined_score": 0.04560139448734466
        }
      },
      "similarity": 0.04560139448734466
    },
    {
      "metadata": {
        "doc_id": "CWE-197",
        "name": "Numeric Truncation Error",
        "type": "Base",
        "original_content": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
        "relationships": [],
        "original_sparse_score": 93.96559808810234,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 93.96559808810234
          },
          "normalized_scores": {
            "sparse": 0.07517247847048188
          },
          "weighted_scores": {
            "sparse": 0.030068991388192752
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 93.96559808810234,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.07517247847048188,
              "weight": 0.4,
              "weighted_score": 0.030068991388192752
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.030068991388192752,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.03908968880465058
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.03908968880465058
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.04299865768511564
            }
          },
          "combined_score": 0.04299865768511564
        }
      },
      "similarity": 0.04299865768511564
    },
    {
      "metadata": {
        "doc_id": "CWE-789",
        "name": "Memory Allocation with Excessive Size Value",
        "type": "Variant",
        "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",
        "relationships": [],
        "original_sparse_score": 95.83645348764946,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 95.83645348764946
          },
          "normalized_scores": {
            "sparse": 0.07666916279011957
          },
          "weighted_scores": {
            "sparse": 0.030667665116047828
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 95.83645348764946,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.07666916279011957,
              "weight": 0.4,
              "weighted_score": 0.030667665116047828
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.030667665116047828,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.03680119813925739
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.03680119813925739
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.04048131795318313
            }
          },
          "combined_score": 0.04048131795318313
        }
      },
      "similarity": 0.04048131795318313
    },
    {
      "metadata": {
        "doc_id": "CWE-119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "type": "Class",
        "original_content": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
        "relationships": [],
        "original_sparse_score": 101.3467497123492,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.",
          "comments": "Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.",
          "reasons": [
            "Frequent Misuse"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 101.3467497123492
          },
          "normalized_scores": {
            "sparse": 0.08107739976987935
          },
          "weighted_scores": {
            "sparse": 0.032430959907951744
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 101.3467497123492,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.08107739976987935,
              "weight": 0.4,
              "weighted_score": 0.032430959907951744
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.032430959907951744,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.025944767926361398
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.025944767926361398
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.",
                "comments": "Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.",
                "reasons": [
                  "Frequent Misuse"
                ]
              },
              "score_after": 0.02075581434108912
            }
          },
          "combined_score": 0.02075581434108912
        }
      },
      "similarity": 0.02075581434108912
    },
    {
      "metadata": {
        "doc_id": "CWE-20",
        "name": "Improper Input Validation",
        "type": "Class",
        "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
        "relationships": [],
        "original_sparse_score": 95.10703951287685,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "1284",
              "Comment": "Specified Quantity"
            },
            {
              "CweID": "1285",
              "Comment": "Specified Index, Position, or Offset"
            },
            {
              "CweID": "1286",
              "Comment": "Syntactic Correctness"
            },
            {
              "CweID": "1287",
              "Comment": "Specified Type"
            },
            {
              "CweID": "1288",
              "Comment": "Consistency within Input"
            },
            {
              "CweID": "1289",
              "Comment": "Unsafe Equivalence"
            },
            {
              "CweID": "116",
              "Comment": "Improper Encoding or Escaping of Output"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 95.10703951287685
          },
          "normalized_scores": {
            "sparse": 0.07608563161030148
          },
          "weighted_scores": {
            "sparse": 0.030434252644120592
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 95.10703951287685,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.07608563161030148,
              "weight": 0.4,
              "weighted_score": 0.030434252644120592
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.030434252644120592,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.024347402115296474
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.024347402115296474
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
                "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
                "reasons": [
                  "Frequent Misuse"
                ],
                "suggestions": [
                  {
                    "CweID": "1284",
                    "Comment": "Specified Quantity"
                  },
                  {
                    "CweID": "1285",
                    "Comment": "Specified Index, Position, or Offset"
                  },
                  {
                    "CweID": "1286",
                    "Comment": "Syntactic Correctness"
                  },
                  {
                    "CweID": "1287",
                    "Comment": "Specified Type"
                  },
                  {
                    "CweID": "1288",
                    "Comment": "Consistency within Input"
                  },
                  {
                    "CweID": "1289",
                    "Comment": "Unsafe Equivalence"
                  },
                  {
                    "CweID": "116",
                    "Comment": "Improper Encoding or Escaping of Output"
                  }
                ]
              },
              "score_after": 0.01947792169223718
            }
          },
          "combined_score": 0.01947792169223718
        }
      },
      "similarity": 0.01947792169223718
    },
    {
      "metadata": {
        "doc_id": "CWE-682",
        "name": "Incorrect Calculation",
        "type": "Pillar",
        "original_content": "The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.",
        "relationships": [],
        "original_sparse_score": 96.00028279751191,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "This CWE entry is extremely high-level, a Pillar. In many cases, lower-level children or descendants are more appropriate. However, sometimes this weakness is forced to be used due to the lack of in-depth weakness research. See Research Gaps.",
          "comments": "Where feasible, consider children or descendants of this entry instead.",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 96.00028279751191
          },
          "normalized_scores": {
            "sparse": 0.07680022623800953
          },
          "weighted_scores": {
            "sparse": 0.030720090495203814
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 96.00028279751191,
              "query_max": 149.65608659309115,
              "query_min": 93.96559808810234,
              "normalized_score": 0.07680022623800953,
              "weight": 0.4,
              "weighted_score": 0.030720090495203814
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.6,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.030720090495203814,
            "abstraction": {
              "type": "pillar",
              "factor": 0.6,
              "score_after": 0.01843205429712229
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.01843205429712229
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "This CWE entry is extremely high-level, a Pillar. In many cases, lower-level children or descendants are more appropriate. However, sometimes this weakness is forced to be used due to the lack of in-depth weakness research. See Research Gaps.",
                "comments": "Where feasible, consider children or descendants of this entry instead.",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.014745643437697832
            }
          },
          "combined_score": 0.014745643437697832
        }
      },
      "similarity": 0.014745643437697832
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-674",
      "CWE-119",
      "CWE-120",
      "CWE-787",
      "CWE-121"
    ],
    "critic_additional": [
      "CWE-770",
      "CWE-125"
    ]
  }
}