{
  "cve_id": "CVE-2022-35289",
  "description": "A write-what-where condition in hermes caused by an integer overflow, prior to commit 5b6255ae049fa4641791e47fad994e8e8c4da374 allows attackers to potentially execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.",
  "key_phrases": {
    "rootcause": "integer overflow",
    "weakness": "write-what-where",
    "impact": "execute arbitrary code",
    "vector": "crafted JavaScript",
    "attacker": "attackers",
    "product": "Hermes",
    "version": "prior to commit 5b6255ae049fa4641791e47fad994e8e8c4da374",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:** Integer overflow\n\n**Weaknesses/Vulnerabilities Present:**\n*   A \"write-what-where\" condition exists in the Hermes JavaScript engine due to an integer overflow. This means an attacker can control the memory address to write to, and the data written.\n\n**Impact of Exploitation:**\n*   Successful exploitation could allow an attacker to execute arbitrary code.\n\n**Attack Vectors:**\n*   Crafted JavaScript code.\n\n**Required Attacker Capabilities/Position:**\n*   The attacker needs to be able to execute JavaScript code within an application using a vulnerable version of the Hermes engine.\n*  The application must permit the evaluation of untrusted JavaScript\n\n**Additional Notes:**\n*   The vulnerability is present in Hermes versions prior to commit `5b6255ae049fa4641791e47fad994e8e8c4da374`.\n*   The provided text explicitly mentions that most React Native applications are not affected by this vulnerability, indicating that the vulnerability is only exploitable under specific circumstances where the application using the Hermes engine permits the evaluation of untrusted JavaScript.\n\nThe content from github.com provides the specific commit that addresses the issue, highlighting that the fix adds a guard against potential overflows. This is more technical detail than the CVE description and other provided content.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-190 | Integer Overflow or Wraparound | 0.9 | Base | Primary | Allowed |\n| CWE-123 | Write-what-where Condition | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability description explicitly states that the **root cause** is an **integer overflow**, which directly corresponds to CWE-190 (Integer Overflow or Wraparound). The description matches the CWE definition, as a calculation produces an integer overflow. This leads to a **write-what-where** condition (CWE-123), where the attacker can control the memory address and data to be written. The Retriever Results also list CWE-190 as the top candidate with a high score (0.7318). CWE-190 is a Base level CWE, and its usage is \"Allowed\" according to MITRE.\n  - *Relationship Analysis:* CWE-190 does not have direct parent-child relationships. However, the overflow can lead to other weaknesses. In this case, it leads to CWE-123. CWE-123 is triggered *after* the integer overflow, making it a secondary weakness.\n\n- **Confidence Score:**  \n  - Confidence: 0.9 (High confidence due to explicit mention of \"integer overflow\" and high retriever score for CWE-190)\n\n---\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability description identifies a **write-what-where** condition, matching CWE-123 (Write-what-where Condition). This condition arises because the **integer overflow** allows the attacker to control the memory address and data being written. This is a direct consequence of the **integer overflow**. The Retriever Results also includes CWE-123 as a relevant candidate. CWE-123 is a Base level CWE, and its usage is \"Allowed\" according to MITRE.\n  - *Relationship Analysis:* CWE-123 is a base CWE. The relationship analysis shows that it is a consequence of the integer overflow (CWE-190) and enables arbitrary code execution.\n\n- **Confidence Score:**  \n  - Confidence: 0.7 (Slightly lower confidence because this is a consequence of the primary weakness CWE-190)",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-190 | Integer Overflow or Wraparound | 0.9 | Base | Primary | Allowed |\n| CWE-123 | Write-what-where Condition | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability description explicitly states that the **root cause** is an **integer overflow**, which directly corresponds to CWE-190 (Integer Overflow or Wraparound). The description matches the CWE definition, as a calculation produces an integer overflow. This leads to a **write-what-where** condition (CWE-123), where the attacker can control the memory address and data to be written. The Retriever Results also list CWE-190 as the top candidate with a high score (0.7318). CWE-190 is a Base level CWE, and its usage is \"Allowed\" according to MITRE.\n  - *Relationship Analysis:* CWE-190 does not have direct parent-child relationships. However, the overflow can lead to other weaknesses. In this case, it leads to CWE-123. CWE-123 is triggered *after* the integer overflow, making it a secondary weakness.\n\n- **Confidence Score:**  \n  - Confidence: 0.9 (High confidence due to explicit mention of \"integer overflow\" and high retriever score for CWE-190)\n\n---\n- **Analysis and Justification:**  \n  - *Explanation:* The vulnerability description identifies a **write-what-where** condition, matching CWE-123 (Write-what-where Condition). This condition arises because the **integer overflow** allows the attacker to control the memory address and data being written. This is a direct consequence of the **integer overflow**. The Retriever Results also includes CWE-123 as a relevant candidate. CWE-123 is a Base level CWE, and its usage is \"Allowed\" according to MITRE.\n  - *Relationship Analysis:* CWE-123 is a base CWE. The relationship analysis shows that it is a consequence of the integer overflow (CWE-190) and enables arbitrary code execution.\n\n- **Confidence Score:**  \n  - Confidence: 0.7 (Slightly lower confidence because this is a consequence of the primary weakness CWE-190)",
  "criticism": "Okay, I've reviewed the analysis and the full CWE specifications provided. Here's my critique:\n\n**Overall Assessment:**\n\nThe analysis is generally sound, and the primary CWE mapping to CWE-190 (Integer Overflow or Wraparound) is correct and well-justified. The secondary mapping to CWE-123 (Write-what-where Condition) is also appropriate, as it represents a direct consequence of the integer overflow. The confidence levels are reasonable.\n\n**Detailed Review:**\n\n*   **CWE-190 (Integer Overflow or Wraparound):**\n    *   **Mapping Justification:** The justification is strong. The vulnerability description explicitly mentions \"integer overflow,\" making this a clear and direct match. The analysis correctly identifies that CWE-190 is a Base level CWE, which is the preferred level of abstraction.\n    *   **Evidence Strength:** The evidence is high, primarily due to the explicit statement in the vulnerability description.\n    *   **Confidence Score:** The confidence score of 0.9 is justified.\n    * **CWE Examples:** The provided examples for CWE-190 from the database provide useful context of how the CWE is used in the real world.\n    *   **Relationships:** The relationship analysis is accurate. The description appropriately highlights that CWE-190 doesn't have direct parent-child relationships but can lead to other weaknesses, specifically CWE-123 in this case.\n    *   **Mitigations:** The mitigations listed in the full CWE specifications are applicable.  Language selection (using languages with automatic bounds checking or libraries for safe integer handling) and enforcing strict protocol definitions are relevant preventative measures.\n\n*   **CWE-123 (Write-what-where Condition):**\n    *   **Mapping Justification:** The justification is well-reasoned.  The analysis correctly identifies that the integer overflow leads to the attacker being able to control the memory address and data written, which is the definition of a write-what-where condition.\n    *   **Evidence Strength:** The evidence is strong, though slightly weaker than CWE-190 because it's a *consequence* of the primary weakness.\n    *   **Confidence Score:** The confidence score of 0.7 is appropriate, reflecting the fact that it's a secondary weakness.\n    *   **Relationships:** The relationship to CWE-190 is properly established.  It is critical to highlight that CWE-123 is the *result* of the integer overflow (CWE-190).\n    *   **Mitigations:** The mitigations provided in the CWE specifications, such as using languages with appropriate memory abstractions, are relevant to preventing this type of vulnerability.\n\n**Retriever Results Review**\n\n*   The Retriever Results table is generally useful.\n*   It correctly identifies CWE-190 as the top candidate.\n*   While CWE-681 (Incorrect Conversion between Numeric Types) is ranked second, it's not as directly relevant as CWE-190 or CWE-123 in this specific case. Although CWE-681 can *lead* to integer overflows, the description doesn't explicitly mention incorrect type conversion as the root cause.\n*   CWE-125 (Out-of-bounds Read) is not applicable given the description. There is no indication of data being read outside the intended buffer.\n*   CWE-502 (Deserialization of Untrusted Data) is irrelevant because the vulnerability doesn't involve deserialization.\n*   CWE-122 (Heap-based Buffer Overflow) could be considered a possible result of the integer overflow and write-what-where, but it's not as precise as CWE-123. It would depend on the specifics of how the memory corruption occurs.\n\n**Potential Improvements/Suggestions:**\n\n1.  **Explicitly State the Vulnerability Chain:** The analysis could benefit from a more explicit statement of the vulnerability chain: \"An integer overflow (CWE-190) allows attackers to manipulate memory addresses, leading to a write-what-where condition (CWE-123), enabling arbitrary code execution.\" This clarifies the relationship between the CWEs.\n\n2.  **Consider CWE-787 (Out-of-bounds Write):** While CWE-123 is a good high-level description of the memory corruption that's occurring, CWE-787 provides a more specific, direct representation. If the \"write-what-where\" is manifesting as writing outside the bounds of a particular buffer, then adding CWE-787 with a lower confidence score could be considered. You could classify CWE-787 as a *potential* consequence rather than a definitive one.\n\n3.  **Avoid CWE-20 Implications**: It could be argued that there is an instance of CWE-20 because the program should be validating the size or quantity of the input. The full CWE specifications for CWE-20 suggest against using it, and instead opting for CWE-1284 or another more specific CWE. A stronger argument can be made for the weakness being the integer overflow itself rather than just the lack of input validation.\n\n4. **Review the complete chain for the specific vulnerability:** In this case, an integer overflow leads to memory corruption in the form of the write-what-where condition which allows the attacker to execute arbitrary code (CWE-123 or 787). The analysis should review the complete chain of events that are possible in the exploit in the vulnerability description.\n\n5. **Relevance of Exploitation Conditions:** The analysis should mention the note that the vulnerability is only exploitable if untrusted javascript is used in Hermes, as this is a crucial part of the vulnerability.\n\n**Revised Summary Table:**\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-190 | Integer Overflow or Wraparound | 0.9 | Base | Primary | Allowed |\n| CWE-123 | Write-what-where Condition | 0.7 | Base | Secondary | Allowed |\n\n**Revised Conclusion:**\n\nThe analysis is a good starting point.  By clarifying the vulnerability chain, considering the potential addition of CWE-787, and emphasizing the importance of javascript evaluation, the analysis could be even stronger and more informative. The high-level CWE-20 can be safely omitted. Overall, the core finding of CWE-190 as the primary weakness is accurate.",
  "resolution": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-190 | Integer Overflow or Wraparound | 0.9 | Base | Primary | Allowed |\n| CWE-787 | Out-of-bounds Write | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship impacting the decision is that CWE-787 is a potential consequence of CWE-190. The **integer overflow** (**CWE-190**) can lead to an **out-of-bounds write** (**CWE-787**). CWE-787 is a child of CWE-119 (Improper Restriction of Operations Within the Bounds of a Memory Buffer). The analysis did not go for CWE-123 (Write-what-where Condition) due to the better fit of CWE-787, and the guidance in the criticism.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe190[\"CWE-190: Integer Overflow or Wraparound\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    \n    cwe787 -->|CHILDOF| cwe119\n    cwe190 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe190 primary\n    class cwe787 secondary\n    class cwe119 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **integer overflow** (**CWE-190**). This allows an attacker to manipulate memory addresses and write data out of bounds (**CWE-787**), leading to potential arbitrary code execution. There are no apparent missing links, but a key condition for exploitation is the application's use of untrusted JavaScript.\n\n## Summary of Analysis\nThe analysis of both the initial assessment and criticism led to a refined conclusion. The primary **weakness** remains **CWE-190 (Integer Overflow or Wraparound)** because the vulnerability description explicitly states \"integer overflow.\" The criticism's suggestion to consider **CWE-787 (Out-of-bounds Write)** was adopted because it offers a more specific description of the memory corruption than CWE-123.\n\nThe decision is based on the evidence from the vulnerability description: \"A write-what-where condition in hermes caused by an integer overflow... allows attackers to potentially execute arbitrary code.\"\n\nThe graph relationships influenced the decision by highlighting the potential chain of events. The **integer overflow (CWE-190)** *precedes* the **out-of-bounds write (CWE-787)**.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-190** is a base CWE, which is preferred for root causes. **CWE-787** is also a base CWE and provides a more accurate description of the memory corruption than **CWE-123**. The analysis omitted CWE-20 due to the weakness being the integer overflow itself rather than the lack of input validation.\n\nThe note about the exploitation conditions (untrusted JavaScript evaluation) is important context, but doesn't directly map to a specific CWE.",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "CWE-190",
        "name": "Integer Overflow or Wraparound",
        "type": "Base",
        "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
        "relationships": [],
        "original_sparse_score": 544.429202487058,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ],
          "suggestions": [
            {
              "CweID": "191",
              "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5128054912577065,
            "sparse": 544.429202487058,
            "graph": 1.7704721250736069
          },
          "normalized_scores": {
            "dense": 0.5128054912577065,
            "sparse": 0.4355433619896464,
            "graph": 0.6323114732405739
          },
          "weighted_scores": {
            "dense": 0.17948192194019724,
            "sparse": 0.17421734479585857,
            "graph": 0.15807786831014348
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5128054912577065,
              "query_max": 0.5585966241718552,
              "query_min": 0.4800176723669316,
              "normalized_score": 0.5128054912577065,
              "weight": 0.35,
              "weighted_score": 0.17948192194019724
            },
            "sparse": {
              "raw_score": 544.429202487058,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.4355433619896464,
              "weight": 0.4,
              "weighted_score": 0.17421734479585857
            },
            "graph": {
              "raw_score": 1.7704721250736069,
              "query_max": 2.821,
              "query_min": 1.7680000000000005,
              "normalized_score": 0.6323114732405739,
              "weight": 0.25,
              "weighted_score": 0.15807786831014348
            }
          },
          "contribution_percentages": {
            "dense": 35.07032840066116,
            "sparse": 34.041642907733966,
            "graph": 30.88802869160488
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.5117771350461993,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6653102755600591
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6653102755600591
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ],
                "suggestions": [
                  {
                    "CweID": "191",
                    "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."
                  }
                ]
              },
              "score_after": 0.731841303116065
            }
          },
          "combined_score": 0.731841303116065
        }
      },
      "similarity": 0.731841303116065
    },
    {
      "metadata": {
        "doc_id": "CWE-681",
        "name": "Incorrect Conversion between Numeric Types",
        "type": "Base",
        "original_content": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",
        "relationships": [],
        "original_sparse_score": 419.7055062632197,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4800176723669316,
            "sparse": 419.7055062632197,
            "graph": 2.0305885807618225
          },
          "normalized_scores": {
            "dense": 0.4800176723669316,
            "sparse": 0.33576440501057575,
            "graph": 0.7252102074149367
          },
          "weighted_scores": {
            "dense": 0.16800618532842604,
            "sparse": 0.1343057620042303,
            "graph": 0.18130255185373417
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4800176723669316,
              "query_max": 0.5585966241718552,
              "query_min": 0.4800176723669316,
              "normalized_score": 0.4800176723669316,
              "weight": 0.35,
              "weighted_score": 0.16800618532842604
            },
            "sparse": {
              "raw_score": 419.7055062632197,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.33576440501057575,
              "weight": 0.4,
              "weighted_score": 0.1343057620042303
            },
            "graph": {
              "raw_score": 2.0305885807618225,
              "query_max": 2.821,
              "query_min": 1.7680000000000005,
              "normalized_score": 0.7252102074149367,
              "weight": 0.25,
              "weighted_score": 0.18130255185373417
            }
          },
          "contribution_percentages": {
            "dense": 34.73969155413485,
            "sparse": 27.77124387920126,
            "graph": 37.48906456666389
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.4836144991863905,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.6286988489423077
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.6286988489423077
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.6915687338365385
            }
          },
          "combined_score": 0.6915687338365385
        }
      },
      "similarity": 0.6915687338365385
    },
    {
      "metadata": {
        "doc_id": "CWE-125",
        "name": "Out-of-bounds Read",
        "type": "Base",
        "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 420.5837159480876,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 420.5837159480876,
            "graph": 2.821
          },
          "normalized_scores": {
            "sparse": 0.3364669727584701,
            "graph": 1.0
          },
          "weighted_scores": {
            "sparse": 0.13458678910338803,
            "graph": 0.25
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 420.5837159480876,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.3364669727584701,
              "weight": 0.4,
              "weighted_score": 0.13458678910338803
            },
            "graph": {
              "raw_score": 2.821,
              "query_max": 2.821,
              "query_min": 1.7680000000000005,
              "normalized_score": 1.0,
              "weight": 0.25,
              "weighted_score": 0.25
            }
          },
          "contribution_percentages": {
            "sparse": 34.995166999147024,
            "graph": 65.00483300085297
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.38458678910338806,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.4999628258344045
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.4999628258344045
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.549959108417845
            }
          },
          "combined_score": 0.549959108417845
        }
      },
      "similarity": 0.549959108417845
    },
    {
      "metadata": {
        "doc_id": "CWE-123",
        "name": "Write-what-where Condition",
        "type": "Base",
        "original_content": "Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.",
        "relationships": [],
        "original_sparse_score": 442.9808873368611,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.5585966241718552,
            "sparse": 442.9808873368611
          },
          "normalized_scores": {
            "dense": 0.5585966241718552,
            "sparse": 0.3543847098694889
          },
          "weighted_scores": {
            "dense": 0.1955088184601493,
            "sparse": 0.14175388394779556
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.5585966241718552,
              "query_max": 0.5585966241718552,
              "query_min": 0.4800176723669316,
              "normalized_score": 0.5585966241718552,
              "weight": 0.35,
              "weighted_score": 0.1955088184601493
            },
            "sparse": {
              "raw_score": 442.9808873368611,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.3543847098694889,
              "weight": 0.4,
              "weighted_score": 0.14175388394779556
            }
          },
          "contribution_percentages": {
            "dense": 57.96929724641373,
            "sparse": 42.030702753586276
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.33726270240794487,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.43844151313032836
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.43844151313032836
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.48228566444336124
            }
          },
          "combined_score": 0.48228566444336124
        }
      },
      "similarity": 0.48228566444336124
    },
    {
      "metadata": {
        "doc_id": "CWE-502",
        "name": "Deserialization of Untrusted Data",
        "type": "Base",
        "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
        "relationships": [],
        "original_sparse_score": 397.08346871436794,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4861317570414614,
            "sparse": 397.08346871436794
          },
          "normalized_scores": {
            "dense": 0.4861317570414614,
            "sparse": 0.31766677497149437
          },
          "weighted_scores": {
            "dense": 0.17014611496451149,
            "sparse": 0.12706670998859776
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4861317570414614,
              "query_max": 0.5585966241718552,
              "query_min": 0.4800176723669316,
              "normalized_score": 0.4861317570414614,
              "weight": 0.35,
              "weighted_score": 0.17014611496451149
            },
            "sparse": {
              "raw_score": 397.08346871436794,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.31766677497149437,
              "weight": 0.4,
              "weighted_score": 0.12706670998859776
            }
          },
          "contribution_percentages": {
            "dense": 57.24723184181407,
            "sparse": 42.75276815818592
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.29721282495310924,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.38637667243904206
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.38637667243904206
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.4250143396829463
            }
          },
          "combined_score": 0.4250143396829463
        }
      },
      "similarity": 0.4250143396829463
    },
    {
      "metadata": {
        "doc_id": "CWE-122",
        "name": "Heap-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
        "relationships": [],
        "original_sparse_score": 409.9896480720133,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.4864378687645645,
            "sparse": 409.9896480720133
          },
          "normalized_scores": {
            "dense": 0.4864378687645645,
            "sparse": 0.32799171845761066
          },
          "weighted_scores": {
            "dense": 0.17025325406759756,
            "sparse": 0.13119668738304427
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.4864378687645645,
              "query_max": 0.5585966241718552,
              "query_min": 0.4800176723669316,
              "normalized_score": 0.4864378687645645,
              "weight": 0.35,
              "weighted_score": 0.17025325406759756
            },
            "sparse": {
              "raw_score": 409.9896480720133,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.32799171845761066,
              "weight": 0.4,
              "weighted_score": 0.13119668738304427
            }
          },
          "contribution_percentages": {
            "dense": 56.478118140710976,
            "sparse": 43.52188185928902
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.30144994145064186,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.36173992974077024
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.36173992974077024
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.39791392271484727
            }
          },
          "combined_score": 0.39791392271484727
        }
      },
      "similarity": 0.39791392271484727
    },
    {
      "metadata": {
        "doc_id": "CWE-197",
        "name": "Numeric Truncation Error",
        "type": "Base",
        "original_content": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
        "relationships": [],
        "original_sparse_score": 250.55266104101975,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 250.55266104101975,
            "graph": 2.1762
          },
          "normalized_scores": {
            "sparse": 0.20044212883281579,
            "graph": 0.7772142857142859
          },
          "weighted_scores": {
            "sparse": 0.08017685153312631,
            "graph": 0.19430357142857146
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 250.55266104101975,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.20044212883281579,
              "weight": 0.4,
              "weighted_score": 0.08017685153312631
            },
            "graph": {
              "raw_score": 2.1762,
              "query_max": 2.821,
              "query_min": 1.7680000000000005,
              "normalized_score": 0.7772142857142859,
              "weight": 0.25,
              "weighted_score": 0.19430357142857146
            }
          },
          "contribution_percentages": {
            "sparse": 29.210408038577874,
            "graph": 70.78959196142213
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.2744804229616978,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.3568245498502071
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3568245498502071
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.3925070048352279
            }
          },
          "combined_score": 0.3925070048352279
        }
      },
      "similarity": 0.3925070048352279
    },
    {
      "metadata": {
        "doc_id": "CWE-191",
        "name": "Integer Underflow (Wrap or Wraparound)",
        "type": "Base",
        "original_content": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
        "relationships": [],
        "original_sparse_score": 245.98366372652546,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.48363274789713095,
            "sparse": 245.98366372652546
          },
          "normalized_scores": {
            "dense": 0.48363274789713095,
            "sparse": 0.19678693098122038
          },
          "weighted_scores": {
            "dense": 0.16927146176399582,
            "sparse": 0.07871477239248816
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.48363274789713095,
              "query_max": 0.5585966241718552,
              "query_min": 0.4800176723669316,
              "normalized_score": 0.48363274789713095,
              "weight": 0.35,
              "weighted_score": 0.16927146176399582
            },
            "sparse": {
              "raw_score": 245.98366372652546,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.19678693098122038,
              "weight": 0.4,
              "weighted_score": 0.07871477239248816
            }
          },
          "contribution_percentages": {
            "dense": 68.25841052821599,
            "sparse": 31.74158947178401
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.24798623415648396,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.3223821044034292
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.3223821044034292
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.35462031484377216
            }
          },
          "combined_score": 0.35462031484377216
        }
      },
      "similarity": 0.35462031484377216
    },
    {
      "metadata": {
        "doc_id": "CWE-674",
        "name": "Uncontrolled Recursion",
        "type": "Class",
        "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
        "relationships": [],
        "original_sparse_score": 451.03424138639417,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "dense": 0.506832230582086,
            "sparse": 451.03424138639417
          },
          "normalized_scores": {
            "dense": 0.506832230582086,
            "sparse": 0.3608273931091153
          },
          "weighted_scores": {
            "dense": 0.17739128070373011,
            "sparse": 0.14433095724364614
          },
          "normalization_details": {
            "dense": {
              "raw_score": 0.506832230582086,
              "query_max": 0.5585966241718552,
              "query_min": 0.4800176723669316,
              "normalized_score": 0.506832230582086,
              "weight": 0.35,
              "weighted_score": 0.17739128070373011
            },
            "sparse": {
              "raw_score": 451.03424138639417,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.3608273931091153,
              "weight": 0.4,
              "weighted_score": 0.14433095724364614
            }
          },
          "contribution_percentages": {
            "dense": 55.13802273523467,
            "sparse": 44.86197726476532
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.32172223794737626,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.25737779035790104
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.25737779035790104
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.2702466798757961
            }
          },
          "combined_score": 0.2702466798757961
        }
      },
      "similarity": 0.2702466798757961
    },
    {
      "metadata": {
        "doc_id": "CWE-1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "relationships": [],
        "original_sparse_score": 399.52795714637523,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 399.52795714637523
          },
          "normalized_scores": {
            "sparse": 0.3196223657171002
          },
          "weighted_scores": {
            "sparse": 0.12784894628684007
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 399.52795714637523,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.3196223657171002,
              "weight": 0.4,
              "weighted_score": 0.12784894628684007
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12784894628684007,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.1662036301728921
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.1662036301728921
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.18282399319018133
            }
          },
          "combined_score": 0.18282399319018133
        }
      },
      "similarity": 0.18282399319018133
    },
    {
      "metadata": {
        "doc_id": "CWE-843",
        "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
        "type": "Base",
        "original_content": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
        "relationships": [],
        "original_sparse_score": 376.38861065820686,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 376.38861065820686
          },
          "normalized_scores": {
            "sparse": 0.3011108885265655
          },
          "weighted_scores": {
            "sparse": 0.1204443554106262
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 376.38861065820686,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.3011108885265655,
              "weight": 0.4,
              "weighted_score": 0.1204443554106262
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.1204443554106262,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.15657766203381407
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.15657766203381407
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17223542823719548
            }
          },
          "combined_score": 0.17223542823719548
        }
      },
      "similarity": 0.17223542823719548
    },
    {
      "metadata": {
        "doc_id": "CWE-787",
        "name": "Out-of-bounds Write",
        "type": "Base",
        "original_content": "The product writes data past the end, or before the beginning, of the intended buffer.",
        "relationships": [],
        "original_sparse_score": 375.6081460348458,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 375.6081460348458
          },
          "normalized_scores": {
            "sparse": 0.30048651682787664
          },
          "weighted_scores": {
            "sparse": 0.12019460673115066
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 375.6081460348458,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.30048651682787664,
              "weight": 0.4,
              "weighted_score": 0.12019460673115066
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12019460673115066,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.15625298875049587
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.15625298875049587
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.17187828762554547
            }
          },
          "combined_score": 0.17187828762554547
        }
      },
      "similarity": 0.17187828762554547
    },
    {
      "metadata": {
        "doc_id": "CWE-95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "type": "Variant",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
        "relationships": [],
        "original_sparse_score": 401.44587609327743,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 401.44587609327743
          },
          "normalized_scores": {
            "sparse": 0.32115670087462195
          },
          "weighted_scores": {
            "sparse": 0.12846268034984878
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 401.44587609327743,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.32115670087462195,
              "weight": 0.4,
              "weighted_score": 0.12846268034984878
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12846268034984878,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.15415521641981852
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.15415521641981852
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.1695707380618004
            }
          },
          "combined_score": 0.1695707380618004
        }
      },
      "similarity": 0.1695707380618004
    },
    {
      "metadata": {
        "doc_id": "CWE-121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "relationships": [],
        "original_sparse_score": 397.2473348383958,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 397.2473348383958
          },
          "normalized_scores": {
            "sparse": 0.3177978678707166
          },
          "weighted_scores": {
            "sparse": 0.12711914714828665
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 397.2473348383958,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.3177978678707166,
              "weight": 0.4,
              "weighted_score": 0.12711914714828665
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.2,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.12711914714828665,
            "abstraction": {
              "type": "variant",
              "factor": 1.2,
              "score_after": 0.15254297657794397
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.15254297657794397
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.16779727423573837
            }
          },
          "combined_score": 0.16779727423573837
        }
      },
      "similarity": 0.16779727423573837
    },
    {
      "metadata": {
        "doc_id": "CWE-193",
        "name": "Off-by-one Error",
        "type": "Base",
        "original_content": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
        "relationships": [],
        "original_sparse_score": 243.8359945948235,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 243.8359945948235
          },
          "normalized_scores": {
            "sparse": 0.1950687956758588
          },
          "weighted_scores": {
            "sparse": 0.07802751827034353
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 243.8359945948235,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.1950687956758588,
              "weight": 0.4,
              "weighted_score": 0.07802751827034353
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.07802751827034353,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.10143577375144659
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.10143577375144659
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.11157935112659126
            }
          },
          "combined_score": 0.11157935112659126
        }
      },
      "similarity": 0.11157935112659126
    },
    {
      "metadata": {
        "doc_id": "CWE-835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "type": "Base",
        "original_content": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
        "relationships": [],
        "original_sparse_score": 233.60965275160575,
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 233.60965275160575
          },
          "normalized_scores": {
            "sparse": 0.1868877222012846
          },
          "weighted_scores": {
            "sparse": 0.07475508888051384
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 233.60965275160575,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.1868877222012846,
              "weight": 0.4,
              "weighted_score": 0.07475508888051384
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 1.3,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.1,
          "mapping_usage": "ALLOWED",
          "adjustment_factors": {
            "initial_combined_score": 0.07475508888051384,
            "abstraction": {
              "type": "base",
              "factor": 1.3,
              "score_after": 0.09718161554466799
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.09718161554466799
            },
            "mapping": {
              "usage": "ALLOWED",
              "boost": 1.1,
              "notes": {
                "usage": "Allowed",
                "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
                "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
                "reasons": [
                  "Acceptable-Use"
                ]
              },
              "score_after": 0.1068997770991348
            }
          },
          "combined_score": 0.1068997770991348
        }
      },
      "similarity": 0.1068997770991348
    },
    {
      "metadata": {
        "doc_id": "CWE-116",
        "name": "Improper Encoding or Escaping of Output",
        "type": "Class",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "relationships": [],
        "original_sparse_score": 386.89837845306073,
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 386.89837845306073
          },
          "normalized_scores": {
            "sparse": 0.3095187027624486
          },
          "weighted_scores": {
            "sparse": 0.12380748110497944
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 386.89837845306073,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.3095187027624486,
              "weight": 0.4,
              "weighted_score": 0.12380748110497944
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 1.05,
          "mapping_usage": "ALLOWED-WITH-REVIEW",
          "adjustment_factors": {
            "initial_combined_score": 0.12380748110497944,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.09904598488398356
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.09904598488398356
            },
            "mapping": {
              "usage": "ALLOWED-WITH-REVIEW",
              "boost": 1.05,
              "notes": {
                "usage": "Allowed-with-Review",
                "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.10399828412818274
            }
          },
          "combined_score": 0.10399828412818274
        }
      },
      "similarity": 0.10399828412818274
    },
    {
      "metadata": {
        "doc_id": "CWE-20",
        "name": "Improper Input Validation",
        "type": "Class",
        "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
        "relationships": [],
        "original_sparse_score": 392.5420563031671,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "1284",
              "Comment": "Specified Quantity"
            },
            {
              "CweID": "1285",
              "Comment": "Specified Index, Position, or Offset"
            },
            {
              "CweID": "1286",
              "Comment": "Syntactic Correctness"
            },
            {
              "CweID": "1287",
              "Comment": "Specified Type"
            },
            {
              "CweID": "1288",
              "Comment": "Consistency within Input"
            },
            {
              "CweID": "1289",
              "Comment": "Unsafe Equivalence"
            },
            {
              "CweID": "116",
              "Comment": "Improper Encoding or Escaping of Output"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 392.5420563031671
          },
          "normalized_scores": {
            "sparse": 0.31403364504253367
          },
          "weighted_scores": {
            "sparse": 0.12561345801701349
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 392.5420563031671,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.31403364504253367,
              "weight": 0.4,
              "weighted_score": 0.12561345801701349
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.12561345801701349,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.1004907664136108
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.1004907664136108
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).",
                "comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).",
                "reasons": [
                  "Frequent Misuse"
                ],
                "suggestions": [
                  {
                    "CweID": "1284",
                    "Comment": "Specified Quantity"
                  },
                  {
                    "CweID": "1285",
                    "Comment": "Specified Index, Position, or Offset"
                  },
                  {
                    "CweID": "1286",
                    "Comment": "Syntactic Correctness"
                  },
                  {
                    "CweID": "1287",
                    "Comment": "Specified Type"
                  },
                  {
                    "CweID": "1288",
                    "Comment": "Consistency within Input"
                  },
                  {
                    "CweID": "1289",
                    "Comment": "Unsafe Equivalence"
                  },
                  {
                    "CweID": "116",
                    "Comment": "Improper Encoding or Escaping of Output"
                  }
                ]
              },
              "score_after": 0.08039261313088863
            }
          },
          "combined_score": 0.08039261313088863
        }
      },
      "similarity": 0.08039261313088863
    },
    {
      "metadata": {
        "doc_id": "CWE-119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "type": "Class",
        "original_content": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
        "relationships": [],
        "original_sparse_score": 387.1491325368913,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.",
          "comments": "Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.",
          "reasons": [
            "Frequent Misuse"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 387.1491325368913
          },
          "normalized_scores": {
            "sparse": 0.30971930602951303
          },
          "weighted_scores": {
            "sparse": 0.12388772241180522
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 387.1491325368913,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.30971930602951303,
              "weight": 0.4,
              "weighted_score": 0.12388772241180522
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.12388772241180522,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.09911017792944418
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.09911017792944418
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.",
                "comments": "Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.",
                "reasons": [
                  "Frequent Misuse"
                ]
              },
              "score_after": 0.07928814234355536
            }
          },
          "combined_score": 0.07928814234355536
        }
      },
      "similarity": 0.07928814234355536
    },
    {
      "metadata": {
        "doc_id": "CWE-138",
        "name": "Improper Neutralization of Special Elements",
        "type": "Class",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "relationships": [],
        "original_sparse_score": 382.84799225900474,
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse"
          ],
          "is_graph_exclusive": false,
          "raw_scores": {
            "sparse": 382.84799225900474
          },
          "normalized_scores": {
            "sparse": 0.3062783938072038
          },
          "weighted_scores": {
            "sparse": 0.12251135752288152
          },
          "normalization_details": {
            "sparse": {
              "raw_score": 382.84799225900474,
              "query_max": 544.429202487058,
              "query_min": 233.60965275160575,
              "normalized_score": 0.3062783938072038,
              "weight": 0.4,
              "weighted_score": 0.12251135752288152
            }
          },
          "contribution_percentages": {
            "sparse": 100.0
          },
          "abstraction_factor": 0.8,
          "relationship_count": 0,
          "relationship_bonus": 1.0,
          "mapping_boost": 0.8,
          "mapping_usage": "DISCOURAGED",
          "adjustment_factors": {
            "initial_combined_score": 0.12251135752288152,
            "abstraction": {
              "type": "class",
              "factor": 0.8,
              "score_after": 0.09800908601830521
            },
            "relationship": {
              "count": 0,
              "is_graph_exclusive": false,
              "bonus": 1.0,
              "score_after": 0.09800908601830521
            },
            "mapping": {
              "usage": "DISCOURAGED",
              "boost": 0.8,
              "notes": {
                "usage": "Discouraged",
                "rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate",
                "comments": "Examine children of this entry to see if there is a better fit",
                "reasons": [
                  "Abstraction"
                ]
              },
              "score_after": 0.07840726881464417
            }
          },
          "combined_score": 0.07840726881464417
        }
      },
      "similarity": 0.07840726881464417
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-190",
      "CWE-123"
    ],
    "critic_additional": [
      "CWE-787",
      "CWE-1284",
      "CWE-681",
      "CWE-122",
      "CWE-20",
      "CWE-502",
      "CWE-125"
    ]
  }
}